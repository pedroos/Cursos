(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1351743,      25573]
NotebookOptionsPosition[   1330295,      25217]
NotebookOutlinePosition[   1331713,      25255]
CellTagsIndexPosition[   1331536,      25248]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["2) O dom\[IAcute]nio das fun\[CCedilla]\[OTilde]es.", "Subsection",
 CellChangeTimes->{{3.7449991943785887`*^9, 3.744999200347196*^9}, {
  3.7449996866608424`*^9, 3.744999775061733*^9}, {3.7451506940357323`*^9, 
  3.7451507042394333`*^9}},ExpressionUUID->"2f38b3b2-ae57-472a-b69f-\
a0ccf8fcae77"],

Cell[TextData[{
 "a) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"3", "x"}], "-", "3"}]}], TraditionalForm]],ExpressionUUID->
  "19008610-3945-4f8b-8538-da54f1d8ecc3"],
 "\n\nO dom\[IAcute]nio \[EAcute] s\[OAcute] encontrar a restri\[CCedilla]\
\[ATilde]o. Pelo tipo da fun\[CCedilla]\[ATilde]o.\nN\[ATilde]o h\[AAcute] \
regra. Polinomial quadr\[AAcute]tica... \[EAcute] real."
}], "Text",
 CellChangeTimes->{{3.7449991943785887`*^9, 3.744999200347196*^9}, {
  3.7449996866608424`*^9, 3.744999775061733*^9}, {3.7451506940357323`*^9, 
  3.745150716636282*^9}, {3.7451507783382845`*^9, 
  3.7451507790783095`*^9}},ExpressionUUID->"81ba8f0c-8540-4908-8cd0-\
94db3768057a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], " ", "+", " ", 
    RowBox[{"3", " ", "x"}], " ", "-", " ", "3"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "6"}], ",", " ", "3"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.744999779921612*^9, 3.7449998715823784`*^9}, {
  3.7463628534231863`*^9, 3.7463628769776487`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"7917d6e1-dff8-476c-ba26-dfd16f7a2bf6"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
j+wYxR0yCMUFxcqEtfBDzEnph6r0En1+rZ32qpW8YFmX0Z8p8FnfNuv7Kdtn
XIAppqZu7OjUr1iuWdguzEHuikvzrKT/9C9mJz8wPDOMZFXNJAaNhvVJZZcO
pM4GI99PrlUSAxP6SjmkgMMRI/oXy42WosKZ+pLLmZO1HUv6p9iqYkvH5/TN
Z58/GdTmxft3pocf82Dr/8iL3WSpK4yXvXMtMPVZ1O+/ee7FRisMVztMbjLe
t6KfpfVig8+KJC5zJk2aWkTCf4v59yodk8UXlK4djRIj45kC5WNOTQr4Jf4a
t7eh3HgZ2dkiP1gJNztbsvE8iQfXuSpl8jd+M+5nwt0l78WL2zWkBAteVsNd
7tNt/S/w4k0lv8KKb6jh5hzLb41BvLiSaTDJOEcNVy8s+ugdy4s/f10Qf61G
DR8im715lc2Lq7k239nNVMMdXmbes2nlxR3faH7lc9qCG6qqu6RqUfCFwluX
LuvS8e2R1t3/7aHgmaOcJF8TOq7wPdJO24CC00eeSLnY0vGV2HaLbjMKLi8p
8OJgAB2v6r34D92dgrtoJ83seEzH6Zl1Sk1ZFFwj5mlotAwDl5ocy9mQS8GH
AhRSMrYw8LVG4jI+hRQ8bWO/fOkuBj444y4mXknBX5VaNv6xZOA5R4R4XT9S
cNdEHskLKQw8pUA7+kU7BS+yXKRn3WHg4ctOK/ydFLy/c19t/UMGbldSMf90
kIIri789p9TIwA+Su3x5xon+Wzgx1t8YuLYt76TNDGHdGKnk/xi4ctlWr0cc
4v97nNhWP83AMYrt39VVCv7/30P+D3XhwV0=
       "]]},
     Annotation[#, "Charting`Private`Tag$4010#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6, 3}, {-5.249999520189824, 14.99999834693881}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[1]=",ExpressionUUID->"0a344512-339b-431e-b9dc-39d01df5dc00"]
}, Open  ]],

Cell[TextData[{
 "\nb) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{
     RowBox[{"cos", "(", "x", ")"}], "-", "1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "1fed8ae9-ea88-4016-a448-6007b7e92996"]
}], "Text",
 CellChangeTimes->{{3.7449991943785887`*^9, 3.744999200347196*^9}, {
   3.7449996866608424`*^9, 3.744999748114083*^9}, 3.7449998926642323`*^9, {
   3.7451507824323397`*^9, 
   3.7451507828821373`*^9}},ExpressionUUID->"44924518-5dfc-4e35-97f3-\
2eef7fbc26de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.7449998973695917`*^9, 3.744999973621169*^9}, {
  3.7450000630691*^9, 3.7450000850427303`*^9}, {3.745000137714383*^9, 
  3.7450002053955097`*^9}, {3.7450897471514273`*^9, 3.7450897477584853`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"0c83d337-691e-4192-a351-dbe819aa7ef8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
hMV1AsqLFbrQc94i08QfSnj0fMD3Tv9O1GXMMFD8rIRfZ2g9teLsQP/V7KSI
RythngXLmdCFFhTW3lY5e04Jf1qPCvZk1yNfwsD5Ye9a3P32ycMQ7XyU6/ni
yudja/CDd92B593+Apr9tXdNB9fg20Phn++3/QX3TQ92rdq7BpeAkveh+2uB
7cbpUyd11uBq4zXq/2TqgFDr8T1zlDX4+Iu3Un+z64H1bgHKvh5F7Kdx3ngt
4x/g4vEqabyhiG0FOpe5FDuAy9hRDg4XRcwbSjxw8O8ATe0qOzdeVMS5WWeX
/2vvAB+z69J9LRXx+W1OVNfYTmB+aUus0m5FfCKqd0DgXhd4/3vg+hU+RfyC
q/Cx70I3OProlNLycwWMr+SKjmX2AR8tUWOjxwr4eFQNV3lbH0iq/XXtYYQC
/rBZUNORpx8sS+wqogUqYM+eqovsU/0g7THN0cheAX/U7J7bONkPhJ8QHx5q
KOAlw1Ze1rpBsE03pb55gwJu1qAc6zMeBPYNtks0ZQWsHOs199xlEPyQbjya
JamATTrf/tudMwicYn6MNc/KY0mJhKd2+4dAxdO7+vQiefxIMuJO4clhMK2/
77zzD3l80VpR+pr7MKA1LYZlZcljvTd3B/89GQY+lKstRu/lMXPvI3ZlwzDY
+Nzc3/m+PPZvtvt+6MQICHtBL8qykMepPBPJxgYM8HVHO2PZVB7PPzL2NbNk
gK6WGKmDh+QxUl8DxdwZYJu8oGPLLnm8Cgc5JnxggKGXo/wryvK4xK+omirN
BEavfh49yJTDx0CKPr2ZCUbvty1yD8hhNs/st09sJngRsJBa0CmHLeICjk5w
sQDTZjvfzjo5nGVg1pGkzgKPaFlIPU8OD3zfIZbhzwK7JOv/G8mUw5MZqTEc
USzQzzUhn5xGzr9ll8D7lgW29Wt6KSXI4Z2XG+5uK2eBjuSPmpJhZP7i2lwN
MTYIe/a7o/qmHI6d/+Wio8wGW++ORET4yuHEM7eMRreyQcgV1WEeV3L8XPfP
uyfYQE39bcLsKTnsbWblAh6yQb1i0bGsY3L4nM2z/rHXbOAv0rN0zVgOd1SZ
H7ZMY4MaYu0Zxi45fJ6j/tSBcjbwyHgp0UGXw0uDoTlPlthAKTEPv1CUw7/o
d9gMAQKUP252sZCVwxsqylZPSxNAwV32d42gHI47nxWpok6AUgc97/vccviD
+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
Jzc7gv7f75vh//998/8BVs953Q==
       "]]},
     Annotation[#, "Charting`Private`Tag$4116#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.99999994920722, 0.9999998271013036}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"04e1e6b7-4087-4fd2-a8c1-4bf3c4baa6d4"]
}, Open  ]],

Cell[TextData[{
 "\nSinusoidal. Real.\n\nc) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{"log", "(", 
     RowBox[{"x", "-", "1"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "168864cd-8e8d-4471-85cc-926a9b3b8274"],
 "\n\nLogar\[IAcute]tmica. Base ou expoente vari\[AAcute]vel? Expoente. \
Pensar nos valores \[OpenCurlyDoubleQuote]corner\[CloseCurlyDoubleQuote].\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"log", " ", "0"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["log", "e"], "0"}], "="}]}], TraditionalForm]],
  ExpressionUUID->"a56fa73d-e160-42b5-859d-b5d461a931ae"],
 " ?\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["log", "2"], "8"}], "=", "3"}], ";", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["log", "n"], "0"}], "="}]}], TraditionalForm]],
  ExpressionUUID->"452cda20-1825-4232-a08c-1f622f4f137b"],
 "n\[ATilde]o existe.\nEnt\[ATilde]o ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[NotEqual]", "1"}], TraditionalForm]],ExpressionUUID->
  "fe46ef16-63c6-444f-99f1-c7e4c8a9ae77"],
 ".\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"log", " ", "-", "1"}], "=", "?"}], TraditionalForm]],
  ExpressionUUID->"717ce195-7b0b-482d-b92a-31c80dee77b2"],
 " \[CapitalEAcute] complexo.\nPortanto essa fun\[CCedilla]\[ATilde]o h\
\[AAcute] de ser positiva ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[NotEqual]", " ", "1"}], TraditionalForm]],ExpressionUUID->
  "c41916ff-8183-467e-8bfd-a274dcc55a61"],
 "."
}], "Text",
 CellChangeTimes->{{3.7449991943785887`*^9, 3.744999200347196*^9}, {
   3.7449996866608424`*^9, 3.744999748114083*^9}, {3.7450002237529726`*^9, 
   3.7450003326636176`*^9}, {3.745000371742322*^9, 3.745000592383035*^9}, {
   3.745000643129691*^9, 3.7450006522554545`*^9}, {3.7450006873190565`*^9, 
   3.745000693398717*^9}, {3.745000766160344*^9, 3.7450007763510733`*^9}, {
   3.745000822254241*^9, 3.7450008897165623`*^9}, {3.745055490761245*^9, 
   3.7450554920747585`*^9}, 3.7450897260634313`*^9, {3.7451507900559564`*^9, 
   3.74515079057456*^9}, {3.7458492183302207`*^9, 3.745849223313134*^9}},
 CellTags->
  "LogZeroNaoExiste",ExpressionUUID->"6a49e7b2-a652-4265-9836-f7dac9cfc3f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Log", "[", 
     RowBox[{"x", "-", "1"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7450008955322356`*^9, 3.74500101490878*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"8f04e017-4ac9-4a4c-8e01-1a31849d8d41"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
HI4eHFYJcEnFUAT3oEAiwREiMs6NpmHov8p92YI=
       "]]},
     Annotation[#, "Charting`Private`Tag$106557#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 9.999999591836735}, {-10, 10}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7450009115171556`*^9, 3.7450009199148483`*^9}, {
  3.745000956333187*^9, 3.7450010152040133`*^9}},
 CellLabel->"Out[97]=",ExpressionUUID->"2d0e4105-6027-470a-b2a5-25ae63244d23"]
}, Open  ]],

Cell[TextData[{
 "Ela \[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{">", "1"}], TraditionalForm]],ExpressionUUID->
  "87d43ca0-a868-45bd-87ca-ed00d4b4277e"],
 ". Quanto ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     RowBox[{"log", " "}], "2"], 
    RowBox[{
     FractionBox["1", "2"], "?"}]}], TraditionalForm]],ExpressionUUID->
  "33c66f00-d083-4f7e-8ee9-c38cd83eae14"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "x"], "=", 
    FractionBox["1", "2"]}], TraditionalForm]],ExpressionUUID->
  "06178642-71a1-46ed-b25b-530efd195ca8"],
 ". ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["2", "2"], "=", 
     RowBox[{"4", ">", "1"}]}], ",", 
    RowBox[{
     SuperscriptBox["2", "1"], "=", 
     RowBox[{"2", ">", "1"}]}], ",", 
    RowBox[{
     SuperscriptBox["2", 
      FractionBox["1", "2"]], "=", 
     RowBox[{
      SqrtBox["2"], ">", "1"}]}], ",", 
    RowBox[{
     SuperscriptBox["2", 
      FractionBox["1", "20"]], "=", 
     RowBox[{
      RadicalBox["2", "20"], "="}]}]}], TraditionalForm]],ExpressionUUID->
  "9b02a04f-9b05-4765-935a-e16df6f98bca"]
}], "Text",
 CellChangeTimes->{{3.7450010373399825`*^9, 3.7450011809677486`*^9}, {
  3.745001306942972*^9, 3.745001417003962*^9}, {3.7450014566460743`*^9, 
  3.7450016007279854`*^9}, {3.7450018587430253`*^9, 
  3.745001860077222*^9}},ExpressionUUID->"e289eecc-c0d3-406b-b1ed-\
de58d135bf8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Surd", "[", 
   RowBox[{"2", ",", "20"}], "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.74500160495376*^9, 3.7450016462914915`*^9}, {
  3.7450017190376635`*^9, 3.7450017370348125`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"7eae3423-b628-481b-85cd-8037722b58b8"],

Cell[BoxData["1.0352649238413776`"], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"0f9b57a5-31b9-4682-a7b6-f9252ec2277c"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{">", "0"}], ",", " ", 
   RowBox[{
    SuperscriptBox["2", 
     FractionBox["1", "2000"]], "=", 
    RowBox[{
     RadicalBox["2", "2000"], "="}]}]}], 
  TraditionalForm]],ExpressionUUID->"20f5285e-36a1-4dec-86b3-a7e8c1ca001d"]], \
"Text",
 CellChangeTimes->{{3.745001760321295*^9, 
  3.74500180898857*^9}},ExpressionUUID->"62b755e5-f5bb-41bc-b0a0-\
bc3fe71ed42f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Surd", "[", 
   RowBox[{"2", ",", "2000"}], "]"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7450018139168587`*^9, 3.74500182152876*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"e91a4c24-f71c-4fd0-b3cf-e7feb45b2884"],

Cell[BoxData["1.0003466336538454`"], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"eb806a57-2331-45c8-820c-3676f405d48c"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{">", " ", "0"}], TraditionalForm]],ExpressionUUID->
  "559f0432-a817-4a3b-af12-4c160286866c"],
 ". Portanto h\[AAcute] um limite envolvido... ",
 StyleBox["Como saber se h\[AAcute] um limite envolvido sem plotar a fun\
\[CCedilla]\[ATilde]o?",
  FontWeight->"Bold",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.745001844346382*^9, 3.7450018536926527`*^9}, {
  3.7450019025074844`*^9, 3.745001921959503*^9}, {3.745002115925778*^9, 
  3.745002156449463*^9}},ExpressionUUID->"79c28b42-e546-4bc0-9c09-\
f3737d088336"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "domain of Log[x-1]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "FunctionDomain[Log[x - 1], x]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"domain\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", "1"}], ")"}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "DomainAndRange", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionDomain[Log[x - 1], x]"}], 
       XMLElement["moutput", {}, {"x > 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"{\"", 
                  RowBox[{"x", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                  RowBox[{"x", ">", "1"}], "\"}\""}, "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a function from reals to reals\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}]], 
                  Global`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NumberLine", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "DomainAndRange", "title" -> 
     "Number line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[x > 1, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{
                 RGBColor[0.24720000000000014`, 0.24, 0.6], {
                  Thickness[Large], 
                  Arrowheads[{0.03}], 
                  ArrowBox[{{1., 0.066}, {3., 0.066}}]}, 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{1., 0.066}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{1., 0.066}]}, "1"], 
                  Annotation[#, 1., "Tooltip"]& ]}}, ImageSize -> 300., 
               Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{0.8999999999999999, 3.1}, Automatic}, 
               AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "RangeOfFunction", "numsubpods" -> "1",
      "position" -> "400", "scanner" -> "DomainAndRange", "title" -> 
     "Range of function"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionRange[Log[x - 1], x, y]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Bijectivity", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "DomainAndRange", "title" -> 
     "Bijectivity"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"bijective \"", 
              StyleBox["\" from its domain to \[DoubleStruckCapitalR]\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "DomainAndRange", "id" -> "Plots",
      "position" -> "600", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7750$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min7749$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7750$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3620291$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7749$\
3620292$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7750$3620293$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7750$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min7749$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3620291$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7749$\
3620292$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7750$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7750$\
3620293$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3620273[
                    Plot[
                    SlotSequence[1]]], HoldAll][
                    Log[-1 + $CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7750$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7750$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max7750$$]], 
                    1]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7749$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7750$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3620273]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3620273[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3620273[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEesQ4gsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+\
JM92Xg1fDF9vOxiMZQxaE8nVTlvIPJOgSNJDoBvGvGPAv7nj4/\
L4qWAsJN8LwiOiHhrvREJsYAQHhvl433q1mbqHiWngMcj40mmy8hy1vUBpSXk6IbMc37iYrO22wCBT\
5bi5X3KzTkEu/Fv4QIQ2JuexSduzJdAvjCtG33lZ/XPuBnh+2xZeitPVxGF+\
uwx5A01PiFqm83nrOjlGqq610c+5uqz5stEgL54y9f/\
SEVV6OYxh2zDI7NjUeLX2luFftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb4NxuE4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7752$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min7751$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7752$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3620374$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7751$\
3620375$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7752$3620376$$ = 0\
}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7752$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min7751$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3620374$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7751$\
3620375$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7752$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7752$\
3620376$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3620356[
                    Plot[
                    SlotSequence[1]]], HoldAll][
                    Log[-1 + $CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$], \
-6], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7752$$]], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7752$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$ + 
                    Rational[3, 250], 
                    CalculateUtilities`GraphicsUtilities`Private`max7752$$]], 
                    6]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7751$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7752$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3620356]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3620356[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3620356[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEazTviHBOjYmDShJ+\
V4vuSQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/5iQiSfq/XUzeN+\
SBYnGzh6ZkxIzHLRcHj9+\
e5BKWo4MkNfHbPmBD0PjDyA2Lnu23MgZAzot35Db5PWFQwouGrpoxqCmp6KEme0UjVnrGkp+\
YnUyYiwuhPeDHc3X413N1xMBjLmGgNkqthW8g8k0RB0kOgW8bsMcK/\
uePT8vipYCyE7wXwCNRj451IEhsYwQnDfLxvvd5MPcDENOExkfGV02TlOWp7gdKS8nQCsxzfuJys12\
2BiUyV4+Zhyc06Bbnw7+ADEdqYnMcmbc+WQL8wrhl9F2X1z7kb4PltW3gpzlYTh/\
m9Y8gb0fQU1DKdL1vXyTFSda2Nfs7VVc2XjQZ5+ZSp/5eOqdLLYWy3DQNmJ6bGq7W3DL/\
TFl7k2PVzcT8y5rNzlICrhkMluI8iLtg8imbKAyfR9umq3Dgcxv2K7xCdPhWscAITZ9kvtj+\
eVOD1phBi7aYbkA6vZ0AAORhXbLndpynVo4xIEhng+\
XX9sskmog7F4872tac8pmaAOULWLU9ojpKFuhMdZV/+qLiVXC40GfJ+xDWkINeK/\
i7WRxpyeTwRnpGEeEFTr94cVkmNifSW/aAECXPCKULSX+Zjv7mHi5VAqg4lqks6Fge2NOf+\
SfTLAh8DT3XW3LE9R5d322I2gTirVRfQJFmcNptjut9kunFDc6D7kuBbEv+\
B3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUaM/0q/AXcGuF4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Real-valued plot", "delimiters" -> ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plots__2_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plots__2_Real-valued plot"}, {}]}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "2"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "domain", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "DomainAndRangeWord", "desc" -> 
          " referring to a real function property", "input" -> 
          "*C.domain-_*DomainAndRangeWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "desc" -> "a plotting function", "input" -> 
          "*C.domain-_*PlotsWord-"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "*FunClash.Log-_*Log.Log10-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "*FunClash.Log-_*Log10.Log-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "FunctionDomainAndRange", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "1.627", "parsetiming" -> "0.616", "parsetimedout" -> "false",
     "recalculate" -> "", "id" -> 
    "MSPa55121c42220a4efea2cc00005ibc1ah08ecf36f6", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "52", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa55131c42220a4efea2cc00002980he9f8afgg0246140422195261669885", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2018, 9, 3, 19, 23, 26.5714484`9.176990146534138}, "Line" -> 
    101, "SessionID" -> 25004063025469626122}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "FunctionDomain[Log[x - 1], x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "domain of Log[x-1]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{238., {48., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[101]:=",ExpressionUUID->"96698c25-8a53-462a-8238-32c903caf486"],

Cell[BoxData[
 RowBox[{"x", ">", "1"}]], "Output",
 CellChangeTimes->{3.745002206621252*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"84755e08-6f36-4a1a-bea7-888af39b8129"]
}, Open  ]],

Cell[TextData[{
 "Primeiro, o limite \[EAcute] em um ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "1005b6b6-5fb9-4122-826e-853030092611"],
 ". Aqui, em ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "b03a688e-9c4e-442a-981d-78921e354736"],
 ". Mas porqu\[EHat] ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "8cf19fb5-c00f-4339-9859-88cdac1d84e2"],
 "? Nenhuma regra. Apenas por tipo da fun\[CCedilla]\[ATilde]o. Plotando ",
 Cell[BoxData[
  FormBox[
   RowBox[{"log", " ", "x"}], TraditionalForm]],ExpressionUUID->
  "38f01016-03fd-4cb0-a06b-9accdfb1a74c"],
 ":"
}], "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.745055158887694*^9, 3.7450551758822904`*^9}, {
  3.7450552112057805`*^9, 
  3.745055321299431*^9}},ExpressionUUID->"f67ad11e-40b7-4e2f-8e32-\
ca340bea431a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Log", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.7450553305756197`*^9, 3.745055341270018*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"e0bb3c35-fca2-4801-b741-cb765b53a257"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
e38Mhc+e4W9t4WhiyrKy7BKG/gWN/k0i
       "]]},
     Annotation[#, "Charting`Private`Tag$4160#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.6330839746860504`, 2.3025850521777183`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"dfe401c2-b0af-4900-9fd9-2f583605a579"]
}, Open  ]],

Cell[TextData[{
 "Sabendo que ",
 Cell[BoxData[
  FormBox["log", TraditionalForm]],ExpressionUUID->
  "f39b71de-0c43-4184-a7cb-09da46adcea2"],
 " de negativo n\[ATilde]o existe e ",
 Cell[BoxData[
  FormBox["log", TraditionalForm]],ExpressionUUID->
  "bb0b2dc4-0d18-4723-bd16-a546ae9708be"],
 " de ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "1135aca3-7ace-480a-9fc0-21023821c788"],
 " ",
 ButtonBox["n\[ATilde]o existe",
  BaseStyle->"Hyperlink",
  ButtonData->"LogZeroNaoExiste"],
 ", o dom\[IAcute]nio \[EAcute] o restante.\nMas, em um ponto ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "e4772efd-9ea7-4c26-bddf-fd82c5c1d91a"],
 ", \[EAcute] poss\[IAcute]vel saber se h\[AAcute] um limite sem plotar a fun\
\[CCedilla]\[ATilde]o usando o ",
 StyleBox["teorema",
  FontWeight->"Bold"],
 " (Jupyter). (Que eu n\[ATilde]o vou conseguir entender agora.)\n\nd) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    FractionBox["1", 
     RowBox[{"x", "-", "2"}]]}], TraditionalForm]],ExpressionUUID->
  "6418c2bf-908e-48c4-a134-6c27f7e74b6e"],
 "\n\nLinear, apenas com denominador ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[NotEqual]", "0"}], TraditionalForm]],ExpressionUUID->
  "a84cdf40-cf9b-41c4-abe6-4bcbcfb9dfca"],
 ". Portanto ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", " ", "\[NotEqual]", "2"}], TraditionalForm]],ExpressionUUID->
  "fd3bb220-a388-46ee-a73e-6904a265369d"],
 "."
}], "Text",
 CellChangeTimes->{{3.745055432767323*^9, 3.7450554719635005`*^9}, {
  3.745055542568739*^9, 3.745055567592819*^9}, {3.745055754451128*^9, 
  3.7450557544521255`*^9}, {3.7450557915439124`*^9, 3.74505587086186*^9}, {
  3.7450872001841035`*^9, 3.7450872117669845`*^9}, {3.7450872429178343`*^9, 
  3.7450872554495544`*^9}, {3.7450872968237925`*^9, 3.745087360544667*^9}, {
  3.745150809018244*^9, 
  3.745150809437127*^9}},ExpressionUUID->"67379076-9dbb-4c83-b229-\
f13a4fa9f031"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "domain of y=1/(x-2)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "FunctionDomain[1/(x - 2), x]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"domain\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    FractionBox["1", 
                    RowBox[{"x", "-", "2"}]], Identity]}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "DomainAndRange", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionDomain[1/(x - 2), x]"}], 
       XMLElement["moutput", {}, {"x < 2 || x > 2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"{\"", 
                  RowBox[{"x", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                  RowBox[{"x", "\[NotEqual]", "2"}], "\"}\""}, 
                 "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a function from reals to reals\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}]], 
                  Global`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NumberLine", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "DomainAndRange", "title" -> 
     "Number line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[x < 2 || x > 2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{2., 0.264}, {-2., 0.264}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{2., 0.264}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{2., 0.264}]}, "2"], 
                   Annotation[#, 2., "Tooltip"]& ]}, {
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{2., 0.264}, {6., 0.264}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{2., 0.264}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{2., 0.264}]}, "2"], 
                   Annotation[#, 2., "Tooltip"]& ]}}}, ImageSize -> 300., 
               Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{-2.4000000000000004`, 6.4}, Automatic}, 
               AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "RangeOfFunction", "numsubpods" -> "1",
      "position" -> "400", "scanner" -> "DomainAndRange", "title" -> 
     "Range of function"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionRange[1/(x - 2), x, y]"}], 
       XMLElement["moutput", {}, {"y < 0 || y > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}], "\" : \"", 
              RowBox[{"y", "\[NotEqual]", "0"}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Injectivity", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "DomainAndRange", "title" -> 
     "Injectivity"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"injective \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"one\[Hyphen]to\[Hyphen]one\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "DomainAndRange", "id" -> "Plots",
      "position" -> "600", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4286$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4285$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4286$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1784749$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4285$\
1784754$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4286$1784755$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4286$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4285$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1784749$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4285$\
1784754$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4286$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4286$\
1784755$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1784729[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(-2 + $CellContext`x)^(-1), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$], 
                    (
                    Piecewise[{{
                    2. + 1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, 2. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$], 
                    0.98], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4286$$]], 
                    (
                    Piecewise[{{
                    2. + 1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, 2. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4286$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$ + 
                    0.00204, 
                    CalculateUtilities`GraphicsUtilities`Private`max4286$$]], 
                    3.02]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4285$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4286$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1784729]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1784729[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1784729[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNDZp8AEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+\
nRr98XO7vZLD4OxjMAYqoTebguZZwo0TXsIdM2atxzEN398VB4/FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbUFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh/G8bRh0dmRrvFp7y/A7beFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DZrsuNY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4288$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4287$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4288$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1784837$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4287$\
1784838$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4288$1784839$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4288$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4287$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1784837$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4287$\
1784838$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4288$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4288$\
1784839$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1784819[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(-2 + $CellContext`x)^(-1), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$], 
                    (
                    Piecewise[{{
                    2.0000000000000004` + 
                    6.542555202016149 Tan[1.5040801783846716` #], # < 0}}, 
                    2.0000000000000004` + 
                    6.542555202016149 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$], \
-4.12], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4288$$]], 
                    (
                    Piecewise[{{
                    2.0000000000000004` + 
                    6.542555202016149 Tan[1.5040801783846716` #], # < 0}}, 
                    2.0000000000000004` + 
                    6.542555202016149 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4288$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$ + 
                    0.012240000000000003`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4288$$]], 
                    8.120000000000001]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4287$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4288$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1784819]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1784819[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1784819[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbinv7/APkPiMtDFp+4IEdDAmDShJ+\
V4vvqQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/ZsYzSfq/X09et+SA5TW/\
h6ak1QznLZSHou7NcgdZMivQaPrtrTQxmHzj5AdT7blrzXqoZMf78Ct8nPCk4MfDVMM4MAz05UCSfs\
kTXnpFiJ/YnEy4TwtlPeL61u7ezt73rYTCWETEGlNAv20LmU0U0pD0EumHNW07EN398Uh4/\
FZzH8L0AkYB+\
ZL1jRaiFkYJwzCf41qvN1H1MzBBBiaKXTpOT57DtBdooJrIxzHJ842KyttoCE5Vpz82Dkpt1CvLh38\
YHMnYxeY9L2p0dgWFhXDH6zsvqn3M3wPPrtvBKnq4mDvN7w5E3YtgJ6GU6X7Suk2ek6loX/\
Zyry5ovGw3y4ilT/\
y8dMW2Ww9huGwbMjm2NV2tvGX6nLbzMsevn4n5ozWfvKAFXDYdKcB8lLfg8imbKAy/\
R9unq3Do8xr2K7xidIRWscCIbZ9kvrj8eV+D1phBj7SYbkI6oZ0AEOVgXddzus4yZ4ZQokljg+\
XX9ssnGsg4l4M72tWeCMjvAPCHrlic0h+lC3YlJpl/+qLiVXM41GfJ+KAxkoNaK/\
g7WR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/tx3/\
zDxUogVQcK1aU8iwNXmrPwJPplgY9AZGba3LEDR1dw22I2kTytVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AadfuMY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "domain", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "DomainAndRangeWord", "desc" -> 
          " referring to a real function property", "input" -> 
          "*C.domain-_*DomainAndRangeWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "desc" -> "a plotting function", "input" -> 
          "*C.domain-_*PlotsWord-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "FunctionDomainAndRange", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "1.284", "parsetiming" -> "0.647", "parsetimedout" -> "false",
     "recalculate" -> "", "id" -> 
    "MSPa929514e1a884e79409ha0000418ed18b67i73ia5", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "49", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa929614e1a884e79409ha00004bh5cdgca91h0f181127199754393067178", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2018, 9, 4, 19, 3, 10.847885`8.787920034413347}, "Line" -> 103,
     "SessionID" -> 25004063025469626122}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "FunctionDomain[1/(x - 2), x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "domain of y=1/(x-2)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{235., {48., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[103]:=",ExpressionUUID->"7789feaa-e88e-4e25-a45a-e9aab093f5c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "<", "2"}], "||", 
  RowBox[{"x", ">", "2"}]}]], "Output",
 CellChangeTimes->{3.745087391103467*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"955c41b3-5b56-47b1-9007-33a19118c07f"]
}, Open  ]],

Cell[TextData[StyleBox["Nops.",
 FontVariations->{"StrikeThrough"->True}]], "Text",
 CellChangeTimes->{{3.745087404325345*^9, 3.745087404889639*^9}, {
  3.7450875942802095`*^9, 
  3.745087595366088*^9}},ExpressionUUID->"e540f471-9fe9-4957-8d08-\
7eb26dd76a8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"x", "-", "2"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7450874469698205`*^9, 3.7450874887464733`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"255048dc-a4e6-4de4-9fc3-7c8a9749a9a9"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
Vp3oPDJ2p1QJOczD/wC3JDRK
        "]], LineBox[CompressedData["
1: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
QPSQ+/TSEoFpOo/V5OQ48D944yfL
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$109623#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.1450221270116128`, 1.1403732380120797`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7450874759038095`*^9, 3.7450874892152863`*^9}},
 CellLabel->
  "Out[105]=",ExpressionUUID->"0e08f9d9-6125-49e6-8636-c5ed7837d53e"]
}, Open  ]],

Cell[TextData[{
 "Essa fun\[CCedilla]\[ATilde]o n\[ATilde]o \[EAcute] linear nunca. Mas... \
sim... estava certo. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[NotEqual]", "2"}], TraditionalForm]],ExpressionUUID->
  "6208d1ea-7de8-42b1-ba82-f4fd8d846a30"],
 ". Essa fun\[CCedilla]\[ATilde]o \[EAcute] uma fun\[CCedilla]\[ATilde]o de \
grau 1? Ela \[EAcute] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "-", "2"}], ")"}], 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "487ebc72-aa12-4746-9693-31480d5d320c"],
 ". Ela \[EAcute] uma fun\[CCedilla]\[ATilde]o pot\[EHat]ncia de expoente ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "1d2592d3-3f3a-4873-8885-d88508232e77"],
 "."
}], "Text",
 CellChangeTimes->{{3.745087520512283*^9, 3.7450875724488487`*^9}, {
  3.745087677251632*^9, 3.7450877117945395`*^9}, {3.7450877430063906`*^9, 
  3.745087746575317*^9}, {3.7450881363594956`*^9, 3.74508822073108*^9}, {
  3.7450892140412917`*^9, 
  3.7450892259929557`*^9}},ExpressionUUID->"9bea0c54-7d61-4071-8d1a-\
9238ab2a6780"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     SuperscriptBox["x", "a"], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"-", "10"}], ",", "10", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7450877630277576`*^9, 3.7450879387911425`*^9}, {
  3.745088016968321*^9, 3.7450880256529617`*^9}, {3.74508820918814*^9, 
  3.745088212763279*^9}, {3.7450882443084116`*^9, 3.745088260689369*^9}, {
  3.7450883091652164`*^9, 3.7450883167787704`*^9}, {3.7450883685256176`*^9, 
  3.7450883685412717`*^9}, {3.7450885113481812`*^9, 3.745088517227403*^9}, {
  3.7458630632809243`*^9, 3.7458631161895485`*^9}, {3.7458631679846807`*^9, 
  3.745863168951769*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"d7933b45-11fc-4c87-86e6-642ef1896b96"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = -1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`a$$], -1}, -10, 10, 1}}, Typeset`size$$ = {
    360., {109., 113.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`a$548905$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`a$$ = -1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$548905$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[$CellContext`x^$CellContext`a$$, {$CellContext`x, -10, 10}], 
      "Specifications" :> {{{$CellContext`a$$, -1}, -10, 10, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{411., {155., 161.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.745863086266059*^9, 3.745863120764511*^9}, 
   3.745863170188177*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"6d734efc-e7eb-42b9-82a5-9fdc709608be"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`a$$ = -2, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{{
        Hold[$CellContext`a$$], -1}, -10, 10, 1}}, Typeset`size$$ = {
     360., {111., 116.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`a$130369$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`a$$ = -1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`a$$, $CellContext`a$130369$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> 
       Plot[$CellContext`x^$CellContext`a$$, {$CellContext`x, -10, 10}], 
       "Specifications" :> {{{$CellContext`a$$, -1}, -10, 10, 1}}, 
       "Options" :> {}, "DefaultOptions" :> {}],
      ImageSizeCache->{411., {158., 164.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]], " "}]], "Text", "Input",
 CellChangeTimes->{{3.745088387009695*^9, 3.7450883893428564`*^9}, 
   3.7458630297798395`*^9},ExpressionUUID->"19ac677e-3070-4d9c-bcdf-\
ec4d8896bfb1"],

Cell["Com o \[OpenCurlyDoubleQuote]deslocamento\[CloseCurlyDoubleQuote]:", \
"Text",
 CellChangeTimes->{{3.7450886110963526`*^9, 
  3.745088633524386*^9}},ExpressionUUID->"c1eee9a9-d23a-4030-9790-\
0244a70e00ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "+", "b"}], ")"}], "a"], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"-", "20"}], ",", "20", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"-", "20"}], ",", "20", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7450877630277576`*^9, 3.7450879387911425`*^9}, {
  3.745088016968321*^9, 3.7450880256529617`*^9}, {3.74508820918814*^9, 
  3.745088212763279*^9}, {3.7450882443084116`*^9, 3.745088260689369*^9}, {
  3.7450883091652164`*^9, 3.7450883167787704`*^9}, {3.7450883685256176`*^9, 
  3.7450883685412717`*^9}, {3.7450885113481812`*^9, 3.7450885367079773`*^9}, {
  3.7450886965122766`*^9, 3.7450887662115364`*^9}, {3.7450889879320183`*^9, 
  3.7450889950816584`*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"1401e1d3-b3b6-4783-ae88-a84a9b56beec"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = -5, $CellContext`b$$ = 4, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`a$$], -1}, -20, 20, 1}, {{
       Hold[$CellContext`b$$], -2}, -20, 20, 1}}, Typeset`size$$ = {
    360., {109., 113.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`a$162432$$ = 
    0, $CellContext`b$162433$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`a$$ = -1, $CellContext`b$$ = -2}, 
      "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$162432$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$162433$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[($CellContext`x + $CellContext`b$$)^$CellContext`a$$, \
{$CellContext`x, -10, 10}], 
      "Specifications" :> {{{$CellContext`a$$, -1}, -20, 20, 
         1}, {{$CellContext`b$$, -2}, -20, 20, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{411., {169., 175.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.745088537486635*^9, 3.745088560313201*^9}, {
   3.745088754645489*^9, 3.7450887670481544`*^9}, {3.745088797619362*^9, 
   3.745088798237788*^9}, 3.7450889979604683`*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"0de1d437-4ae2-433b-8a27-0a2483923afd"]
}, Open  ]],

Cell[TextData[{
 "(Eu tinha estudado isto, est\[AAcute] no Jupyter das \
fun\[CCedilla]\[OTilde]es.) Mas o estudo n\[ATilde]o cobria o deslocamento, \
que a cada grau maior, afeta mais o raio da curva (e quanto maior o \
deslocamento, tamb\[EAcute]m).\nPor\[EAcute]m, como a caracter\[IAcute]stica \
da curva \[EAcute] sempre a mesma, fica evidente que achar o dom\[IAcute]nio \
\[EAcute] uma quest\[ATilde]o de conhecer a curva.\nNeste caso, o \
deslocamento apenas muda o n\[UAcute]mero exclu\[IAcute]do do \
dom\[IAcute]nio. E esse n\[UAcute]mero \[EAcute] o n\[UAcute]mero em que a \
base vira ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "3b316929-d84b-454f-a125-ee75dbd4be68"],
 ". Porqu\[EHat]? ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["0", "n"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "d8ffd65a-6898-4434-aecc-18611959f803"],
 " n\[ATilde]o sempre existe?"
}], "Text",
 CellChangeTimes->{{3.7450883957568445`*^9, 3.745088403734681*^9}, {
  3.745088464664316*^9, 3.745088465612171*^9}, {3.745088869107199*^9, 
  3.745088931302127*^9}, {3.745089045675971*^9, 3.7450891070380764`*^9}, {
  3.7450891426239595`*^9, 3.7450891599413843`*^9}, {3.7450892969940696`*^9, 
  3.7450893482593307`*^9}},ExpressionUUID->"ff51b773-c64d-42dc-aa93-\
63c7ed82d99b"],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox["0", "2"]], "Input",
 CellChangeTimes->{{3.745089360876152*^9, 3.7450893748468237`*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"b3e20dc1-030f-4396-96c4-2be4fbd361c4"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.7450893766941977`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"610ee2df-ef54-4165-8103-ac7ce0c1a49f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox["0", 
  RowBox[{"-", "2"}]]], "Input",
 CellChangeTimes->{{3.745089380841105*^9, 3.745089387434479*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"ae78a65a-7919-40b5-88a7-8b7ab130ebc2"],

Cell[BoxData[
 TemplateBox[{
  "Power","infy",
   "\"Infinite expression \\!\\(\\*FractionBox[\\\"1\\\", \
SuperscriptBox[\\\"0\\\", \\\"2\\\"]]\\) encountered.\"",2,119,24,
   25004063025469626122,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.745089389326129*^9, 
  3.7451505964377804`*^9},ExpressionUUID->"0a3f3f35-c63d-47dd-b227-\
b678c52bf3ec"],

Cell[BoxData["ComplexInfinity"], "Output",
 CellChangeTimes->{3.745089389326129*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"09b8f876-660e-4735-9fe6-786eafc73385"]
}, Open  ]],

Cell["\<\
Expoente negativo torna a base o denominador, e denominador zero... Esta \
\[EAcute] a regra do dom\[IAcute]nio das fun\[CCedilla]\[OTilde]es \
exponenciais de exponente negativo...\
\>", "Text",
 CellChangeTimes->{{3.74508941030943*^9, 3.7450895176532555`*^9}, {
  3.7450895630883093`*^9, 3.745089570086285*^9}, {3.745150589694809*^9, 
  3.7451506099685946`*^9}},ExpressionUUID->"d61672a4-98cf-452e-b109-\
61e3aa844a00"],

Cell[TextData[StyleBox["O valor que iguala a base a zero n\[ATilde]o existe, \
porque isto tornaria o denominador zero.",
 FontWeight->"Bold"]], "ItemParagraph",
 CellChangeTimes->{{3.74508941030943*^9, 3.7450895176532555`*^9}, {
  3.7450895630883093`*^9, 3.7450895640893745`*^9}, {3.74508962180612*^9, 
  3.745089649696192*^9}},ExpressionUUID->"5ee4ae4e-c0bf-4d3f-a2b9-\
12a97baa487a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4) Gr\[AAcute]ficos, dom\[IAcute]nio e imagem.", "Subsection",
 CellChangeTimes->{{3.7451507300484047`*^9, 
  3.745150760156907*^9}},ExpressionUUID->"71c66ef9-701c-4fb0-a3c1-\
c98052fa5734"],

Cell[TextData[{
 "a) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"1", "+", 
     RowBox[{"sin", "(", "x", ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "630215c6-cdad-4d6d-9d04-48fe756c9067"],
 "\nSinusoidal simples deslocada. Dom\[IAcute]nio ",
 Cell[BoxData[
  FormBox["\[DoubleStruckCapitalR]", TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "f812248f-3333-40e4-926a-c7f296efed43"],
 ". Imagem... H\[AAcute] algumas formas... plotar mas n\[ATilde]o. Sabendo do \
per\[IAcute]odo, vamos calcular os ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "c2bcddb6-9fab-415a-b7d6-d80b58bce2cb"],
 " m\[EAcute]dios entre dois per\[IAcute]odos e tomar ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "3d0aa7fb-4051-4fa0-bcf9-50fb660cbeaf"],
 " nestes.\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"1", "+", 
       RowBox[{"sin", "(", "x", ")"}]}], "\[Implies]", 
      RowBox[{"sin", "(", "x", ")"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1"}], "\[Implies]", "x"}], "="}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "c301fe97-7c98-4c92-bfef-3a32acfc4dde"]
}], "Text",
 CellChangeTimes->{{3.7451507666156454`*^9, 3.745150766954715*^9}, {
  3.745150831776394*^9, 3.74515103603985*^9}, {3.74515416318661*^9, 
  3.74515416396154*^9}, {3.745155475770562*^9, 
  3.7451555219580517`*^9}},ExpressionUUID->"fe4200f3-fd91-4be1-b2a0-\
a1a280c86c54"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Sin", "[", "30", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7451555739210997`*^9, 3.7451555843601832`*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"132cdab4-dad4-410a-b951-4ab21753ca2b"],

Cell[BoxData[
 RowBox[{"-", "0.9880316240928618`"}]], "Output",
 CellChangeTimes->{{3.7451555783492575`*^9, 3.7451555846324563`*^9}},
 CellLabel->
  "Out[121]=",ExpressionUUID->"753fa48e-fac7-4cc4-83a7-395eb94b9d4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inv", "[", 
  RowBox[{"-", "0.988032"}], "]"}]], "Input",
 CellChangeTimes->{{3.745155588767399*^9, 
  3.7451556087908535`*^9}},ExpressionUUID->"7abd18db-a8e1-482d-b863-\
4909dff248b9"],

Cell[BoxData[
 RowBox[{"-", "1.4159289728933215`"}]], "Output",
 CellChangeTimes->{3.745155597252709*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"4d332012-acc7-4799-a471-86241833c890"]
}, Open  ]],

Cell["Range de seno vai de -1 a 1, com o deslocamento, 0 a 2.", "Text",
 CellChangeTimes->{{3.745156004693218*^9, 
  3.7451560570701246`*^9}},ExpressionUUID->"57032424-1b43-4ffc-ad2d-\
3e3cfb67388b"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "image of 1+Sin[x]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "FunctionRange[1 + Sin[x], x, y]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"range\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"1", "+", 
                    RowBox[{"sin", "(", "x", ")"}]}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "DomainAndRange", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionRange[1 + Sin[x], x, y]"}], 
       XMLElement[
       "moutput", {}, {"Inequality[0, LessEqual, y, LessEqual, 2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"{\"", 
                  RowBox[{"y", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                  RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "2"}], 
                  "\"}\""}, "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a function from reals to reals\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}]], 
                  Global`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NumberLine", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "DomainAndRange", "title" -> 
     "Number line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "NumberLinePlot[Inequality[0, LessEqual, y, LessEqual, 2], y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{
                 RGBColor[0.24720000000000014`, 0.24, 0.6], {
                  Thickness[Large], 
                  LineBox[{{0., 0.066}, {2., 0.066}}]}, 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.066}]}, "0"], 
                  Annotation[#, 0., "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{2., 0.066}]}, "2"], 
                  Annotation[#, 2., "Tooltip"]& ]}}, ImageSize -> 300., 
               Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{-0.10000000000000009`, 2.1}, Automatic}, 
               AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DomainOfFunction", "numsubpods" -> 
     "1", "position" -> "400", "scanner" -> "DomainAndRange", "title" -> 
     "Domain of function"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionDomain[1 + Sin[x], x]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "DomainAndRange", "id" -> "Plots",
      "position" -> "500", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2921$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2920$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2921$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1528389$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2920$\
1528394$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2921$1528395$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2921$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2920$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1528389$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2920$\
1528394$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2921$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2921$\
1528395$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1528369[
                    Plot[
                    SlotSequence[1]]], HoldAll][
                    1 + Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$], 
                    (
                    Piecewise[{{
                    0. + 3.5264290075616986` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.5264290075616986` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$], \
-3.2986722862692828`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2921$$]], 
                    (
                    Piecewise[{{
                    0. + 3.5264290075616986` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.5264290075616986` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2921$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$ + 
                    0.006597344572538566, 
                    CalculateUtilities`GraphicsUtilities`Private`max2921$$]], 
                    3.2986722862692828`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2920$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2921$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1528369]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1528369[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1528369[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtA0EfEACOhiTBpSkfO8tdhoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcpNfw9NCaoZzlshDk3UmuqNZMivQSPrtpTUzNLuXwgxLvu2rNe6lm\
YPz5Fb4PPCk4GPrVMM4Mo3qypyDPWKJrz0ixI/uTCZcJcPaTPt56tv1i5/\
lLD4OxjMAYqoTeaQuZZwo0TXsIdMWatxzEN398UB4/FZzH9HtBRUL1PesdKyAWRgrgmE/\
wrRebqduYmAFBQJFzp8nJc9j2Am0UE9MxneX4xtlkbbUFBjXVnps7JTfrFOTDv44PZOxi8h6XtDs7A\
sPCuGD0nZbVP+dugOfXbeGVPF5NHOb3hiNvYNgR1ct0PmldJ89I1bUu+jlX5zVfNhrk2VOm/\
l86YNosh7HdNgw6O7Q1Xq29ZfinbeFljl0/F/\
ddaz57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMimlPrIo7bXTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyh2U8X6g4myb78UXEruZxqMuR9Xxg6pWqt6G9gfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0pVJfyLA5caU7Ck+\
iXBT6gYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DbLyuLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2923$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2922$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2923$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1528477$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2922$\
1528478$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2923$1528479$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2923$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2922$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1528477$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2922$\
1528478$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2923$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2923$\
1528479$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1528459[
                    Plot[
                    SlotSequence[1]]], HoldAll][
                    1 + Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2923$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2923$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max2923$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2922$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2923$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1528459]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1528459[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1528459[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtDFeviABHYxJA0pSvteLL42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13t0KKO03+\
v19GVrPkhO02t4emjNUM5yWQj67iRXoDWTIr2Ez25aE4PZBU5+APW+q9a8l2pGjD+/\
wvcJTwpODHw1jDPDQE/2FMkzlujaM1LsyP5kwmVCOPsJj7eebb/\
cef7Cw2AsI2IMKKGftoXMM0U0pD0EumLNW07EN398UB4/FZzH8L0AkYC+\
Z71jRaiFkYJwzCf41ovN1G1MzBBBiaLnTpOT57DtBdooJqZjmOX4xtlkbbUFJmqqPTd3Sm7WKciHfx\
0fyNjF5D0uaXd2BIaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+\
bDTIs6dM/b90wLRZDmO7bRgwO7Q1Xq29ZfidtvAyx66fi/uuNZ+\
9owRcNRwqwX2UtODzKJopD7xE26erc+vwGLcqvmN0hlSwwolsnGW/\
uP64X4HXm0KMtZtsQDqingER5GBd1HG7y6bMDDOiSGKB59f1yyYbyzqUgDvb154JyuwA84SsW57Q7K\
cLdScmyb78UXEruZxqMuR9XxiYglor+htYH2XJFXQsAyOJ8YKmXoM5rJIaERUs+0EJEudEMIRkv+\
zHffMPFyuBVO0pVJfyLA5caU7Ck+\
iXBT4AMTVZc8cOHF3BbYvZRPK4Vl3E0nRx2myO6X6T6cYNzYEeSkJoScIHercpdJvCX90Ulvbgbk3o\
1oRuTejWhG5N+H/XBBcx/iv9Br9luKY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "MultiClash", "word" -> "", "template" -> 
        "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "DomainAndRangeWord", "word" -> "image", "desc" -> 
          " referring to a real function property", "input" -> 
          "*MC.image+of-_*DomainAndRangeWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "word" -> "image of", "desc" -> 
          "a plotting function", "input" -> 
          "*MC.image+of-_*PlotsWord-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "FunctionDomainAndRange", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "2.085", "parsetiming" -> "1.458", "parsetimedout" -> "false",
     "recalculate" -> "", "id" -> 
    "MSPa3941130a233f0i7ca66g000063c85dbg3b41ehb3", "host" -> 
    "http://www4b.wolframalpha.com", "server" -> "30", "related" -> 
    "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa3942130a233f0i7ca66g000034ec0389bhig3h235186426821976139686", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2018, 9, 5, 14, 8, 48.2248462`9.435845709492812}, "Line" -> 
    123, "SessionID" -> 25004063025469626122}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "FunctionRange[1 + Sin[x], x, y]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "image of 1+Sin[x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{252., {48., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->
  "In[123]:=",ExpressionUUID->"43cb4de2-a2ef-4707-870a-db5344c768cb"],

Cell[BoxData[
 RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "2"}]], "Output",
 CellChangeTimes->{3.74515612836553*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"79852129-8082-428d-98ae-8bbd023ee2df"]
}, Open  ]],

Cell[TextData[{
 "Certo. Mas pelo per\[IAcute]odo... Na verdade ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "351102fc-5b4d-467c-8e41-1ec79cb13158"],
 " do per\[IAcute]odo \[EAcute] fixo e ocorre a cada ",
 Cell[BoxData[
  FormBox["180", TraditionalForm]],ExpressionUUID->
  "0e51730d-1913-4ed9-9ecc-d381fc131017"],
 ". ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "56f08d79-079b-4dab-9060-7abc5d4f1ce1"],
 " \[EAcute] 0 quando ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "f862e0a9-78b4-49cd-a76c-d16552068693"],
 " \[EAcute] ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "45ac813d-bdcd-4975-9790-227a2ee685b0"],
 " ou ",
 Cell[BoxData[
  FormBox["180", TraditionalForm]],ExpressionUUID->
  "33d8b80d-0e9d-409c-bfc1-1034e83a20f1"],
 " (n\[ATilde]o estava funcionando porque eu n\[ATilde]o estava especificando \
em Rad, em que \[EAcute] ",
 Cell[BoxData[
  FormBox["\[Pi]", TraditionalForm]],ExpressionUUID->
  "832429b0-94b0-4e84-a81b-e5d6465b4c7b"],
 ")."
}], "Text",
 CellChangeTimes->{{3.7451561407932796`*^9, 3.7451561450130033`*^9}, {
   3.745170079505808*^9, 3.7451702566618977`*^9}, {3.74517051924428*^9, 
   3.745170551957903*^9}, {3.7451705843181953`*^9, 3.74517058461526*^9}, {
   3.745170796175967*^9, 3.7451709754027414`*^9}, 
   3.7458485774521*^9},ExpressionUUID->"f15fcc3a-83cf-45b3-814a-70c5f9df92e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Sin", "[", "Pi", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7451702671453266`*^9, 3.745170398233858*^9}, {
  3.745170472070986*^9, 3.7451704872174206`*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"59a82ace-416a-4b51-96ce-a9de63de3aee"],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{{3.7451702737434626`*^9, 3.745170398803658*^9}, {
  3.745170473839242*^9, 3.7451704894877434`*^9}},
 CellLabel->
  "Out[146]=",ExpressionUUID->"4d75e39a-fcb5-4cce-af00-d7f6b07f06c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7451704098971853`*^9, 3.745170452808014*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"e4079e0d-d7f7-4a56-a003-f6f92e521808"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$194204#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {-0.999999987301805, 0.9999999723133323}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7451704141677847`*^9, 3.7451704532496696`*^9}},
 CellLabel->
  "Out[143]=",ExpressionUUID->"22f1a29c-b408-474c-9440-a2213cee0af4"]
}, Open  ]],

Cell[TextData[{
 "Ent\[ATilde]o, em escala em Rad, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"1", "+", 
     RowBox[{"sin", "(", 
      FractionBox["\[Pi]", "2"], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "58f9a09d-2534-47ba-bbd8-ffa3d3f986ac"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"1", "+", 
       RowBox[{"sin", "(", 
        RowBox[{
         FractionBox["\[Pi]", "2"], "-", "\[Pi]"}], ")"}]}], "\[Implies]", 
      "y"}], "=", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}]}]}], TraditionalForm]],ExpressionUUID->
  "46a7de2c-6b50-4a4a-aa38-5d526008c881"],
 "."
}], "Text",
 CellChangeTimes->{{3.745170978882388*^9, 3.7451709915973873`*^9}, 
   3.7451710222883167`*^9, {3.7451710640407186`*^9, 3.745171205366755*^9}, {
   3.7451712638583493`*^9, 3.7451712638593426`*^9}, {3.7451712987610197`*^9, 
   3.7451713157625847`*^9}, {3.745171348557895*^9, 3.745171374199323*^9}, {
   3.745227765297865*^9, 
   3.745227782368183*^9}},ExpressionUUID->"149d6063-8c7c-45ed-aad1-\
7edc3cbd4fac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", 
  FractionBox["\[Pi]", "2"], "]"}]], "Input",
 CellChangeTimes->{{3.745171040110695*^9, 3.7451710568289585`*^9}},
 CellLabel->
  "In[147]:=",ExpressionUUID->"e56b299a-e83c-4cb7-bb1a-f31fbc63317f"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.745171058441885*^9},
 CellLabel->
  "Out[147]=",ExpressionUUID->"e70d19c6-f81f-4935-a93f-074e6ce0b29f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{"-", 
   FractionBox["\[Pi]", "2"]}], "]"}]], "Input",
 CellChangeTimes->{{3.745171072527972*^9, 3.7451710743591185`*^9}, {
  3.7451713274104395`*^9, 3.7451713365619297`*^9}},
 CellLabel->
  "In[150]:=",ExpressionUUID->"e234e3a0-2c5d-4184-bf42-87b8f2e974a4"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.7451710750652494`*^9, 3.7451713370675716`*^9, 
  3.7455747488524485`*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"c1b94f38-51c2-4842-ac99-a6cdfeef9abc"]
}, Open  ]],

Cell[TextData[{
 "b) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    FractionBox["1", 
     RowBox[{"x", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "8f7bf15f-c15c-4f87-8ebc-32add6701647"]
}], "Text",
 CellChangeTimes->{{3.7451714511404705`*^9, 
  3.7451714773164773`*^9}},ExpressionUUID->"461e90f8-c97a-496d-b868-\
eb8d2aad8bf6"],

Cell[TextData[{
 "Dom\[IAcute]nio e imagem. Dom\[IAcute]nio \[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[NotEqual]", 
    RowBox[{"-", "1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "5ab6226e-c0ad-4580-8427-d014d40edf8d"],
 " e imagem... o tipo da fun\[CCedilla]\[ATilde]o \[EAcute] expoente \
negativo. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", 
     RowBox[{"x", "+", "1"}]], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "+", "1"}], ")"}], 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "8ce315ff-3f90-42e8-a3f6-9825f5157121"],
 "."
}], "Text",
 CellChangeTimes->{{3.745848909827091*^9, 3.7458489621882877`*^9}, {
  3.7458490418269587`*^9, 
  3.7458490873741045`*^9}},ExpressionUUID->"3238d520-cbef-4a26-9a3e-\
3957abeaaf50"],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   RowBox[{"x", "+", "1"}], ")"}], 
  RowBox[{"-", "1"}]]], "Input",
 CellChangeTimes->{{3.7458491067188797`*^9, 3.745849113936361*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"6e30e9fd-8956-4901-ad34-902f7c977894"],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{"1", "+", "x"}]]], "Output",
 CellChangeTimes->{3.7458491189378285`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"44a8b4b6-eac5-418f-a0bc-4250195c21bb"]
}, Open  ]],

Cell["\<\
Novamente, 0 n\[ATilde]o pode ser elevado a pot\[EHat]ncia negativa. Mas, \
caracter\[IAcute]stica da fun\[CCedilla]\[ATilde]o exponencial negativa.\
\>", "Text",
 CellChangeTimes->{{3.745862956296672*^9, 
  3.745862993469735*^9}},ExpressionUUID->"53fa8112-1c55-41aa-887c-\
6aef57704127"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     SuperscriptBox["x", "a"], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"-", "10"}], ",", "0", ",", ".25"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7450877630277576`*^9, 3.7450879387911425`*^9}, {
  3.745088016968321*^9, 3.7450880256529617`*^9}, {3.74508820918814*^9, 
  3.745088212763279*^9}, {3.7450882443084116`*^9, 3.745088260689369*^9}, {
  3.7450883091652164`*^9, 3.7450883167787704`*^9}, {3.7450883685256176`*^9, 
  3.7450883685412717`*^9}, {3.7450885113481812`*^9, 3.745088517227403*^9}, {
  3.7458630632809243`*^9, 3.7458631161895485`*^9}, {3.7458631679846807`*^9, 
  3.745863168951769*^9}, {3.7458632164988766`*^9, 3.7458632274066563`*^9}, {
  3.745863978699092*^9, 3.7458639791404576`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"3790f37e-0a29-4b62-bbd1-28a87b1de063"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = -1.25, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`a$$], -1}, -10, 0, 0.25}}, Typeset`size$$ = {
    360., {111., 116.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`a$583633$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`a$$ = -1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$583633$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[$CellContext`x^$CellContext`a$$, {$CellContext`x, -10, 10}], 
      "Specifications" :> {{{$CellContext`a$$, -1}, -10, 0, 0.25}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{411., {158., 164.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.745863181295622*^9, {3.7458632173889065`*^9, 3.745863228139647*^9}, {
   3.7458639800341234`*^9, 3.745863984171279*^9}, 3.745949780648018*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"b168e522-26a9-4918-aaa4-14bb859a8c34"]
}, Open  ]],

Cell[TextData[{
 "Basicamente, a linha da direita se mant\[EAcute]m. Mas a da esquerda pode \
existir, ou n\[ATilde]o, e ser positiva ou negativa. Quando n\[ATilde]o \
existiria? Quando n\[ATilde]o houver dom\[IAcute]nio negativo. Porqu\[EHat] n\
\[ATilde]o haveria dom\[IAcute]nio negativo para ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "a"], TraditionalForm]],ExpressionUUID->
  "2cb22ab7-d9dc-4e80-aab9-f47110ff7c7e"],
 "? Quais valores de ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "80af7bd1-8d66-4884-8655-567fd1250485"],
 " criam fun\[CCedilla]\[OTilde]es sem ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "f5aea948-5574-4620-972e-6ff4b3be0005"],
 " negativo? Por exemplo, ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["x", 
     RowBox[{"-", "1"}]],
    FontColor->RGBColor[1, 0, 0]], TraditionalForm]],
  FontColor->RGBColor[0, 0, 1],ExpressionUUID->
  "5eb7c2f0-39e6-4baf-821d-cf2650ed25a1"],
 " tem dom\[IAcute]nio... determinado pelo n\[ATilde]o-zero e... quais s\
\[ATilde]o os casos de ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "81495835-44b4-4395-808f-8c61d02f418b"],
 "? Negativo, positivo, fracional, inteiro e zero. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "(", 
     RowBox[{"-", "2"}], ")"}], "=", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["2", 
       RowBox[{"-", "1"}]]}], "=", 
     FractionBox["1", 
      RowBox[{"-", "2"}]]}]}], TraditionalForm]],ExpressionUUID->
  "d0410628-d557-4b53-9d3a-7482369ec156"],
 "; ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "(", 
     RowBox[{"-", "1.5"}], ")"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1.5"}], ")"}], 
      RowBox[{"-", "1"}]], "=", 
     FractionBox["1", 
      RowBox[{"-", "1.5"}]]}]}], TraditionalForm]],ExpressionUUID->
  "5b5ce5ae-2474-4afc-a994-7aaef6ce1fbc"],
 "; ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "0"}], "=", 
    RowBox[{
     SuperscriptBox["0", 
      RowBox[{"-", "1"}]], "=", " ", 
     RowBox[{"n\[ATilde]o", " ", "existe"}]}]}], TraditionalForm]],
  ExpressionUUID->"87a6d03e-f26c-40a7-9ea1-4041a085e560"],
 "; ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "2"}], "=", 
    RowBox[{
     SuperscriptBox["2", 
      RowBox[{"-", "1"}]], "=", 
     FractionBox["1", "2"]}]}], TraditionalForm]],ExpressionUUID->
  "f491001c-0b0a-4ccc-99e5-3fc955c45db5"],
 "; ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "1.5"}], "=", 
    RowBox[{
     SuperscriptBox["1.5", 
      RowBox[{"-", "1"}]], "=", 
     FractionBox["1", "1.5"]}]}], TraditionalForm]],ExpressionUUID->
  "4c97c467-c11f-4f5b-8a68-955bade721b7"],
 ". Somente o denominador zero. ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["x", 
     RowBox[{"-", "2"}]],
    FontColor->RGBColor[1, 0, 0]], TraditionalForm]],ExpressionUUID->
  "e8e3191e-eedb-4e92-8230-abf84efdb60e"],
 "? ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "2"], "(", 
     RowBox[{"-", "2"}], ")"}], "=", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["2", 
       RowBox[{"-", "2"}]]}], "=", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"-", 
        SuperscriptBox["2", "2"]}]], "=", 
      FractionBox["1", "4"]}]}]}], TraditionalForm]],ExpressionUUID->
  "832d0263-3167-4ad4-84e4-7cd9d3651d33"],
 ". Aha. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox[
       SuperscriptBox["x", 
        RowBox[{"-", "3"}]],
       FontColor->RGBColor[1, 0, 0]], "?", " ", 
      SubscriptBox["f", "3"]}], 
     RowBox[{"(", 
      RowBox[{"-", "2"}], ")"}]}], "=", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["2", 
       RowBox[{"-", "3"}]]}], "=", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"-", 
        SuperscriptBox["2", "3"]}]], "=", 
      FractionBox["1", 
       RowBox[{"-", "8"}]]}]}]}], TraditionalForm]],ExpressionUUID->
  "9134fcdb-59a3-47fa-b41c-644c67a655f4"],
 ". ",
 StyleBox["Fun\[CCedilla]\[OTilde]es exponenciais de exponente inteiro \
negativo ",
  FontWeight->"Bold"],
 StyleBox["\[IAcute]mpar",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" t\[EHat]m dom\[IAcute]nio negativo; e ",
  FontWeight->"Bold"],
 StyleBox["par",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" s\[OAcute] positivo.",
  FontWeight->"Bold"],
 StyleBox[" ", "ItemParagraph"],
 "Isso \[EAcute] elementar porque ",
 StyleBox["n\[ATilde]o h\[AAcute] raiz par de n\[UAcute]mero negativo",
  FontWeight->"Bold"],
 ".\[LineSeparator]A fun\[CCedilla]\[ATilde]o no exerc\[IAcute]cio \[EAcute] \
de expoente ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "d4574248-4fb3-4083-bcfd-93a6e39f3706"],
 ", que \[EAcute] \[IAcute]mpar, logo h\[AAcute] dom\[IAcute]nio negativo. \
Logo o dom\[IAcute]nio \[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[NotEqual]", 
    RowBox[{"-", "1"}]}], TraditionalForm]],ExpressionUUID->
  "37c88ad3-27f9-4219-9f41-61ee007e6ee9"],
 "."
}], "Text",
 CellChangeTimes->{{3.7458631845469975`*^9, 3.745863212046768*^9}, {
  3.7458639296106663`*^9, 3.7458639489370155`*^9}, {3.7458640125753574`*^9, 
  3.745864017562799*^9}, {3.7458640745303946`*^9, 3.7458640909077253`*^9}, {
  3.7458643464061775`*^9, 3.745864414387059*^9}, {3.7458644675928044`*^9, 
  3.745864528863976*^9}, {3.7458645772034297`*^9, 3.74586489795245*^9}, {
  3.745864965858989*^9, 3.745865111485445*^9}, {3.745865496535547*^9, 
  3.7458655810460796`*^9}, {3.745865626654545*^9, 3.7458657120465727`*^9}, {
  3.745865757186797*^9, 3.7458658615319543`*^9}, {3.7458659326402173`*^9, 
  3.745866002967578*^9}, {3.7458661005302324`*^9, 3.745866103061245*^9}, {
  3.7458662779368095`*^9, 3.7458662807745404`*^9}, {3.745919599813772*^9, 
  3.7459196002836895`*^9}},ExpressionUUID->"e74c3d84-2aa0-41ae-a149-\
0f3e978a3b89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionDomain", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{"x", " ", "+", " ", "1"}], ")"}]}], ",", " ", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.7458660074208393`*^9},
 CellLabel->"In[34]:=",ExpressionUUID->"f4799a76-7218-4aba-9459-36d5647c8a09"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "<", 
   RowBox[{"-", "1"}]}], "||", 
  RowBox[{"x", ">", 
   RowBox[{"-", "1"}]}]}]], "Output",
 CellChangeTimes->{3.7458664491408963`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"8f4ff3b6-5a3f-428e-ab85-3456675eec2c"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "+", "1"}], ")"}], 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "20a946fd-a502-4d44-869d-2930b78c4cb1"],
 ". A imagem \[EAcute]... \[AGrave] esquerda do zero, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"-", "2"}], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"-", "1"}]], "=", 
     RowBox[{"-", "1"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "0d07415b-7d76-4099-8712-79020e872021"],
 ". \[CapitalAGrave] direita do zero, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "0", ")"}], "=", 
    RowBox[{
     FractionBox["1", "1"], "=", "1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "a4a234d1-b0a6-4284-abf5-1ad2aad6fcbe"],
 "."
}], "Text",
 CellChangeTimes->{{3.7458663111741314`*^9, 3.745866323475772*^9}, {
  3.7458663917482643`*^9, 3.7458664188999557`*^9}, {3.7458664723273935`*^9, 
  3.7458665835941477`*^9}, {3.745866913893528*^9, 
  3.745866925000562*^9}},ExpressionUUID->"034d9237-f01f-4510-9b2c-\
a9d18a213910"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "domain of x^-4", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "FunctionDomain[x^(-4), x]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"domain\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    FractionBox["1", 
                    SuperscriptBox["x", "4"]], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "DomainAndRange", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionDomain[x^(-4), x]"}], 
       XMLElement["moutput", {}, {"x < 0 || x > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"{\"", 
                  RowBox[{"x", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                  RowBox[{"x", "\[NotEqual]", "0"}], "\"}\""}, 
                 "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a function from reals to reals\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}]], 
                  Global`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NumberLine", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "DomainAndRange", "title" -> 
     "Number line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[x < 0 || x > 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{0., 0.132}, {-2., 0.132}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.132}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{0., 0.132}]}, "0"], 
                   Annotation[#, 0., "Tooltip"]& ]}, {
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{0., 0.132}, {2., 0.132}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.132}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{0., 0.132}]}, "0"], 
                   Annotation[#, 0., "Tooltip"]& ]}}}, ImageSize -> 300., 
               Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{-2.2, 2.2}, Automatic}, AxesOrigin -> {0, 0}], 
              "\"\""}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "RangeOfFunction", "numsubpods" -> "1",
      "position" -> "400", "scanner" -> "DomainAndRange", "title" -> 
     "Range of function"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionRange[x^(-4), x, y]"}], 
       XMLElement["moutput", {}, {"y > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"y", "\[Element]", 
                   TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                 RowBox[{"y", ">", "0"}], "\"}\""}, "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all positive real numbers\"", 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "DomainAndRange", "id" -> "Plots",
      "position" -> "500", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max15028$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min15027$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15028$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5713808$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min15027$\
5713809$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max15028$\
5713810$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max15028$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min15027$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5713808$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15027$\
5713809$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15028$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max15028$\
5713810$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$5713789[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][$CellContext`x^(-4), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$], 
                    (
                    Piecewise[{{
                    0. + 1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$], \
-1.02], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max15028$$]], 
                    (Piecewise[{{
                    0. + 1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max15028$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$ + 
                    0.00204, 
                    CalculateUtilities`GraphicsUtilities`Private`max15028$$]],
                     1.02]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min15027$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max15028$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5713789]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5713789[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5713789[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNAYafEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/uTCZcJ4ewnPH6+s7W98/\
KFh8FYRsQYUEJvt4XMp4poSHsIdMWat5yIb/74oDx+KjiP4XsBIgF9z3rHilALIwXhmE/\
wrRebqduYmCGCEkXPnSYnz2HbC7RRTGRjmOX4xtlkbbUFJirTnps7JTfrFOTDv44PZOxi8h6XtDs7A\
sPCuGD0nZbVP+dugOfXbeGVPF5NHOb3hiNvxLAj0Mt0PmldJ89I1bUu+jlX5zVfNhrk2VOm/\
l86YNosh/G0bRgwO7Q1Xq29ZfhnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DRS2uN4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max15030$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min15029$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15030$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5713891$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min15029$\
5713892$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max15030$\
5713893$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max15030$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min15029$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5713891$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15029$\
5713892$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15030$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max15030$\
5713893$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$5713873[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][$CellContext`x^(-4), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$], 
                    (
                    Piecewise[{{
                    0. + 6.542555202016148 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.542555202016148 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$], \
-6.12], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max15030$$]], 
                    (
                    Piecewise[{{
                    0. + 6.542555202016148 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.542555202016148 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max15030$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$ + 
                    0.012240000000000001`, 
                    CalculateUtilities`GraphicsUtilities`Private`max15030$$]],
                     6.12]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min15029$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max15030$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5713873]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5713873[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5713873[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkcpA7AsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM9evR5u7+\
wMHQzGMgatieRquy1knklQJOkh0A1j3jHg39zxcXn8VDAWku8F4RFRD413IiE2MIIDw3y8b73aTN3D\
xDTwGGR86TRZeY7aXqC0pDydkFmOb1xM1rAtMMhUOW7ul9ysU5AL/xY+\
EKGNyXls0vZsCfQL44rRd15W/5y7AZ7ftoWX4nQ1cZjfLkPeQNMTopbpfN66To6Rqmtt9HOuLmu+\
bDTIi6dM/b90RJVeDuNF2zDI7NjUeLX2luFftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH\
26KjcOh3G34jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb8AtuKY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "domain", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "DomainAndRangeWord", "desc" -> 
          " referring to a real function property", "input" -> 
          "*C.domain-_*DomainAndRangeWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "desc" -> "a plotting function", "input" -> 
          "*C.domain-_*PlotsWord-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "FunctionDomainAndRange", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "1.4020000000000001", "parsetiming" -> "0.509", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSPa117051c44c5fcd762ggd200000i2dc142i62745h8", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "52", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa117061c44c5fcd762ggd2000039a0ci3i56i01f686140422195261669885", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2018, 9, 13, 19, 30, 56.4694176`9.504388145061672}, "Line" -> 
    35, "SessionID" -> 25012497554403183385}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "FunctionDomain[x^(-4), x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "domain of x^-4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{215., {48., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[35]:=",ExpressionUUID->"8408680b-a43d-416f-a844-24f6812553d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "<", "0"}], "||", 
  RowBox[{"x", ">", "0"}]}]], "Output",
 CellChangeTimes->{3.7458666565007067`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"3855bfd7-4c60-4f2f-8132-c46f482a57c3"]
}, Open  ]],

Cell[TextData[{
 "Na verdade, devemos saber que o dom\[IAcute]nio desta fun\[CCedilla]\
\[ATilde]o tem uma ass\[IAcute]ntota no denominador zero, embora n\[ATilde]o \
pare\[CCedilla]a t\[ATilde]o estreito no gr\[AAcute]fico, e tirar a imagem \
disto. Mas, supondo um dom\[IAcute]nio negativo e positivo, qual a imagem? \
Mais valores. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"-", "3"}], ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"-", "2"}]], "=", 
     RowBox[{"-", 
      FractionBox["1", "2"]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "e127d5ca-d554-4101-9c38-883e97d8ba56"],
 "; ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "1", ")"}], "=", 
    FractionBox["1", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "0a15bfd0-4d0c-4d38-b22c-810d489ea90c"],
 ". ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"f", "(", 
      RowBox[{"-", "4"}], ")"}], "=", 
     FractionBox["1", 
      RowBox[{"-", "3"}]]}], ";", " ", 
    RowBox[{
     RowBox[{"f", "(", "2", ")"}], "=", 
     FractionBox["1", "3"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "9f132725-112c-46b2-8c87-0d9e7038d453"],
 "."
}], "Text",
 CellChangeTimes->{{3.745866676420233*^9, 3.7458667359367743`*^9}, {
   3.7458667713129015`*^9, 3.74586679509406*^9}, {3.745866981820109*^9, 
   3.7458670682961826`*^9}, 3.7458671333292665`*^9, {3.7458675610300417`*^9, 
   3.745867605842721*^9}},ExpressionUUID->"5cf919c8-cd88-42e6-9c36-\
4291d5da92cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"TimeSeries", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "3"]}], ",", 
      RowBox[{"-", 
       FractionBox["1", "2"]}], ",", 
      RowBox[{"-", "1"}], ",", "0", ",", "1", ",", 
      FractionBox["1", "2"], ",", 
      FractionBox["1", "3"]}], "}"}], "]"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"PointSize", "[", ".05", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7458672196550665`*^9, 3.745867265936576*^9}, {
  3.745867304349626*^9, 3.745867468468364*^9}, {3.745867617250292*^9, 
  3.745867644936448*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"f6b65b7b-06d8-44db-b9cc-edd76c28d25b"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.05], 
     AbsoluteThickness[1.6], 
     PointBox[{{0., -0.3333333333333333}, {1., -0.5}, {2., -1.}, {3., 0.}, {
      4., 1.}, {5., 0.5}, {6., 0.3333333333333333}}]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 6.}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7458673963265986`*^9, 3.7458674689803605`*^9}, {
  3.7458676311269083`*^9, 3.7458676505921144`*^9}},
 CellLabel->"Out[56]=",ExpressionUUID->"8c9e6bf1-9af5-41fd-9b2a-d0486d3a77a1"]
}, Open  ]],

Cell[TextData[{
 "A imagem parece ser ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"y", "\[NotEqual]", " ", 
     FractionBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}]}], ")"}], "2"]}], "=", "1"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "db849bf1-966f-4618-a566-22a0e5933b8a"],
 "."
}], "Text",
 CellChangeTimes->{{3.7458676605766125`*^9, 3.7458676940787477`*^9}, {
  3.745867791733921*^9, 3.745867798093671*^9}, {3.745867864030493*^9, 
  3.7458678918940077`*^9}},ExpressionUUID->"5c6ac70c-b78d-4c6b-bfdc-\
1936f92e69c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"x", "+", "1"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7458678985009203`*^9, 3.7458679374696236`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"ea35696e-cadf-4f32-a6d0-eb23a1a7f3ca"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
        "]], LineBox[CompressedData["
1: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
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$603080#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.140498047664812, 1.1370000558133775`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7458679378754377`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"25970243-275a-4107-bed4-98b5cdd5a0e4"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Errei, a imagem \[EAcute] ",
  FontVariations->{"StrikeThrough"->True}],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"y", "<", 
     RowBox[{"-", "1"}]}], "|", 
    RowBox[{"y", ">", "1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontVariations->{"StrikeThrough"->True},ExpressionUUID->
  "4a48410e-7cde-4a30-a9c3-5e5ecae16f59"],
 StyleBox[".",
  FontVariations->{"StrikeThrough"->True}],
 " Errei a leitura do gr\[AAcute]fico. A imagem \[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "\[NotEqual]", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "71798458-6caf-4580-83e6-ab7a56c24e28"],
 "."
}], "Text",
 CellChangeTimes->{{3.7458679934553328`*^9, 3.745868012859463*^9}, {
  3.745868097811299*^9, 
  3.7458681333430653`*^9}},ExpressionUUID->"8f69b890-d471-4935-86e7-\
b6f669b80cfe"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "image of 1/(x + 1)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "FunctionRange[1/(x + 1), x, y]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"range\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    FractionBox["1", 
                    RowBox[{"x", "+", "1"}]], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "DomainAndRange", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionRange[1/(x + 1), x, y]"}], 
       XMLElement["moutput", {}, {"y < 0 || y > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"{\"", 
                  RowBox[{"y", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                  RowBox[{"y", "\[NotEqual]", "0"}], "\"}\""}, 
                 "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a function from reals to reals\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}]], 
                  Global`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NumberLine", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "DomainAndRange", "title" -> 
     "Number line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[y < 0 || y > 0, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{0., 0.132}, {-2., 0.132}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.132}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{0., 0.132}]}, "0"], 
                   Annotation[#, 0., "Tooltip"]& ]}, {
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{0., 0.132}, {2., 0.132}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.132}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{0., 0.132}]}, "0"], 
                   Annotation[#, 0., "Tooltip"]& ]}}}, ImageSize -> 300., 
               Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{-2.2, 2.2}, Automatic}, AxesOrigin -> {0, 0}], 
              "\"\""}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DomainOfFunction", "numsubpods" -> 
     "1", "position" -> "400", "scanner" -> "DomainAndRange", "title" -> 
     "Domain of function"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionDomain[1/(x + 1), x]"}], 
       XMLElement["moutput", {}, {"x < -1 || x > -1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"x", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}], "\" : \"", 
              RowBox[{"x", "\[NotEqual]", 
                RowBox[{"-", "1"}]}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Injectivity", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "DomainAndRange", "title" -> 
     "Injectivity"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"injective \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"one\[Hyphen]to\[Hyphen]one\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "DomainAndRange", "id" -> "Plots",
      "position" -> "600", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3931$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3930$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3931$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1189429$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3930$\
1189434$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3931$1189435$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3931$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3930$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1189429$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3930$\
1189434$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3931$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3931$\
1189435$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1189409[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(1 + $CellContext`x)^(-1), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$], 
                    (
                    Piecewise[{{-1. + 
                    1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$], \
-2.02], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3931$$]], 
                    (
                    Piecewise[{{-1. + 
                    1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3931$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$ + 
                    0.00204, 
                    CalculateUtilities`GraphicsUtilities`Private`max3931$$]], 
                    0.02]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3930$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3931$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1189409]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1189409[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1189409[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbim/f8N/\
gMQzUmEP7AEJ6GBMGlCS8l4vvqQWrh1sZxv88+Czm6RZu0oxHaApfTjVl+bz3XffXe/JkYzSfq/\
X01et+SA5TW/\
g6bE1IznPZSHou9NcgdZMivQKPrttTQxmDzj5AdT7rlvzXqo5Mf78Ct8nPCk4MfDVMM4MAz3dVySfs\
UTXnrFix/YnUy4TwtlPeDocvtzdGe56GIxlTIwBJfSLtpD5TBENaQ+\
BrlnzlhPxzR8flcdPBecxfC9AJKAfWO9EEWphpCAc8wm+9XIzdRcTM0RQouiF0+\
TkOWp7gTaKiWwC8xzfOJ+sYVtgojLtublXcrNJQT78m/hAxi4m73FJu7MjMCyMS0bfWVn9c+\
4GeH7dFl7Jk/XEYX5vOPJGDDsGvUrns9Z18oxUXeuiX3B1UfNlq0GeP2Xq/6VDps1qGM/\
bhgHzI1vj9dpbhd9pCy9z7PqFuO9b89k7SsB1w6ES3EdJC76IopnywEu0fbo6tw6PcafiO0ZnSAUrn\
MjGWfaL64+HFXi9KcRYu+kWpCPqGRBBDtZFHbd7LGNmNCOKJBZ4cV2/\
bLKJrEMJuLN97ZmgzA4wT8im5QnNQbpUd2KS2Zc/\
Km4llzNNhrwfCAMZqI2iv4X1UZZcQScyMJIYL2jqNZjDKqkxUcGyH5QgcU4EQ0j2y37cN/\
9wuRJI1b5CdSnP4sCV5jQ8iX5Z4EMQmZk1d+\
zA0RXctphNJE9q1UUsTZenzfaY7jeZbtzQHOihJISWJHygd5tCtyn81U1hZQ/\
u1oRuTejWhG5N6NaE/3dNcBHjv9Jvv3W4pg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3933$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3932$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3933$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1189517$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3932$\
1189518$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3933$1189519$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3933$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3932$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1189517$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3932$\
1189518$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3933$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3933$\
1189519$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1189499[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(1 + $CellContext`x)^(-1), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$], 
                    (
                    Piecewise[{{-1. + 
                    6.542555202016148 Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    6.542555202016148 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$], \
-7.12], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3933$$]], 
                    (
                    Piecewise[{{-1. + 
                    6.542555202016148 Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    6.542555202016148 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3933$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$ + 
                    0.012240000000000001`, 
                    CalculateUtilities`GraphicsUtilities`Private`max3933$$]], 
                    5.12]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3932$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3933$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1189499]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1189499[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1189499[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinvr4N/\
gMRnRHkR8GESrIMxaUBJyvd6ySWxcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577noPD0WQ9Hu9nr\
pszAfB4uQanh4YMxKzXBQ8fneSS1CKCp5cwmc3jQlB7wIjPyB2vqvGvBdyRrQ7b+P7hEUFIxq+\
asqopqCme5LkGY1U7RlLemR+MmUiIoz+hEfD4avXL568dDAYy5hoDZKrZ20h80wSBUkPga4Ys8MI/+\
aO98vjp4KxEL4XwCNQ94x3IklsYAQnDPPxvvViM3UbE9OEx0TG506Tleeo7QVKS8rTCcxyfONssoZt\
gYlMlePmTsnNOgW58K/jAxHamJzHJm3PlkC/MC4Yfadl9c+5G+\
D5TVt4KY5XE4f5vWXIG9H0CNQynY9b18kxUnWtjX7O1XnNl40GefaUqf+\
XDqjSy2E8bRsGzA5NjVdrbxn+eVt4kWPXz8V915jPzlECrhoOleA+irhg8yiaKQ+\
cRNunq3LjcBi3Kr5DdPpUsMIJTJxlv9j+2KrA600hxNpNNyAdXs+AAHIwrthyu0tTqkcZkSQywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0OwnC3UnOsq+/\
FFxK7mcajLkfZ9rSEGuFf0NrI805PJ4IjwjCfGCpl69OaySGhPpLftBCRLmhFOEpL/\
Mx35zDxcrgVTtSVSXdCwObGlO/JPolwU+AJ7qrLlje44u77bFbAJxXKsuoEmyOG02x3S/\
yXTjhuZA9yXBtyT+A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgPL6LiW"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "MultiClash", "word" -> "", "template" -> 
        "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}.", "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "DomainAndRangeWord", "word" -> "image", "desc" -> 
          " referring to a real function property", "input" -> 
          "*MC.image+of-_*DomainAndRangeWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "word" -> "image of", "desc" -> 
          "a plotting function", "input" -> 
          "*MC.image+of-_*PlotsWord-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "FunctionDomainAndRange", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "2.045", "parsetiming" -> "1.405", "parsetimedout" -> "false",
     "recalculate" -> "", "id" -> 
    "MSPa12081aba2e9e8cg7hb5b00006421cd1cf8e09091", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "36", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa12091aba2e9e8cg7hb5b00004a1d2bi096628f9e2574324192558130273", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2018, 9, 13, 19, 53, 50.2678228`9.453864928255786}, "Line" -> 
    58, "SessionID" -> 25012497554403183385}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "FunctionRange[1/(x + 1), x, y]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "image of 1/(x + 1)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{249., {48., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[58]:=",ExpressionUUID->"38f4484f-91af-4f81-a11c-ccda78de1240"],

Cell[BoxData[
 RowBox[{
  RowBox[{"y", "<", "0"}], "||", 
  RowBox[{"y", ">", "0"}]}]], "Output",
 CellChangeTimes->{3.7458680307052193`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"683533fa-7645-4f27-a688-6c42d7b207bf"]
}, Open  ]],

Cell[TextData[{
 "A conta de ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     RowBox[{"f", "(", "0", ")"}], "-", 
     RowBox[{"f", "(", "2", ")"}]}], "2"], TraditionalForm]],ExpressionUUID->
  "05f762c8-2c04-46a9-ac18-6c686d5dec64"],
 " falhou. O denominador zero forma um ponto a menos no dom\[IAcute]nio e um \
ponto a menos na imagem. Em ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "0", ")"}], TraditionalForm]],ExpressionUUID->
  "98edddb9-595e-4a14-9ab2-0a4c568bbd35"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "2", ")"}], TraditionalForm]],ExpressionUUID->
  "c947b47c-d0ab-4e46-bcd7-5b7ce168a9a5"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"-", "1"}]}], TraditionalForm]],ExpressionUUID->
  "8ee39c50-6b24-4ac0-974a-9be78684af07"],
 " e ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "692ff0f6-6194-438b-9868-6f662f7d52e8"],
 ". S\[ATilde]o duas ass\[IAcute]ntotas."
}], "Text",
 CellChangeTimes->{{3.7458682213278875`*^9, 
  3.7458683506510983`*^9}},ExpressionUUID->"3dbd361a-b53f-4e83-ae5a-\
543af0850d12"],

Cell[TextData[{
 "S\[OAcute] por curiosidade, a ass\[IAcute]ntota vertical de ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"-", "9"}]], TraditionalForm]],ExpressionUUID->
  "535ff5e1-3961-4d7e-a6a9-4c1d17a80ede"],
 " ainda \[EAcute] s\[OAcute] em 0? Sim.\nS\[ATilde]o duas ass\[IAcute]ntotas \
correspondentes. N\[ATilde]o existe como calcular a imagem... somente a \
partir do gr\[AAcute]fico (ou plotar alguns pontos) (ou mesmo um ponto \
crucial)."
}], "Text",
 CellChangeTimes->{{3.745868420617731*^9, 3.7458684473292522`*^9}, {
  3.7458684807662244`*^9, 3.745868489469969*^9}, {3.7459195557497873`*^9, 
  3.7459195815597353`*^9}, {3.745919626596658*^9, 3.7459196579814453`*^9}, {
  3.7459259562880135`*^9, 3.7459259564754696`*^9}, {3.745941837254175*^9, 
  3.745941844880952*^9}},ExpressionUUID->"c6fd78b8-ef0b-4f7f-b9b5-\
336ede4211ea"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "domain of x^-9", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "FunctionDomain[x^(-9), x]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"domain\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    FractionBox["1", 
                    SuperscriptBox["x", "9"]], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "DomainAndRange", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionDomain[x^(-9), x]"}], 
       XMLElement["moutput", {}, {"x < 0 || x > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"{\"", 
                  RowBox[{"x", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                  RowBox[{"x", "\[NotEqual]", "0"}], "\"}\""}, 
                 "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a function from reals to reals\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}]], 
                  Global`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NumberLine", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "DomainAndRange", "title" -> 
     "Number line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[x < 0 || x > 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{0., 0.132}, {-2., 0.132}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.132}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{0., 0.132}]}, "0"], 
                   Annotation[#, 0., "Tooltip"]& ]}, {
                  RGBColor[0.24720000000000014`, 0.24, 0.6], {
                   Thickness[Large], 
                   Arrowheads[{0.03}], 
                   ArrowBox[{{0., 0.132}, {2., 0.132}}]}, 
                  TagBox[
                   TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.132}], 
                    PointSize[0.01], 
                    GrayLevel[1.], 
                    PointBox[{0., 0.132}]}, "0"], 
                   Annotation[#, 0., "Tooltip"]& ]}}}, ImageSize -> 300., 
               Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{-2.2, 2.2}, Automatic}, AxesOrigin -> {0, 0}], 
              "\"\""}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "RangeOfFunction", "numsubpods" -> "1",
      "position" -> "400", "scanner" -> "DomainAndRange", "title" -> 
     "Range of function"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionRange[x^(-9), x, y]"}], 
       XMLElement["moutput", {}, {"y < 0 || y > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}], "\" : \"", 
              RowBox[{"y", "\[NotEqual]", "0"}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Injectivity", "numsubpods" -> "1", 
     "position" -> "500", "scanner" -> "DomainAndRange", "title" -> 
     "Injectivity"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"injective \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"one\[Hyphen]to\[Hyphen]one\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "DomainAndRange", "id" -> "Plots",
      "position" -> "600", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4886$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4885$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4886$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1546253$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4885$\
1546258$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4886$1546259$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4886$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4885$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1546253$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4885$\
1546258$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4886$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4886$\
1546259$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1546233[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][$CellContext`x^(-9), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$], 
                    (
                    Piecewise[{{
                    0. + 1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$], \
-1.02], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4886$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0904258670026914` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0904258670026914` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4886$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$ + 
                    0.00204, 
                    CalculateUtilities`GraphicsUtilities`Private`max4886$$]], 
                    1.02]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4885$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4886$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1546233]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1546233[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1546233[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkbYVviHBOjYmDShJ+\
d5b4iQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/5iQiSfq/XUzeN+\
SBYnGzh6ZkxIzHLRcHj9+e5JEpRwZMb+OyeMSHR+4TBDxI7321jDoScgXbnN/g+\
sKhgoMlXTRnVlKjpoYQ8o5GqPWNJT81PpkxEwOhP8mL71fD1znDXwWAsY9CaSK5220LmmQRFkh4C3T\
JmjwH/5o5Py+OngrGQfC8Ij4h6bLwTCbGBERwY5uN96/\
Vm6gEmpoHHIOMrp8nKc9T2AqUl5emEzHJ843KyttsCg0yV4+Zhyc06Bbnw7+ADEdqYnMcmbc+\
WQL8wrhl9F2X1z7kb4PltW3gpzlYTh/m9Y8gbaHpK1DKdL1vXyTFSda2Nfs7VVc2XjQZ5+ZSp/\
5eOqdLLYey0DYPMTkyNV2tvGX7YFl7k2PVzcT8y5rNzlICrhkMluI8iLtg8imbKAyfR9umq3Dgcxv2\
K7xCdPhWscAITZ9kvtj+eVOD1phBi7aYbkA6vZ0BAcmJcseV2n6ZUjzKQEBng+\
XX9sskmog7F4872tac8pmaAOULWLU9ojpKFuoOOsi9/VNxKLheaDHk/4pqkRK4V/\
V2sjzTk8ngiPCMJ8YKmXr05rJIag/SW/aAECXPgFCHpL/Ox39zDxUogVYcS1SUdiwNbmnP/\
JPplgY8JT3XW3LE9R5d322I2gTirVRfQJFmcNptjut9kunFDc6D7kuBbEv+\
B3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUaM/0q/AfDxuGY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4888$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4887$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4888$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1546341$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4887$\
1546342$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4888$1546343$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4888$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4887$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1546341$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4887$\
1546342$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4888$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4888$\
1546343$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1546323[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][$CellContext`x^(-9), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$], 
                    (
                    Piecewise[{{
                    0. + 6.542555202016148 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.542555202016148 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$], \
-6.12], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4888$$]], 
                    (
                    Piecewise[{{
                    0. + 6.542555202016148 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.542555202016148 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4888$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$ + 
                    0.012240000000000001`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4888$$]], 
                    6.12]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     ImageSize -> {300.}, PlotRange -> Automatic, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4887$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4888$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1546323]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1546323[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1546323[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/\
wBEs9IpQtvSECXXVZaoCTlvbOJk1i4drCdvfDz4LGbpNl2K8V0Aa3Sh1E9aY5nzpyZzrMjEST9Xq+\
nrhvzUbA4uYWnp8aMxTwXBY8/nOaSKEUFT67hs7vGhETvEgZnJHa+m8bsCTkH7c5v8H1gUcFAk2+\
aMqopUbN9CXlGI1V7JpIem5/MmIiA0Z/k+\
fDVzuvRaOhgMJYJaE0kV6O2kHkmQZGkh0A3jHnPgH93xyfl8XPBWEh+\
FIRHRD0y3qmE2MAIDgzz8b71ajN1HxPTwGOQ8aXTZOU5bnuB0pLydErmOb5xMVnDtsAgU+\
W4eVBys0lBLvzb+\
ECENibnsUnbsyXQL4wrRt95Wf1z7gZ4ftsWXoqT9cRhfu8Y8gaaHhO1SueL1nVyjFRda6NfcHVZ82W\
rQV48Zer/pUOq9GoYL9uGQeZHpsbrtbcKv9MWXuTY9QtxPzTmi3OUgOuGQyW4TyIu2CKKZsoDJ9H26\
arcOBzGvYrvEJ0+FaxwAhNn2S+\
2Px5X4PWmEGLtZluQDq9nQEByYlyx5XaXplSPM5AQGeDFdf2yyaaiDsXjzva1pzymZoA5QjYtT2gOk\
qW6g46yr39U3Eou55oMeT/gmqREbhT9HayPNOTyeCo8IwnxgqZevTmskpqA9Jb9oAQJc+\
AUIekv87Hf3MPlSiBV+xLVJR2LA1uaU/8k+\
mWBDwlPddbcsT1Hl3fbYjaBOKlVF9AkWZ4222O632S6cUNzoPuS4FsS/\
4HebQrdpvBXN4WVPbhbE7o1oVsTujWhWxP+3zXBRoz/Sr8B/WS4Vg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "domain", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "DomainAndRangeWord", "desc" -> 
          " referring to a real function property", "input" -> 
          "*C.domain-_*DomainAndRangeWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "desc" -> "a plotting function", "input" -> 
          "*C.domain-_*PlotsWord-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "FunctionDomainAndRange", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "1.483", "parsetiming" -> "0.5660000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSPa3852233439a1fhd8aieb000015h0ggi36ieafh75", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "54", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa3853233439a1fhd8aieb000046fc74d69f4d4d2c5802790122383609046", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2018, 9, 13, 20, 1, 21.1551708`9.07799146791634}, "Line" -> 59,
     "SessionID" -> 25012497554403183385}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "FunctionDomain[x^(-9), x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "domain of x^-9"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{215., {48., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[59]:=",ExpressionUUID->"e40d666b-b5c1-4ea7-b5e5-89657692d8b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "<", "0"}], "||", 
  RowBox[{"x", ">", "0"}]}]], "Output",
 CellChangeTimes->{3.7458684812019997`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"8372e60a-aca0-4f2a-a954-eb47933ea672"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["5) Dom\[IAcute]nio das fun\[CCedilla]\[OTilde]es.", \
"Subsubsection"]], "Subsection",
 CellChangeTimes->{{3.7458685906552353`*^9, 
  3.745868597516314*^9}},ExpressionUUID->"57f1c289-60cf-4511-ac43-\
04b48460d6e2"],

Cell[TextData[{
 "a) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox["y", "3"], 
      SuperscriptBox["x", "2"]}], "-", "xy", "-", "1"}]}], TraditionalForm]],
  ExpressionUUID->"b97779dd-720d-400f-b649-e7bbae421301"],
 "."
}], "Text",
 CellChangeTimes->{{3.745868618022232*^9, 
  3.7458686445468216`*^9}},ExpressionUUID->"4ff99d7d-902e-4214-b7cc-\
b785ef3547e8"],

Cell["\<\
Polinomial de duas dimens\[OTilde]es, uma com grau 3, outra com grau 2. Ent\
\[ATilde]o \[EAcute] um S em uma e uma par\[AAcute]bola em outra. O dom\
\[IAcute]nio s\[ATilde]o os reais em ambos.\
\>", "Text",
 CellChangeTimes->{{3.745925778210458*^9, 
  3.745925834241601*^9}},ExpressionUUID->"00e6508c-d8ab-4e89-bdfe-\
ac8ce26082fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionDomain", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "^", "3"}], "*", 
     RowBox[{"x", "^", "2"}]}], " ", "-", " ", 
    RowBox[{"x", "*", "y"}], " ", "-", " ", "1"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "y"}], "}"}], ",", 
   RowBox[{"Method", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Reduced\>\"", "\[Rule]", "False"}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7459261158268557`*^9, 3.7459261666022434`*^9}, {
  3.7459262008694024`*^9, 3.7459262022999353`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"68c38ecc-7ec8-4c64-b94c-3131a90251fa"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.745925868704466*^9, 3.7459258835548444`*^9}, 
   3.7459259876123266`*^9, 3.745926033367103*^9, {3.745926134521847*^9, 
   3.7459261668831873`*^9}, 3.7459262025655327`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"db4de3dc-008b-4a38-9d22-e736b20ad4cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "^", "3"}], "*", 
     RowBox[{"x", "^", "2"}]}], "-", 
    RowBox[{"x", "*", "y"}], "-", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "50"}], ",", "50"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "50"}], ",", "50"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7459263640067825`*^9, 3.7459264183958716`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"0a0adf64-16c7-4eda-984a-740707ecfbc7"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
XhDs7UH6wz5nkDzsRnQv0h/2N+5cPK8TNJT0h/1Vf0PJkqBA0h/2h9+n2Z70
jiD98fd7Xi8yx9+IIv3x95Zh8/cnqCvmXWm/6jbjYY9KE0h/2M/6s/mdZ1AK
6Q/7TcNbhmt2mEb6g9dyLfJr+WuO6LmQChaeyd/tvnmT/ri/pqay/rDfy8Yv
o86YkP6wv/Qx99iShw5S5fUCqXCT1fOIUyakP81TGq6Raj7ylyqvI0iF06Gv
Nyd89Sb9Yb/ukvWzGMMxovUFqRAwq8b1mRlRpD/s83ZPfOD0KEm07iAVnvhO
S5G3TSH9yZ8o2cy51jNF6xFSwXF3QFz9cbNJf/H8tvI6hbTa/KqYQ3+k53m2
sdlcp+GkP9I7qPn/a39chfygb4v67LAg/WmdoV1wm4i17qL2x1V4b9N/4Out
FqQ/7I88XbjvwNpwUfvjKrisChhi6KTYPwZ75423CioWJovaH1ehrPtcudaX
iaQ/7M0zTXP/WztH1P64Cg+3uJ6cHj+H9BfPqyu3P9X3R6matxfbK7c/rtXm
t8Xz3phXFXOUC3iAlnK5YN60cl4328eeygX2ZtPeadone0tF87dC5fxtsLc9
lQvs60e32zU8eQLpD779cPb4s4WzSGexn9BTzJF/FflVuS4g3gcl4jQPSeuX
PC67ydrPm9G9iCMuM2b92mhHiej9NYnsHGsfok5JRO+vSWRfWX/X6KuL6P01
iexU4GW9d6c8Re+vSWRHuj6dYJcxlN6PwHOmz+KTSEcpcZTbHRZvvwpVjB9R
ryUxU3ImHBsq2ucpETI/5e19e9pTtM9TInxy7xW06puLaJ+nRDjO2snwMxLR
824nxCdlxtt0l4jXWUhn6Ib4tID5WRxaQPMGqF992fjrQUKB8OBvOl1lYWv1
P3t4ucnuW/bNN346W2799zmyIq72Pq7piXfx8iZ//TMh/rvVnMVlOkPlk/+m
+/tfcLtH3S+5e+nJkf6ytAZ3//zbU7b6zKHioCYplD54j2Ef7+uXRVL64Jfy
dbr9W3sQpQ9+5eLHqAbztOST+jaOGTO0hwxX57bHpiSvTqT7gq+NrtH6qjya
7guu9/3EQY1lQ+m+4JK7J1JGa0npvuCDxx/YWHa1mOxwH5+mpj4Hy0fSfXGV
BkSc8sr0p/uCtzX3sLy704PuC65peO1P43EWdF9w3wzTjIdT8+m+SK/uEdeK
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
r8c8nYX3Dx5xUOtO+Rr4t/7Yy0ZbTkl8vcSL/HdYYVh3eYGD7LBRy42t98WS
/wf5Omat7dcetFqdROXVRrfR2uP7HWUzvt44/mnwDMpXVblYyB6eKdkWXWso
5cuWr6PWH3VAf9ZjP8rXOsS9Qi2lfM3g6dxefCz5+GA1yldXns79a7mbGtQz
pXzt/auzlezZqM9zzr10IH+q7ttKNq9uWO+VlyTkTwu+3p43ZXvIBW1r8icN
8aqgruSPA09n39tN5yer36X2ZeVf+w//ar/fnf9KM1eG9DfydWr/R9ERdW1e
yvA8lvL135nv2/yUuL+UKcef7KqpHH8W8vSbVL4PnuItU27/jYVog9GrvjVs
JVUeZxkK23R9Wj3306X237hqHVywCpt7V+tWqYD7LUDcmPBHKX7ANcwvQqIe
epHixn1/60MHoc6JTXMLH3qK+p12Quu62jXtY1zpvlXr2ObCkZuDt07c3JX6
kaWIG1v9UrrvTp7+0pCvx3aV/qT7pvxtN2wFjZx1CT2PxdJ9a/L1+glmUQfq
BITRfZfyevEhYZ3L5ClD6L4fEQemvlK6byJPf1Sk2hzPb4bUj7SqqufCzbAZ
vx38ZtB9+fq+kBU2y2Dj6iS6r13VcyQcz52xu3CfIs5ZTnHaWaX7Nufpp657
Nn7ssg503/xpiyPMIqXV+ne+ji/kXXVLb5U/j+47pqr9EfyGWM42CE+luIWv
CwiWc4aFXa2v6MebUdyVqOTPS37foKDBF6+6dyN/jle1z9X8SeH7PcTxhnB2
affHRr2qxVF8fUPYHr9leGnKNIpDrlX1I0KkxzeHE13Gk5+fKY6qp+RnBvdn
T4JlkPDGjfycE79y8/FF1eOifqL9hPBTv6qfrRYXbazqrwWdOj4tWuydQv7I
KP5JVIp/ZvP7jnpsYRiZoIh/cN+TzlNmBWwfR/EP7isk1Pk2WDpd7H+1uKWf
qN+H/3qiOAE6i+MK8Psijvwa8HTO1D+9cbF0OvENPG45/231jZJxU2m+dCD3
x8y0x/D07eOIj+Dxz6S5I8oE99E0jzqP5yuig0Z3rYnexM3Rb7QM7fFxdG85
9JzF7Uc+tljF9KT2vy+/7wnnKTuYntTOZ4jiB+iWLIo3oJtzVf2spg+fh5eN
5eeTgmuJzi2FPj15OiNM5fqTSuKJX+VxUTsDfT3j/8aTPku4XyNmPrg2USOY
dPDlcdfb5XkNhUWKuCsR+28bSXc3Lh5J+eXPabX8pvN4Q90g4+Nd/fmU32ge
n3gm2h1rn5FK+bLj8cxvfm4puITzd5wjX4hz6jukL7iYGEH8E79Pvy15Lbez
eAn5TeLx1azBfv7lLL5CfrV4PPYwRL7SNUkRj8H//nzfKfLL20lZt5ddjBqy
eIPaQx6fVJyo/WX6wSTKrzWPZ94317KxMhpL+cK1Lz/PFL/P8GsXzpEve56O
7FqYze8dfsQ9eBzV3Waq+6WlXpTfuzzuKt8UtX+iRnfyn/cvsuK7646z/ov8
1+T7CqPNoj6x/ov8X8zvk5+w7jzrv8jPVnj/jJ9nCm7M+RjO4Seuk6+6btpj
2JP4dh4vDTw//61dgQP5b8njqwXns2PbNjAl/9Or+mVZ+fFN2u8eepL/Z/j/
02f9vkOMK/n/X1W/L9vM+v2kzV3Jz2K+/7Nhi6rzTMFfcZ7LzzmFn894OjF9
XtxJnWxC/PewSt1MZRvKDBcuDTSg+nOC+7Oa709Ge3uTp7NnUmLjRsl0focA
fybyc0vB4Y8H54iTn/J0vixY83PXxq7E4c9rrwauZ0I7U/x8He1iQFhCeLQr
cR0ef2ofnDjUpKY16XycPx9+LK4radiKdM7j+xsXsrjujZ8u6VyP72/UYHGd
2a1Sqt+7+T7Ypderzj8Fj+T8HD8XFXq24elc9ZWPb62fR/wyj1cP3790XyNG
RvO0udyfi/x7TdC5Fk+nVW5Ab41yvBdmL8CfufycU3D483BHFYee8EffcqG+
+rlS4vDn4agB2XslL2l+WONxlT+CyaQpJz11SefmPA5P2fhnwzSTlxSf3+D7
gWey+Pya9UuB4oG/6dQQDrH4vMjtJb6jLZvG9wNr8vNSweWc53AO3V5U+Sm8
qNRtjIy4hMfhH5jOeXp5NC9azP0Zu63q/VZaz+L+NBuqfXmVowz7tgX405Kf
iwoOf25zDt3gj1b4gOwoyUvi8KcH0/nl2VIBuvXn/qQz3aQmL4nrVOksDGY6
H/bUlWI8WHzj7zjFeVBcRvbeTw8E8Dzen5u1Sxp1ooFinGKG7yGw8dd5bWuK
x3T/toemQp1TGqZzIjpT3Pge7w3xc1fByzhv26KKQ2cNns4B1j7MDTQgXsDH
I5NYezJpsgnFae25P1rtqr7PQHEaT2ekbfmxG4MNaJ4K/gTy81XB4c98zqEz
/FH3buCaGdqZeD73R2Phmp/pG7vSvJYB96cxax9a1rQmfof7O461J6OiXUn/
DlXjU2Fs4beQm9kS4mcwnpp9PutCrifl14HvC37OxtF165lSXLq/ql8Q3rJx
9JmXDpSvJnx/8c9XVeexgrfm3Iif04p8pfN0jtTNWlU2w4v4an6fKLd/J/tP
HkL54v2OsDL3wDbfR37EdfAd0bq7vL39wyhfcVXzA4L1lmeFLWoOJT6Dj+N8
jhyYMCIjlvL7nO+jXnP/4JGuat0pv95V/bgw3nLKz1dLvChfuNrz81vx+zK/
unOOfPXj6ci3/FuUGjqauBMfDz6NPNLtmuFYylcO92ff61V9VqSMI36Ujyvd
DB131jiYRPkK5vvHh+1MqXfuexzxdnz8mNxl0uRLvjNo/jaFv58xb7Dfw9/+
g6SIu2pVxV1CHou7pEkWUsTbDTifWT9w/ugEC9JtBk/HtcjouMDSgW4lPH/1
ahf/1pOGkT7WfLyZw8+HBe/COc6NhT64xtg3bt165yTiY/l4dlCHNNfCo6mk
D48nhYKQscUvB84gvo+Piyd3Xb1gpv580ueNaBwNffj3KIQxMx/0ZXE48Sl8
PDvfLHHxuuKRpBufXxWKWHzeY1F30m0o5+81FrkmLehOuq3i6VfsrTFzsXow
6XaLj3OfnimQnrs9nvTBuFiXnz8LXofzxpxDn16i8TV0wFXMU0XjdOjDxx3V
+CnReB/68PlzYebcEafZ+I44n5cW2pr2kLLxIOnWnqc3i43vPozuTXw+Hy+z
8eBZzYnepGdnbj+oIN36aWRv0jOC3/d4nlWN426jSc+tfJzeR++osGjcVNIt
V7x/ifMnIg49N/F0xNxIND8APfk4txr3FM0z0HPKr2K+QDRfIVrfqTYfLt5P
i/5UzNGfijn6TTFH/0jnJQ6/8iG4QDFOxD6fhfw8XJQ77Ct6Xm+VFRtD6cBe
skXfbtryZBr3Ufqaf84d3TmQ0oF9w1HuZyd+Caf5WMX3UUL+7rNCOrBvvmr1
m8evPOSidShZbbmloJ7tLRfpXG3doa1onQg6i/cJK883ulTTEzxCND8Ann9F
b9ahiXFkT/uO+Pmz0AH2L2SHX8wcqxiHwn6IS91VQfIY0hP2N1f802d5ZxdK
B/b3x6+d2uvYUNIT9mpquWr/qyfsjcZ8HRv1nxPpIN5XDB3A19ZOu3vWczbV
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
HOuvyLxAfmL7lUpO68YoO6X/g9999PArr7zxSn9pX/BXQydXnm2dqASLvgZ4
b6uJgzzqzuU5GNY/Z94Y7h+hz8J7Im09lnrfS4W+HvM9FvzyoXLC/CMox7jf
NIzD4PhOVwhHOeC/fS4ndr4fdPTAszf6tBhYI5vn7fh+A9bYHy3of5Xn6uAL
LIdM2tbByPF9bRX/K9SH8QgF/6sb+bYl7yVFXw7+NuAn1A3vLriPUOFvw/yE
B8NvT+gYrUK/kvPCGge7P5tlU/eHesBLp7RJbZh0BPqV4NbJo/PL5RyEnrVx
3gm6PrFH+FuWw3H7czlOSX7wl8Y4FlfVuXRwp2ien1Mvf82wbWnJQ2kH2KeP
adH2wjjwRDjON1CfZLOIpGn7nXhPx3Y/YvE/5wxeRl7CkD+R+RTBYw1xE8wr
puPGvFNFy4E/iZHbF6mnkVcr8jzvHXzWTe65tzb9pjiPLCw1ZniMI+MB8V1k
uKzM/ickUJX4CPIGt7JWad+vrIedydOPR/2ufb+MB8c+Qj26LL3u9rZyj2n0
e/801uD3juexvyicUjuybF5TFXrEzAfy9aNOtZ75Mh6WekVh9VJyjgfxXIj3
1LXuvx5iYaPCnuAdHD42v1q3FvRbyNfWapxS6Vgjlo92P3B+zuTm6bVVY57m
onamTjq4j6EdX+vbfZqhX1EfGby1gefo+4Nw6heDnzHwqvp+ItyYZ0v4syL6
aRxPlsa6pszJaKSg33Kfbh9i192jFs+vwH9Od7uwx9aGcXPg85p6pew+FsT7
I3x3wb9933fbmwoK9OnwfXVd7fTE7oWv8rWMG5iP9tz9+sAf2nxXR8evCXeW
cjCeh5lf+Wa7Zy+lnKzzwZ8FhKWaH+/P80zug55F/7qvl59aX86pwCO233Nc
fLam2kTHk4RDN5b3vI+ulUod9ZZ6eXj+WcO1QxqZl1QddbxGIwOHbizKeTH5
k32jrLtHoOsKvr3LuvNW9Q9Rd5v+5N53dzT7aKq66LgiXPSFyatNii1sn1lT
9dFxf+HIT4DfDXewKhuw7CPzE3DdfkKt2/q9qWrMiyP9SuLOKuvHPYk7u6/v
/xJ3ZtS/Fi76ftC/oy7j0OxO+TM+Uv+Ofg4hGbsyn5mqSeL3CB4Y2GfF8j7O
KuKMqEOpjW/RMY78fjHudd/ropQ85KRA1xX8Q4Zat8F7UwW621zPa/W5MuMj
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
/wEy9bVo
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJw1nXfc1MTXxXeT3SSb5FEUFBARqaIUBQWRIqICiqjYsSvYu9h77woWFLtg
w94VsWFDEbD3LoooVsCO/vQ9X868f+QzdyeTSZvM3HvuuXfbjzl828OiSqUy
KatUYpWz65XKTyqPSyqVB7WtUK1UFqtuhPa/LvlR1Y2U/KrkhyV/poPflNxC
28valte2u46/oFGpvK/jviorlQfUrpnqf9bv81W/jvavnFcqZ6n+D8nvqn6e
6jfS76ypUpmptstp2037pumijtA5ntPvHrVK5XPJb0t+Qm1bqvxNx/bQ9cyT
/JLq9pK8k46pqnxU5ThtD2rf0LRSeVHlPWqzqeQXJN8l+ULtv0Bbk35vovrn
Vd6h+vaSd5A8RPLnurbBKlNd23zJD+m6Oqm8V8fdo20XtXtfv29VfUuV72q7
hXtU+aG22yS3Uvm1+txG199N5fHq72fVv6rr/077Rup32eTnzvOfo/ozVf+a
yi/0DFtLnq77byb5bck3q81KKt/Qtq6OiXXsAskPq76zyq+0PSi5o8p5Ot8Q
nbetyveLSuVu1a+m+pPV3yOSx6p8Qts0yU+qfEv71lOfNfX5sY7ppWOXV3me
6tdWm1jXMFP7V9N9V1Q+oX1f8v4lv67ncbm2r/X7Rx33lcr22jqr307ahumQ
N7X/Cm3fqH6y+pzPM1Cf1/OMVfe1fr+v99dPbU9S+Zr6uU/1NcYc40HbFMk3
MF5UfqP2V0iOJH8p+Wb1OUTHfqFjb+RZqG6h+j9D5QDVV2mja35G7W/Vcfcn
Hrc/qv6+xGPvB8m36dhN1P5L9fOpntsGkj+Q3E1j92K1G6Tnc7ra9Vd9ReVp
dbf5T/d5i47dWPI8rkFtG+pzofZP0b72qr+ZZ1/1/W6l3w+pTLRtKflptW8t
+S+1X0Xtxut+V9HvYbrmT1Q+q/3vRb7+km9S5zpEx22j63pY8sGSR0l+Uu1a
af8f6qen+vlCx7yr3y+qvq3Kf1U/WXIu+TvJ/+ged1e75fWsXtd191Q/4xnX
Ou9TanOz2l6mrSp5ntpfq/p7JF+puosY66r7WsdeKPkDyfMlv6w+11c/s1Te
qrb/SR7M/XN+lRtquzThpeg70zGf6ryD9PMG9XGWtteZG9RPT51rd56P2u6q
a+ymNruoPJp3Ifkotb1f58h1j8eo7kHJheRjJffhOUs+Se0+0rNsSD6Fdyb5
V+07VeLeaneayoPVz7aSD5W8m+RnU7f5QOe9StdygerXVHmU2lwkeRzfCu9O
fZ6o3z+qz+aSL5PckLyi5LMk7yu5rq3U7+9y15+k8nvVrSD5UrXpWfdxa+pc
/XRv73GM9n2tdvvrOrpovP2ofePV5g39/lvPag/JTbrXTG2bqe2Z+r008xz8
SMNjgrGxa8Pz5Qfa9tPv3dX+Pcn7Sv6VOVPlQD3nXyTvKHmA5Pt1jg/V5imd
8wHJH0t+RvIMbTurTQtd775qN1372jR5rH2kbX/te4a5hueSedwh76P6TPd1
TOxxzBhlrO6iaytUPzf2PN6QPEfyF6w96uc6Hb+nyj1V932YU/5Vv3vr2EdV
/2fmteIh9dOkY1+LPR/9T/V7qX4fXeM/kveUvLye1X1qN4p3pboedT/799TP
t7mf4QkqT9e2ofo4Wm0Hat/+rEe674O0LVD7Z3XcIZK/kfy85M6Sz2GuUHmg
jj1b8mE6died4z8d+xnzu+T/SR6j8uDc7Q9XmwHqfz/V76o2/SXvK3kXyd9K
HqPr6afydN3Tadq+0zF/6h66qpypfu6p+TvdTeWTjCnmGf0+Vb+fU3mAyu8Z
x5LXUfmA+rhf21i1W1v97sH8o3Odqn0v6j4+1rMaVPU1cw/dVTdB5Ttqe6OO
+4dnot+H6vrPVXmEjot0jjHa9xfXrWv7W9fRU+W+ucfjIWqzq37/o/p1VA5W
uzjy8T+oTQu+R5W3qo+a5PNYViQvH/ncqeTlJJ8h+XrJS3X8UZIL3f/fkvdW
ea3q/5Q8TvX75/7mDm34HVYjP+uhurcWutfrVH6V+Pyt0Bm4drX5XW2/0vX9
Kbm7yr1VH2v7Q/Vjc5//Sj2PJXoWN6nN3iqHqa+V1cf1Kttp35G8F9XP0HHP
xNaZrk69fk3i29Vx91a9Vl0s+c6q57411H+s8hpdc/vcc+yV6ErqY4La3a/f
Z9a9PpQqz6p73WhS2V3t61XPmT1yryM3SV4z95p5neROuc85SfJYXetrkoer
7vy6v52VVK6rc03UuWZo3xUqn656bbhE8t1VX9P6udfHe9A7cq8/d0jum1uH
uktyz9zr2hTJj6nPo7Q9q9+PqDxS2wOSL6h7jlpZZb/c6++9an+DnvtFanMq
c3nh4wZp/0zVXaPreIs5pfA1DlT9LNXvqu0dxrHGYRv0F/1+Vc+6i+oylW9q
+0HyGyp76hzP6LzD1cfV6u8N1a+o7SrJc6vWU2/Svov53lS+oe0ldMPc81+r
ML/9qeserbK5yk21r03V88/Nan+sjj1U5VDVr1r1PFwr/DwHqG5S5OePbs38
2jLMyZepfnrVOk1vtStU3s4YyK0/fKtz9cr9Tm5V/Y/qcyL6q8oOhefYLbS/
neST1ddMySsVfmabSz5S7/1E3kHh7wh57aq/nRO09ZT8KXNzGPOr5R6bn+m8
h5duc4SO/UT181W/ncpPtS2QvEPubwi5B2NebY/X1o3jc6+he6mcl3ue2Efl
F7nPM0bl59pO0fEvqVyl8PscIXn30t/4fpJ/j3ze7tqGqu9b9buJMaH3ugbr
hsqLdWw/yQ+orMbuk9+TdA8X6nbWUrmoap0AfaCNjjmZ+R97Qttx6MaaT44p
PBcdzlpdeJxsxhxV+L4OV3m59j9Z9bu5Rb+PU/1hKldSP8eie+tch+mY3lXP
k1/lnlcPUnlq7nn2+9zzG/c4AB0o6Ak8oxNz1x2Yen1n7Rio7SJ0KpX3qTxE
bXpVvY4013mP0Xk7cK/a17dqvWiYjr0t8nz6juSTWEd5BvpWrpS8WPI0tTsA
NVblGernN8lvqZ/ZQQ/fTvWdJZ+t9h1VXl217daRcat9n6jtN3pXEyR/LHmB
5Cskfyr5W8nHqVwLXUPnPFbympJ/kXyg+voHvQx9Un3+iW2FTsh6o98X6loW
Jb7v1VWuHHlOZz5n3RgU1qk88xrxE3ZV4ufWTuV0jpH8i/q/XuVf2Efa7ktt
R07T/se1rSR5CTaX5N+1/23JrSKvVawTL2W+5q11T0tTr7NHqO1Gev6bq/4b
ngm6IGul5KuYH+lH8kTJvXmekjdObcvermP76NhrVHaW7jRG72sLtVmoNner
/fc6/496bhurzQjVf6v6C6u2GVfSdn7VdmILbRdLXsRcqm2sjuOz/VrP9viq
9ROdstIus14wU/uPrVqHQe2eofrWzIfYDTpGl1HZQWUH1Z+hd70670cdjNcx
pybWOdA9tlL7e1Lb/o+p/km1fSI2LvB6aj33B9V/nViHnY8tUrP+yXz3fOI5
829dz/0Nz6W/qe+tdfG7SP5D8nOJ7Z6latNbx/4c2WZ8IfG8+o/qn0pta87m
PabWDWeBXTSso/6ufiqRvxG+yTna15H1V+US1S+U3EnbB7r2Sdp+kfy29nVl
7VP5hequCzrHJ4nny2YqZ6fWNz6W/FjDa0JN5Uup9YiPVP8xa5a23/S7l67/
m8h66QY12x7YKmtLnh103X+1rVP1N4wudIu2jZh30K/V9i/1uabKoazPfKuq
31TyWqq/iblO27r6/V9kG4fv/5vEc90q6JY6VxTbLlqQ2G5prbKbfg+TPJHv
KOAVJ6JLqH646q/U7yXMIdraqW4x64XK1bRFkec35s1FzPngDOj7uraOKmOV
m2tbVfJS7Gy9j/3Q51TWVL9J1fbOu5Lbq01V5Tq6zq8j2wJ3a0AuUbmHxsX2
ufW7vdAnc8/bB0j+SX1tI3kqGA+6Ruw1b2fWsoBP7aN+FkpuWXj9ZZxiG6DL
zKpaB/o+s06FHjKo9Li7U+VDie0s8KsNS4/Zu1QuVvvt0UnV56LU+slu6Oza
90TVtj9rBDLXNyWx3QEOAO6EXrGrfn+XWa9DpxpbeJy0CPoJ+uPe2veC2j8f
h3Uos/7wiPq7Um1eqfr6fuD7qVSWfcToU7Or1rFey4zbXIquXrfNDSbyRmYs
7nLmbD3P7XTtnTQX/U91t1Rth3+W2V5Hl9te558ZeV5+LvIawPz/bm55VZVP
5cZm1sI+TjwfggucUjf2k6ocXPrbvbu03jWnatsMe4znE+n6L1X9Y1XfD/rs
o1U/o2dVf5XkDpKXapz0UTkJW1hyX8ld1MdLajO56n3osWAX20r+R9f0eNW4
0N+5+/9c8k2JzwOOdJvqd1L9pswnOnZ73im/dU2boq9r/zDJwyTfJXmayhHa
dlSbjVRuo/JJ9TUoMc62nK5tQGJssEnyYLUZVTXutpn62QzdGltT5dZV43e/
6zlvq9+7st6r3KpqzPGa3PI7ehfNAs7A979BYryxVP+X6jmMVt04sLbEx62i
+lGRccrZ+j0y8j0+J3mLxNe7mtpsKPkeyc0k/6Xje1W8fj+s9htr25brjvwc
tmMtSm0v7KzyktjYKTjCnepnM5UN3nHi9TGXfEvi7wCsqX9pvO12lRuUAW8r
bTdMq/o7RB/mfTEmpsfGbFknzqsbo1hRZbO6v8F7mY9rHs/oIjczX/CuwWJz
Y7lfSn479/hpjc2hdtup/d2p8TRsDX7/lxtb20vv5+PC6/WGqrst8Ti6Re2n
5H4Gn2H7lMawL1D5fm49pp3KCxLrAGBhrBGdGcO5dQNsKew8dAbsMuwz9AT0
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
U/6rc20dG4edp3HTUvV/657WLe2PPU3lvuhtOlcblddG5j6wxvzbcD9DVT6k
PrbCF1I1tnpc1dc9Llm2BCzDS79Tv2dgn6fGWU+o+vgVYz8r1usiMWegja57
bmJbL1F5YtB10Xkf1DZX8lYqTw98BngN7RPj2ItVnpe6b+71pNQ61uqMvaAX
oR/dGeZM5k6wh2lBPzklte4Fd2nzUA8u0SP2vMOcM7fu+4R/dFzq7715av0P
PRBMkTFwb+Rv5JzUz+PwxOvGQ+G7xmbkme9Q2D7AlsB2PTP4lPEt9w/tWQ/w
894R2d+B/QeeD65/drDBscXRf9GDsYfvDH2iH6MLo8djM98dZPR5dIkV9e73
w8+eGjuAQwRmAHaADTw6No62t9qfFOwL7Ix7w7nQt6eH9uAMYHVgdtjJu6TG
0eAHgSGBJWFLPx1ksACwKzAs7Nu5QQbLmhHOi2/xydAn2Ac4Ofgjvj/seOS9
0AMiP3PmHXTAO8K4Qp+8M/I8fGPQ/dABj9U461jzmguvao3ArTpBv7vUzE86
IMyrzK/tWftqXqfhFh0dWWd6Jjd2u6+e4ZLCuO7zuXXVY4O++nth/tZ7+Nm1
nSL5KTDFhvX5zbV/oOTXJG8n+S/d45/a9mUdaHjMb636AQ3r2ttI/q3wdX+g
8lTdz/CKbRzGzuigk+9QmnPxvMpeqfsfpd+LCuPMz7FW6Jgxqm9VNz50VGSM
CJ7Y4ZFtVLhm6IXohPgxR3HtmltuDfo8ev0tYR5mPj4m9ZqyInhyYa7B3g1j
+cupnyP0+6YwxzLX4k9jHOJT2y+zfwE/A36DZjUfv31qu3SC6sepzV2SB+jY
I7hH/X5D5bn4DyPjmLxH5H90/E+p7wXsFIwNvAWcbVzdGCc4KHgL7x+cChyG
57lzwGfA4sDk8D/eEpmX8jQ4UWSOxL6p/Rr4N97NfH7w246JfW1LVJ7D2qD6
Frn9dfgB0Ut4Jh8HP+9jup6PVLcj4zRyPb6PkwNWAGawQcP215bMG9oOpF51
cWI/zKE6/1j0Hx3bXeU5hW0EsP/bCnNPfiqsd+O7RPfuFHR7fExnFa57prD+
/67aHKTfUwvbE7er7KZ+L40ryxxgq9at+8MN+CrzdYI54MOn/zWr5iwdHfta
0Xew9+Cl4CM7M7bedWrV8pKKfTHYOMdXzNeBt8NawvPDp4autgscO53zKpVH
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
nfD9lc6rtXPDGBVjnnjvCaVzY41W/WWSL6k7BxG6G/2jL2IfrV8zVnUDWIXK
G2vWc9CZiIEiXxz2F3bYh/p9HGOxyeOB585Y+1/NOQrYN6jmcX5dxXy2ETXH
RCzzu9Uc74N/rW3N8T74IPClTS/8/hkH8DMYj3yP4DXw37asmav2bmF9Hr1+
ZM312MNgOnDsjso8/4PJgM0Mrvkarg/z1VZhXLF2gAuBD11VM5Y7SeWhElaR
fFnm3ErYRvio4YiST+otjbczw3f+VmE/18o6bnbhXGk8h3+Dn2q74DtbUnPu
ggMyY7noZEek9q1tF/xZ07TdrjaP1zxncv98l3CQ0NPxpR9Td1v6IU8c+eKe
UvlezTzqM1Tepzaz0KXr5sIR97F/Zh9lS+zGwrwv8lAQzwhOCGYIfkg+r27Y
ZzXrxsxxcPXQ88m1d1nhGKiuNccYcr/Mvcyr2GJ8A8RCgnuDAd5bOK8ReDB4
+0OF/Q3rFtaN0aGJPTyibm4/HH9yKzH//FU4hhbsZbzKam5djRjJKOARx6vN
Gbqem3T+Y0vjEXy/U1VekzlOgvgJbBDyLl2h8lHtG4iOVHPsFng9PKOdw1qO
rxZfGHwJeIHYnow3xh3xfvg88Mu1a9g+nVDYVwtH+u+G4xmZm4kFgy/3Vph/
4L9tq3KDJtufU8OYx/a/6//7KY3vrFKa90KMD7E+rZvMdagX5hHBMSIuEj4P
fCTWTXh6YBbEM8JD49tGP3mpNC7Wmhg13fPOuv7L+dZLj/VRDfu4yQ1B7Cd+
QvIjgBPBWYTTSb5G8oqAQYFF/aZjr6g79r97k3W1dqVzCRIrTg4kcmtgExNH
SF478v4xf4IvgROQ1wWclrmKWLwl2i6tO7cAXEfiMU7UcXMy5/RjvSDHCzoB
OM2mpXMLXVk6zwk4HngeOXYY7+s0Gb8ixwKxq3Mz5wlkbTqhMA+Q/hdpXz1x
fBM5K+DmPtAwDwcfG74ncoDA/yD2kDwh5Lfcu7CNhv0Flg53ETv/kNI8PWzU
1pljh8GTiQeEFwQOTo4u8pa8EJ5xx7CWsaaRfwOeCDGMq2bGbtZWubQ0Zse3
Q34SOGvkfKrrPjdPjD2S+4h1BawIHyj5NYhf7hr0GfQauKDY8y3V50mFeaQn
F86piK1P/oBN1efj4Dfqszlrh8bDvblzMPK989234LlLfjSsC3CJ4RQz1hnz
8OzIxcP1H1qaa8tcDh7eP2DR6DNNDWPRndSmaFjn71g6nyH4LTgu+QzBe8F9
yWsK3gvuu2aTsT/eBT4F8lowDskJBQeZXKPkyIOzQz5S8uSAr4Kz4l+Al0mc
aaPJvGr0LriX5HpjbiHXEDoW2CEYO7EfxOvAlzs3PDdweGwrYnrIdUkMMPnA
PgqYJOtv2bC/o0NpPJ84GuJpNi4dozBR5YeZ4/RZ03Ndz46J/ZsfZ85Lw/pe
qH50YlwCfJiYNWLX8KGAdREbhB8B+554RHB+eOTEvRI/MqXiGJnHAv8JTh98
YzCpg0vr6YPC2r1raR/FlNJ5UMFvwXGxQ1tj8wYbClsGjut5mY/Dh3FOkKlD
31lFbT5PbYcSs/Fh6tyS2NPgvtjm2M7Etu8Q/LA7qe3qTbZvtyyNLRC384GO
nVqaezo76KSDw/p+R2keJGsc3Gni2d5W+zWa7As/SPunlV4ju6vcRPUPq/3J
pTkR5GeBF3Ft6byBrF/wbcgBylp/denYwjUY1/j7ao5BJb4XfyGx4aeXzgG0
me7pvtI+GMbz/aV9MIzze0v7fhgP4AP0Q24W/JXgquB46OL4Vs5mHSvtg+nK
HMU6hw6h8vHSfoge4E+lfTZrqLxHW5o4NrO/7vHquvNkLqhZt0G3/6rmPEUv
1c3PxL4ip0HXhv0+y55P8PugU8F1wcYjP8qQJtsJ5GLaqMl6Cfmp1my4PdfT
u8k8WubDPk3mfDMPrCf54rpzTsKHRB9AL4A7ig+RPIVwRPEbEu8/oMm8q3Ho
zpJ/rztPJpwcfK7E8vfjPabOM7mu5F/rzp+5tHDOK9a4DVU/NTEnf9WG5x+e
J3jFAh3bXvv7Nqw7oW9js3fAZiiMb6wheaTKZzM/Q94veMVCHduhyfZ+e7X5
KjWWDoYMpxc8HD/xepnzZoBfkoOKfML4/niPvZrM/eUbbNtkfsz+pXnbE8Ox
bRr25fF+wbpvCzoweO9VYY1o12Su9oGl89DhF8Y+alN3rC75bImDAzsblzq+
ibjxk1Pnf8a3Rd4OYgmZT35XeXLi2L3zU+fYZM75NXFOKjAx/Pbk1iSvGrox
+RjPqTi/JnwvsLSWqutct4+VfEfkp8L3D8+RGHxiiq5X3ReJc0XyzZIr8uyK
c3kShwI/ghiXExJzxS5IzdmD30RMMHnKwGrIoXN+4lwH41Pze9+I3P+5iXOD
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
A57SDEM=
           "]], Polygon3DBox[CompressedData["
1:eJw1nHXcFdXXxefe+8zMnXhERemQFAFRMWiQtECwQLHFTsDEwERBUGzFHyhK
WNjd2BJiYRcqIqJioyLiu76sef+Yzz17TszcmTP77L322qfFEafsfXI5CILf
wiCo0W//KAiGl4Jgd51sHQfBw0kQNJZ8heqvzoOgaRoE0yRPULtJkufr91PJ
p1eCoFE1CB5V+yaSr1T7a1T/sX7Xadyrde541f+pMfdQ23t1bpbqZuvcbF24
heR3JP+l+sGqf0byXZI/l9xQ8m2SqyrX0fWnaKxzdd0vNf65kntKPkF1m9UG
QaQ+D0geoz7nqjxN5/ur7zydu1nlY9V+G5WPUnlTtX8iC4Kf1PZytXlG9/6d
+iSqf1rHbbrGV2q3heofUH09lTup/x2qq1G7Wbp+V8mPS95I8lzJN6jPvZLf
1vObwfX0/+rq/+2t41cd/+rcvhrvFrW5SuWN1W++yqfq3ASVv9LRT9e6W+eu
1VjjdX+TVXeCxrlD458veYrkEyXfKTlU+/vVdqqud47K/XU/r0reXOW7VD9W
/2myxusgubv+7yfqv6Xu42yeu+o/1e9DPBtd6zvJddTuecnXabxLVO6i8R6V
XKvyHNXn+n1YcqjjotDnqY90XKzyF/pPjXR/t+uaqcqfa/xHVPc/jb9K/f9Q
m/qSP9Jxv+p/kryxyot1PKQ2S3W/e3L/qntb7e/UuReZfxpzkMY6TPf/nOTb
Vf+96m+K/P/f0f3eqnM7qM11arutzm2iurt1vKTykzo3XnW/6HqbSF6iY1fJ
DVW/g8pn637bqG6g5BGSB2u8thrvU93P3pJ7q+17ut47Ovef5F46Wqjtjrqf
FmrbT/IranuWxuigsQ7UM56jPgP1zEfzLiTXqv8QtWmp+tWSv5C8i+SGkpdL
/kzyCRrzdI21WucWqt8YyedKfk7XuCz2N/KH6ubU+Ns5Q32Gq3y1yhfyPFQ+
Te3Hq/00lY/XuXEqD1bfLXUvp/HNBv5vieTn1U+vOBilcS9Q3UYSJqv/Obru
BMk3agxVbRiTsa/TcYzG66DneYHK3+j+91ddG433vtqfon7jJD+rNhN0br/Y
38t/GmNflX/W+Peo7hSV31T7L/T8OmicXVW/QvdymsqHqv0BanO1yl+pfif9
nqf6diq/qptZpbIuG3yt8wM03utqX0/n79Z4g1TRQHVfqe5Tyet5J6o/Wff1
ieQvNcYOqvtB5+5WeRnfgsor1ecljfGb7muA/ttUydMk5xp/kurHqf8l6j8p
tvyn6peqfhvJI3SvT+m4SOWp+g971fidrtDvn7rGMP3+T3Id3csOknO17a4x
npf8m+Q9VD9d9RtLHqtrpKpfpev10PvZthi/re5pqM7N1TUfV9un1Od25pfu
b6HGqq/z9zCfIr+Pq1Q/S/VX6Vymut3V52PJQ3WNrQLror4a/+/Muqmdzv2l
8uWx3/9fkt9Xv991brDqu0h+TeVOvFPdz5M6LlC5pOt/p7rDQz/vcur3c0To
+fyo5GvV/15du6Wud4n6nKnxf1KbxWrzX+L5wrw5X+2/k3yg5L5q/4HkfxO3
PwldKPlCvpPAc5C5yDPl2U5Q+z4a/xidG1n2HGIu7Zn4v/3CXMr9TU3nfdT4
W/tTcgO1/UTHA7q3Wt3v5egD1S1T+wP1n/vr2V+oMbZROeI70vib6FwHtdlU
8o6SH9BxuspvMYfU9vySv+my7usAtX1b8jzVV9FhktdIflVyLPlQyV9LfkLy
7hpzpMrDNF57vind/1DeL9++7mdY5P/Gf9xO577QNfQTfKvjBV37aN3jIRrv
KMmtVP5Y/ffiWeg6S9X/ldDv6zydG6uxPlf/iLmq43nVHSDhSNWN0vjdNPC7
OrdGdZeVrLNqNc5RFc/hN1W/j+TfVddFR1P1/VnndlL9EepzufqO0j3sL/lw
yXUzz8mpGueFwHO1JHmE6kdK3kztP9T9DtNYDbm27vcY9Tlc9X/q3DK9m+6Z
15cukdeH7pGfT2/dTyOuLXmI5O5lr9d1dXRR+UEdZ6rcNfL60lNyA8k9I1+v
j+TGrNe6/rnoR/Ssxl+jc7uxXuvcLTwf5jnzjzVF5ZG6/5Wqb67/1JVnw3zl
2avuevWfonP9Vfexzj2mc7/qepvpWqn6tFJ5sur7qX6R6h8IrQPQBbzU//j/
ks8p1qYbJcc6v5X6b6r+W6t/qqOd7uVEtWmmNr8wJ1WfVLw+baPxz1S5PWu4
5ETHlthLat9U7e/V8/xK9Zvq/M0a/wDJF6juOtZJfU8jJfet+NzWKn+jo7vu
N+OZqryF7megyo9if6jcQscuKj+m4zzmL23Uvofu4y2Nv7/G/URjHc18V/lV
nW8k+SSVL1X9CLXvqustVX0jlS9VfW/1v0dteqjNcp3rVmMdeT/fJs9IdY1V
N0/li9W+p+rv1rnuOtdX545W+TnmpsqDNYdaa+yK5G76f0fq+Z6h+pZqe53q
Hyns1891rNVYO+qYqftpquv9oz7fql2Vd6/jVskDsNdU93DZ9up8jX+zxpuh
8nqNtzv6rmwbjP7PYz+rPF31/xb6mm9hj7LX0FN1vRa6/6ewxdUm1P0cq/IS
tftN7Qfq3AC1fUTH3aHXddb3K9TmP9YMPZPGvE+NE+n/rUH/8G2r7hf130Pt
z1L7KTr3L/9H9bupfI/KP6i+hY4mqt8t9v2fr/utJ/l31f8j+TSdv1/y7thX
jBX728I+7hN6vZ8seefANvKf6tdQ8i5qv43K/VQ/RvJwdArvR/JoyftJvlTy
FrpGY8m7xn4+d6TWh7upb6j/M1HyFqqfWPX3caHkBpLXqH6d5L/024j+6rOd
ylvo+fWX3Bxdq/4tEs9X5m1V8sd6Xm2L9e19jTlE47XBvi3my0LV18N2D21/
o1/4r+iUzTTGZ2o/XeWr+LZVv4/G78qzVZ+dNf7rmcc+TfWvqX6B+i/X+GvU
5yX131rn66g8R8fNofXTg2rfrWwb+O/Q8/tjbCrV7a1zl6L7de5v1rfU/teg
2O+3rN+WvC/NgQOr1o8P8e2UvYbUTbxesW5Vau3vPR/4m20Z2/7FPtxNcqvY
6zdrDevqZhr/LI3ZRuVBrCGh9efDKvcqW2f3jL02s0ajH3vp2KHsOTNb5WaJ
v+VekdejzRI/S/R0je6np9p0lnxf2f5hD50/umydi77oLvnIsnXI43yzqfUh
ejFQ/xsld0D/YZtIPiP22ny/qnur/XAdke7/5Ir18elVf2stde4MlQ9U++vV
/pDANtXxkudii0ruFHq+8P95Dr00/rpi7jCHxvGtxfadMr2T2ZHHb8Vc0Lkm
sfUg+vBOXb+XyuNj68oN70Djn4i9LPka7I3Q6zbrd6vi/tBH6JIm/AeVd6r6
W24q+RSVR+tohm3IGqnyQRpvGs9XYzym+3lcx6uq+4xnjH/PeqG6F3VuMP47
+kjl+Tp2l/yq5DdUvpr1RvL+6nOV+g4N7PMOj+17VjTGjWp7hNrU6PpHYiOo
/Gzi+xlTtT17uH4rkkepPsPGU5+PVP5DY7zIHJD8juTGanNS1f4h72IB9hk2
oto8obYHSd4a3Rdb9+KjNcX/U/vW6Eb8QZVHx/Y3ZmqMHSWPlTyvbDxhJ8mH
ag72x58v/JGfUvtyFclLJL/P/2U9V58PVG4f+d1gA4aSb1b7rXnfKpf1/7aK
PFfalD3mqbHn8m4as47K24f+Pu8q2544Qs/nNLVvofK26n9u7LX0OZ0bpHNL
+E4rtoG2xCbR9Z4u24bD9uYZ8azerXhNOzv22rBPyTrvKNVvjL2r+s4qT4zt
S/4SGEMBn9mcb1vHcaq/NLbv9nNgG/iXwjegDfjNxbF9nSU6N0x93+Kdaexa
nfsxMo5UX23fZ42MrDfRn++x3ke2/59Bdwa26W/W97SC9RPbrNZ+HP7cRjom
qbwH9rLavlHy/DxK7Q/S9Rqqrkmt13XW96/Ktt8PVps1FfsQHSQ3yKxv0buN
8ackr1PbTjp3NL4ja4TK35Vtf8/Df9J4p0oeyJqh65zCfClZ3x2p8WvxJSQ/
FRv/Yn0+rWwd3Fnj/1s2xgTWBN7xZdnP46nC3+BeP5T8tORnItvqtAEPyXmG
Kv+k+qW8Hx0d8TfL9hfaa/zzVN5T5Wb6P6/EruM/Ng9dz7fUAf+CtRJ8S/Kz
ate01nYt9u16nVuEjoxc31n/6Xz9t78jY2FnFGtwmTmg8kqNt4i1NXLfqo5v
VV6gNmtVXqH6LTT2S7reRuhHvYPZKk/HJ1J9X2xKtZ+t+Z6q7UyVF+HvpdZ3
6D3wu2v0+zr3g33AtyT5tWK9A3O8Xv1L6n+1yq+DT0gul4yVLZA8LbEuul7y
Qskrq/Z9A/1upfGb6NytGu/X2Pbt5tgQkldJ3ljyodVgAxB6pcZYp3N36vio
bB2Jrnxa/6ms+r8lf6l730jnfud7kvyeyleq/UuS12qYiZH9Nb4VfHh8+RdS
21/YYXVq/R55nyU9r8Uq/w89VNhP16jvKN1Pput9WbL+fQH8oMY2/SyVR+iZ
H6X2R5W8Hj6Y2n/bX30zxte5fcvWmQ+qPEXjv6jy39hb+Eo6t3fZ3wz+x9Z6
fvuUrVtz8CFdI2XtAdNT+QGNP0rjD8f3qPWawtrySdn+7faZ9QF6Ya2e7Ulq
X1bdl2r3V268DX8mZs6ovDizvkBvgGcuj4zFRar/JjLeMr9szAwM5sLY2MMb
koeGxitewFYJjFklVfvqG+lcqvJXOldRuQ8YVWQdha7CZzsAnySyL/Sj6t9W
uanu50fVt5C8n+69Y+j2s8vGg5qCuRb39jd4IP6o7r+R2l+k8jFg0qpvFPp7
+0XXeLfktfYn1b2X2Vfsq3Mv61mHqj+4Yp89UvlG1T+r8iMaf7Xav5t5rWfN
P1X3s1vVvvSbJa/PX6tdDfNF8pb4wrHnM3jWaOae+jeoMeZ6Ab64xvhe5V1i
+xONc2Nh/PffVV6a2ZbApjhNbc9I7eu9XbzPg1L7m9cW/vEsnV9aNmY8R2Ns
go8ouRnXYC7m1t9Dqtbvt+HXl43Zgl3fHtlWYozZqrtRxyLWbvwvsEcwDNZz
nW+o/pdH/rZeLhs/5zvne19cNr4/NXbdVDAm9X9S/X/T85yhPpvoeb8R+1vr
WjLGxvqwquw1YJ/U8YLFxf2BLf+An1jyGgzegb99UmD9/C6+dGZ9jd6+CXuB
NU91O+lorHIb1f9ats+J74n/ja++WvI7kfGTjyvGOD+UfDhrhupe17XW5Nav
Y9X+L51byBqZWz+gJzbX83gmsz2FXfWn6rbKrI/QS9OwryV/K7m5+u8KNhda
/z6rY1bk9RXb76WK39FwHcuIt6jPqNg2JLZk87L9y36SF+p+5ulc/6pxcWyv
eyTvXDVe/0TFPl5/9e+mc3MrtnnwTdpX7fs9UeD54Hys1fcV42HP3qZys7L9
U65HHTqqo/o31zuchy0fGY8Hr/pI8v1qMwAMsOp7wSdvhj9Sdfs7Cnub+qcl
31Xcb3PwAZXrqNxRz7Ojxj9Bcl3JW0veSL+TwHuKNstix66OL3zsbmp/ksqb
qdxJ7e+SPFHyVpI71xofmiP5ysD6hvjELRXbfJ1U3jR0POeFkv1h7hffAB9o
Y9ao0PGfB0uFfxzZtgbj+TkKNoB3V0lepvpXVL44s9wBX6HWOgndNAU/rNb6
4RzJHSte89poTnRS+QeVW6t+eGZ/HL+8jeRNsG9V/73kVpKH5I6HbYiLSb5B
7Z+qOKbSPbX/Q3yms879xHqm+pdVfkfnNs/sL9wHFqBzP8a2/5h7b+ncpipP
I75T8XrbQ+MtVZussC/RxR/HxuKO45rF+2hcPC98x66x178tdW6lypdktkWa
MrdqrQPRhb+r7fboI8kLqceH1vWmSr674jnDXMMu513N0LntsaUjl9ep/acq
14lsW/PN8O1gczKfW0r+Bl8wc+wJm/L+xHE54nO1OiYW9j3YGpgq2GrzyL7R
xtiAkf8/sYhjOaf6dlXPL2KcxDobV702byU5i/xMebYDAscDeW+8v7Y8s9Dv
mfe9o+Sxkr/V/fWS/riE707vdj+ej+oOC20PXa9n0r7s2Ovtud8p73afwPHB
8arfXPW/6dq3st5nvh/u61rJF6i+vur/UP3M3PNru4rxg+Vq8xD6qWId+xyx
yszfP77sLWrfL/Oz5JneqbG+DG3/3VOyPbm46ngbcbcp4DVVxzfOwDaQ/LXu
t0XFmAp47yLVt1f5TL4r1X8YG8vHp+M/fBHiWOk7Ltn+ImbSQ6cuDB1LOZfx
9bzaE5OqOl6L/UnMl9jvR2Auan+Bzk9V+49iY7XXBn4GH6IzVD5f9Vfm9jPx
N2sr9i+fSIzPXlPgvYekXk+ej72+PK7nsbrimPcLzE+Nd5Hk8SXHvJCJf12I
zq1af6HfJurcVhrzOPW/SeX/hdZ30zXGZfiWarcd/kHV8kyN90+Nvxu+n5t0
bKvyK5n9SfzKbdS+lX7/wTZXfRuVW1ddvkr9f66xvCVzpah/RP2/r9inPgv/
ROd+DfwfuN/HsL8q9qHHEYvJjL+CdcwAv838bfONY+ueKvlc1gvV34CtkToe
MT/2+nd86njtiKrx7RMllzQfl/HdSj45tX2InTg99ziMt7361I8cLyHWeD5r
IPiIrveDyj24hir6qv/LJfuK4KereEbMB75FydXQ8fbWOsYzd2Pbfui092Lj
C7x7MECwQPD6G/i/YDxgJRpjm8AxZGLJxPGxBXtovAurtgfBatCxe6p8l+5v
acU23ong5zqu4dlKHp2Zs/Fe6PglXI52qd/1q7r+FGINxFuxNdFTajtR8rXq
30ptxqj8tNpDGLlU566AL5EZn7+y6vgb8dX3VTdOYyzjelXjfTurzeVV47bg
t30LGX99r7JjIMRCHtUxWuWefIa6hzaJ8cVpOj9I4++i3xGSO9Y4no/Piu/6
lq45tGp9D1aFvXOKymsjPysweDBtvrkkdLyZb/HzzPyCO9Sud635Aow9Vu0H
oJvVpguxZI25b9XfdBoaM+dbR+cQIOebRxehc9bXGANGF63WeKvU94iK/ZH9
sdkrtgHgJxwe2x/Fx8fXP4Q1UfKRgX2IQ1lDC/sUrII4DfEaxmCswxLbh1sU
+PPf8QZXN1iPT1H1/NtFcruC80G8jXhASfJhVfNfdsTWDc0P+Se2/scHxheu
z/vQWAMD82ngPxBbuljy55E5Am+EjufCHSCG81uNdTCxnXMzzxXmFHMLnftf
jXUgupiY7vzQ8UdivfhTU9X+eMlvZ44Jvxg6vkmsGH8GLghz4A2VN0vNLbpY
5yao/t3YsbVLAn/jdVProuf1DC9JzHFYUcTn4T4Q018Umm9BrJ//C3eoRn3q
oY94Rmo/V/Vd1K5h1VydXPUNqv4+zpZ8KniFyv9VHc8lrtuhwGfGBI75Evvl
exxX8TubkNlfYW2GEwQ3aHxkbG7vivGH1yR3r9hHAW/i+4ZrdZza3Jn5fdEW
jsiXNZ5PxJZ7V4xxfKT+vVT+q2yf4qTc2EGTwj5cqPqe2H+qfyY2rga+dqCO
yaH9MWyF/SSvV/lqXfPeimMyxGY6JLan94gcr/8Uv6RiDBYsdkli+TNs91rb
b3Ur9gfAQsHXsAWwCVbHxquJlRNDJpaMv4gtM1zyf+B5aj+yYkyb+PLPVcfX
ibO3r7X/z7cGRtNO9Ydnji8z18F/rgXDqBjDAMs4MzXfA95HW/hR+h87V4xp
4W+dQPwT/CJ2PA18Gl9uoMa/our4JLHGoYUOhE8B/+PE0PyKzbmfsmPAxIKx
4bDl4Ayh//9JzPeBi9Cv1vNrLLomMB8M/gX8sdNDx5MY7+Ri/cPWRb+iS7fF
54vth+CPcE3sX/QH3IIeOvdLbFwBfOGZivlP8KEoL2I9jaw/9pT8EN+86sdl
Xr+PV7uX9X4v0/PaVXV/xOYTnUW8uGLOB9wP8HieFxw+uHxgECsDj7k2Nh6+
XdkcwD8L+xj+xRqN36XWfhf+F2sC9vPZmb9t7oF7+T329c9W/RCVL08dnydO
367W8VliE49pzBmR8R3wDXRKE9WtT40/MJfgjx2cGrvDZ4ZfdGBq3x6fvq3k
A1JjQ9hk2GZgHmCoP5eMhYxM7cuDiTyp+uMSc5Ww2e5R/0THp2XPUebqGOyt
wJjN6WBlkleVHHN8DOySNbVUYAaqL0n+tmSMFiwXTOA13fv5gbGC0aq/NLAN
gy3zS2bfmZjwryoTE+sUmY9HrOzK1LGJARrzNfW9Use/qusFpoStJ3kW66va
3KS2++r4pmQbAn1FTG3byG2ItU1JHRshhvIq3IfEWMEGnxfsOXPsHMzz58x8
uY0qfme8uzPU/obAMduLsS0S625stq9TY4YNIv9HsMRTVD8hsA2HLfcK+K3q
r0Nfp56j2JTYv8yXF3PHKcBg98uNCd+g57ewbKwYXiL8xD0D8xfBkK9T/YKy
sWVsIGxc7FfWL/Dd6bwvtb8C30LX/J/k7SXfkBhfvVlya8mTY8d8iasQXyEW
DM8SvuWQwPxJYkwnx45XEXvaLrUv0V/1czTeMal9Tdb8eZkxniNj4zNgP8er
zfjANu/nYLOpsSJiHPCVjpK8tuSYxHaSF+eOIxNP/qOwqbCtztH9bZobk78l
Nn8VrP50HdcHjuFfpLHeyI3bgt+Olbxtal+sn9rMUtttUvtOfSXfLnl+bgx6
seR9VB6TGtuFc/m06t9PzTXjmX2gcu/UWAgYBP4hNvT3oZ8XtvXU0HEO4h2f
qu2tGqM3z0ry1pLfTB27giP8lsrfsiYRW9O5t9T/HfCVkn2869R3RuK5PwtM
BN1QNfcWH5P3eZuOPoE5jHB/V2q8z0LHI95mzUkdG8JGeq9qzgAxKfhkcAmG
6fisZA41XOo30TGBMYC3MvNNDg7M4YPL95DkgwLHwOA2/lZ17AiMfFHmd8a7
Q2eCJ/xedSwJjBd7aH3VsSkwP/hWe6XmssBpgZvdIrNt+QEYhcr/Vh1bALPd
WPK6qrEkMJGZkpfjI4ee38011grJn4T2SZao7Tf4uGBLkluqfi/NnYv0/2/Q
GO+mtkmxTYkPwZW4JvG7uJFnIvk0ydcFxgjACuYlftdwiuEewzlpG7kNXJSl
qX2Xm1T/Xmo+ZVTxGs5azpxkbmLTwucGsyYWAf4Glg1HpF3kOQ13BE7y8tDv
GK7yMuy9kjk+zN+7dQwOzHneKbVNjW0NhsZ6dpXq1zPXS34ef6b2pcBYwNbg
VH8deo7Ctb4jNu4K/lqje/9K554pGZPle38jtS0NB3EJuiCxboJjDtf8w9Sx
G3TQR+Ah6v9UyZx1vj/WG7AZOOWpyjukxg6xKb6u+n0S92GMyxO/v4kFpj5Z
8teSL4n8TU5KjAGCBTLGjnzbkf0i/CP4unvm5k/AbYCfgw2FLUW85JvUayxr
LfYb3G0wRjCoy1X/SWpMEYxqguR3Utto2Gr4J8TuwE+YG4NK5ruB14A3DSyZ
f8maz9pPPH21+reQvCJ2/sK81Bx3/B78n/1zc9jhrPNMu6k8O3W+Q7/IeCYY
FjgQeNBuuTEosChiIrvmxiDAIojJ7JI7BwCe0874B7kxNLA0OGAH5sa8wH3A
f3bPnSOwUWGjdM8dzxquez24ZD4tGBtY223Y1LkxCbAJ1rxBuTFpbCQwsb6Z
MWdsPjCRPTJjOuDU4NVgPcTzmUubB+Zj70VMITC3lPgdzwg+Kdxinl2zIibJ
mnKs2u4YOQcDDPCG1JgP2A8+zCm5MQ+wD+LlcMnOqRojw+f8oMAEsIuHFlzd
i6rm6N2Fv5iYj4CurheY3847AFuGv8m7IcaPTzJK9UfrWo+q7rHYOg5dBx9h
f7U9pGT+NT4Xvhfx/HqZfQJ8A+KTcWYO8nexOU1wmwZExgjhg85JzcE4Ru03
qTE3A/7QTtirJfN7iUERiyL+9lPVGBJ+JjbLwNwcA7gGoyUflZsf1xV7uGT+
aSPVPxg73wG8Gf7Prqrfr2S+JDkbYMSsAb1yc7rhIcGB6ZObYw9PEL5g68Sc
YHhd8LvqJeZUwRmCzwTXihgJMRriHeDZcGrhacHXqp+YE39yYaOPl/xC7rgq
8dV9c2O4YLnEvHbOjZdz74cGXh/uU9/XSl7D4GvgAxLTIT6EbwjnE84T8ZfR
eZGzU/i4F6v+isi6E/04LvR6fWVknXo13KHU+UbwAVivG6VeO1hDJiZejxgD
G3Zq4vV5auR8g2slt1b7GSWvTzcl5nTDa8FGuCixfsYmI5/lFuzvquO1zDf8
X+5ldsnrw9mh1wtsRvJdZqr9TbH9YvzjQ8Fmq+aqEBO5PjMmCaYIJ3ikyntV
7TfiP07KzKdCt8c6Rqh8QO5vB2wZPAr8A2483+/22BY69oAjI3mnxDkf5H7A
oZ1fdQ4EHBreR2+Vn8zNI4JPNFTlR3LzNOEwDkZ35+adwT8blpt/NEhzY9+S
+bz19fyuL3m9vywx3kOcvZXkHXPjJ8TlW0reITeeA68Hfk/n3JzaKLJ/A9eW
b2Zv1d1VfEvEi8nFOSyw/QFuCn7K/Cc+Ah8HfBXMqm5o/BIeCPbXTrnt16fw
sWuMFYKRPoiNV2PsFA52Ve3blszN7paauztM/e9LHL8i12uvwO+L9Rjbm1yi
ehrrx6p9Y3KUaE9M/iHVLS87Vv9r1dwmOE4LMtsDPCueWQNia2A04Jv47Kn1
xWbcf8n+y0OSu4XWh03Ut2NmrKYPPnzq9/lPaPsRexB9sC60PYe9CGcC7kS9
knPDHpTcFS6FxmucmLMKB2vzknPJ0C9rQ8cEyRV7ODdPGgyjaWKMHIyR/Cmw
czB0Ysnwx8HWmc9vRsaXwd55v3CnT1f/fsXzhvsOp3pA7hgG3HU4HfjPrGf1
1L9zyf7q85IHh16TuuA/ZY43wxmEO8h62yRyPJ1YAPZQnZJ1zvdVx0SIvRP/
IlaCvlofOp5HLCrPzHXcUWP2Un0181qwg+Seqb+HvpH176zU/uJBkfn9j6TW
hwdG5qs/LHnL1NwEOAo34z8mxgqJaa5Nvf6tL/DNzzLbGz+E5rN1KeyRuZF9
HHLxsB++Cf394190Ts09AKO4I7G9lRR4886p8WpiT+RM9cFeKvB7YjbEcrAv
fgz9jLAXn4vN4QK/30PyfarfLjQHvVbtZ6aOnRJD/UzyvarfNnSMKEOfFvFB
cphWqHy/6juHtm9Yv8dWzcsH4/8gMwcfLv6x2Kyqb5wZW+ym8XdPbU81i5wv
QqwP/3BkZP7SQzzb1FgWMdhP1L9+5rW8C5iB6s7WsUnZMSTiL9hLHSPbg8Qq
yQetW3YMifgYOXbkrZC/kqZef94M7b+TS0qOEnk65OuAXz2Rm3ePTdu+WC+W
hPbnyQ1Cnw6JbK/djX2bOheQnI4fUus4dB2YzgjJj6t9P/V/Uv23Suzv9C6Z
U48/c1zsOC/x3pWS16TGqonZEnsH0wDbWFOsd+A1nVjbsOlSr98vh7afyHUb
kHitIGfqddX3T6yLwRhfK/xLdAk+6V9V2z/wvOF776xn/Xli7igYXk/0YeJv
A85878w5VHBCwdzB3k9N/G0mZfOFyAEjDkk8En7qssRrCRz8Xuo/MPG9kvO1
QPXbp45lE9OGO4GORlefrvbPFXgPujKQfILkHzRGnxrnzK1S+eXUWCAcn0n4
m6nnApzw31Lb4+siY1DEusG38CXgiINfvVT0B1ME25ycGpuGswI/C/u9deR3
hn+Kf9Ay8jsn9s36uWdk+/MeyVekxr7BuMgHHRObJwxf+BeulTg3AcwrTcw5
hicMJkduJHgQMWEwtUNy4y9w18hx2JDrIPmRwDlLH9E/sW26Pd+I/t8biXMz
wFh3kvx2YtsTzn/XzDlT5BWQX0Au1bjEuRlwmOEygyeim+Hsgbdhvx1UdT4B
uTz4A+Q9wNnvlhm/g3s2i3ig5J5aM8+sOv6F/Q++gm01GH1YNZ6CrgNzw9/m
ecxR3TYab0ZqzAnsCQwMLGxu4txedCK68bzUvtSdxfeGv943MMd0Hfo3te8G
p3RVaswC7GJi2fgS/vOksm3CVip/nNoXRae3TY1hYCvSBv8afIq+YHxbpOaI
EYsjJgf+9EXVvh+crH9Yj7G5y57TzG3sQ3jxcNRYL9AX3Ds+LPMHPHZmYI46
7x/8DW4sPv0RuW0QbBGewb8pSln/o2w+/A+6dgPV/6zv/0Odq2Rej94oe01g
bShnrsOGwZaBUwO3Bk4r+EN99V8desxSZnzlsrJtbuLDDVPbWuScgOeAT1xc
do4o8T44xnCNb9G5L1Ln1JNbf7vkrySfkLgOTht49YmJsUswSbDJkxK3BeME
6/wcnoX+/1z0U2pOfWds8MDzEw7lvbHjI3ArsSfxxeAM3ZQZX8L2x2YH72N+
07cT7zA1vjxL5fWqPy41fjoDXYFPI3lF6lycQRrvYL6X1NgEfMJNU68ZrB2X
lI0vNkkLrnLZeBT4I3VXYDOm5ijDVQZz/Ds1pxRuKTlD4GHYVNhW3AP4LZwH
uA9zi/Xg6tRYwLxCf9StdZ4Q9/it5OWpsZaBut+DMtts2G78R/BzMGWwZXTS
FYV+vLdsf5718sfU2Ak6b3KxXpA7Tr732sTvj1jDecX7JQZLLPaCsvU3eD/c
SnQounRR6ljqRPVfrHKzzL4UnNjm4JGZfUt89r0z42twoSbp/s/L7MPiy5Kj
+V5iHxVflRzPD8AOE+eGg1l8n3g94V7I8f7/9e98yWdIXpc4pkxsmXOsh2AU
YBXsCYA9Bd71Qeh3yLvcsMdFaE4weC35c3D7G6r9g4nz8VibWKOwb4gXwD0H
Mz4sNx6NbwjGD94Hx3t95BxluN9gZGBl5AMRPyUfEK49OXcTUuN1xNrJOXg2
Nb5M7BzOxTOp4xdwXtnP4nB0eWJdTs7ru4lzqHaIPGfIrQJPxfbEpwI/x4bB
luEbXlK8r4vKzmnPC/1FbBsO33+Ss9S+Hm14n2De6AM4+Xyf4Ok8Ozj7zG9i
TLcHnmOsvyv1LG+JjKmin4m5LCz0LbY0MZYFhT7GV98ls68KJrKryq0S2yZg
dF8n3rOAvQvYn+He1Dl8O0fO7yK3jxy/PpLvC5z7x+YGYBtwohem5rQPBn8N
zHWHIw+vFH4pfKIhmXNx4czvqfLQzLELMLph2C+Z++IjD8qcQ7d9ZB1Obh2Y
DNgMe0gsV7l/5r1MyNkckBlzA3sjv5v48901tuWw6ebVmP8INoyPjD4bAP6q
Z/iE5HYa7/rQcW3i2+QioE8vCswBJh60ZW7fD58S35L9BeDe9C7sJfjQYDFw
cLCXjsttO2xSxOfrZMZ2iBHj38LZhhcMRxOuJvoa7gc5Xs9m5kuCLZGjhr3e
peDowHkkttsut2+Lj4mvyX94Vn2fqPq/tdW5OwL7rPiuo/iGaxwDHa77W0sM
VvLD+OVgedgrNc5JIb99WGI+H5wTuCdgJmAn+Ej4SvjT5I7D4fk6czyZ2CA5
+vBFHsjMBSenmdzm1ToG1TgHbU5mjAashnv6MTN+Cb6LT4RvhL1OrggcNvgl
92X2bchRJld569y2Pz4FvkXH3O8SnwDfADwT3hb8Lbiy3M+Kin1gfGHWI/aK
gEP0sORDdI3FFeeEzM/MpyPXAU4a3DRiHMQ6GIP87JMzc/HpQ77IosS23B86
nsq8PwXYbM/Cv8NnxndeVHG+R/eCc8YeOXCF6ENfOByLE/P18F3gJMJNPDhx
30TjPUf/qjngrBHEg/EXpgTm9OHPT9fxWsWYG+t518Rcbjga12TGLMAuaDND
5Vt0LKgYcwF7AfMA++DcrSrvmhgLg+MD1wcMEiwSzspVmTkvcF/g18GVZr6B
XbBnDO93ZRF7AHPqp2f5t+QrK87xgI8Eh7hj1RwzuGZwquEVwC+Aa028e7ca
zw/8jVeq5hrBCWF/jW1zY3dgHmAf+FfNK8aIwR/QYegyzuFv4T81qxiDvj21
TkO3cQ5/Co45PCR0Nv4Tz4dc6inF84BjCdcSmwHbgfdPLiI5qO8X/l6TinN0
b0udo0leBN8E+Avvj30NyFkhd4X4ZcMaP5MLM68/6Hv2ZMCf2FTyrZLrV+yP
EI+7XPKNoWPH6HO4uHBy8TdbJsYi4ZT34dll3uuEfKltEmMuYC9bVax/wQjA
CtpVrJ/JwZ0SOf+W3FzyO9gbgPgF+VQrI+eqkfNGPgbx50kq3xA6f2e/qvNb
sHHg9+EvNdDY7XTu2tQ6Hd3OOfwn1lTWVvakwv/he/+mYs4yeMaHmbme5Aiv
KfwheJ+c+ygzPw3uAv4k+z/AQScnAk4b3PTPItumzMm6kTk/5JKzBwtcIPgd
u9fYB/4+c846+cdDiuu9mHr/CNrA/4CDxF4v7PECNwnO466BOczgU3CO7iNe
VWMuEvc/pLjeH5ltFmwX5jT8DeLz8LXgtIJfESMhVoLORHcenpgLB0f4lUIf
8K2RQ0Yu2aGJYyPkCL5U6LNTAue0kdsGJgk2yRwjPv5ybN+BPuTLE9MgtsEe
CeBN6Bh0DTkPfM9gkmCTm+rcqyofnbh8jurHMp6OOjXmtMLX+yIytgBeuXnk
PDV8X/B6+L9wNuBuwMFi/xvsA+YeHCtyP05PvfcCc4D9KIYn5ovDCYUbynzd
YEuExrrAjDbYDqGxpHFg+jXG9MH2wUA/VPdHC/3A/Mf2ICYDFgkmie0Mp+XF
Yv7CTYVD/31k/5XYMDFdYrtgEthSYPxgFZMi21rYXNfGzrHCFsMHJh8A/im2
Ojr3YJUnR67HZrs+Nia2QPd3f7GeESsmFk8OHvsFkb8AN/qfkvO7yRclFg9f
inxT8lfgrv9bcn44WDHPGsyB50/+H/l1cIhbq65VbiwSzBLsEgwN/XlfsX5e
XHANyBFkP6azIvse5Bizv1CD3PtlwRGCK9QwN18dTg/cnvq51244Q3CHwAvg
ohAjJ1ZOTgu5LfjY+NqV0FwT4lPEg/AZ+P88B3yJ8yL7fuRYwv8BI8PWOCE0
dsZ+Oi0D3zM8CfbzahEY4+Mevyhiyfi/+MHkO4Bv4D/iR5Jvh20IZ4B8ufMj
+6bknMJHYv86YhvY29jd5HsR2wBPAFeAnwO3YUXo/DH2O4B7Al48MnbOHOPh
85Ivwv4T+D7gueC6+NT41sTFiNXBeSB+RwyOWFyP3Pld6DR0G/4C/4WYHLE5
8h3hnrBm11QdO+DbA+ND3x2YOD8OHwxfrByam0N8j/jgyMS+GWsua+9BiWOT
7H3DfoM9c3ODsUGxRYmxYs/8Gzr2SvyHWA6YB9gH+TvkghPPJj/+8QJ/jCNj
2eT7kMsNx5f8n/0T5xPDAYcLzp4EYDHgJ4w5IjFWD2YP1xxOJdgLGAxzqHVu
7B0MHSy9JTGSwJg72Ds58/B9yAnl+ZyQm1sEF5n8jAPwLwLv6UU+CvFKuLrs
6cDeDuTYYxvBIef7JVZN/iR7OrC3w/3F/bLHBe+bZ8az45nDD4K/+EHFnEi4
kfsl5rbD2Ya7jf5eUnEO/IuZOfZw7Tk3u9D/cPHRseha4p3kuZFDhT39QOL5
BAcNLhp78LBvAfsX3KH6uZnL2PjY+sR0iO1wT/Ap900cWyHGAtc+Bm+reE83
8g3gm8PVY89J8hPg47DXIt88+Q1VHcsr1jGjU2OUxFtZo1mrT8zNlcGmwrYi
RoI/dVuhf4iJ4K/MLN5Xo9zXguMH14/9IeBWEoNg/w72g4AbScyC/UOImeAP
3V68f2Ju+Ad3Fv4RNiC2IDFaYlPk3JN7zxp7dNX5DGAF2OPkfxDjYz+4uYX/
RAwR/+KOwv87LDbWBMcbrjfciZVlc8rhlr+MzsG3LvsbIacNLA5MDhzvCB0z
y+ZEw41mvz64P+RMEH+aWmB17PnD/n7TI3Nv2SOEeDaYANjAstBYGOs5e9/A
SYebvl3VuUXsAcJeII/E3g+CPUfYe6RZbq4gnEPsR3Ic4acRf/1PY34XOfZA
Di37j5GDz9wlh4b9rsDHsUXbqs1VabE/Q8k+M3xIOC9wX7A5d8+MoYGlkcNO
PhocZ/ZYgtNKfABMEGwQzhn79x2CPVYxxx2uO/xEeNbwrffPzIc6JvZ+afDT
4CudFJv/Df8Vfso9sTlb8IOJERMr5pmzvwCcArgFYLrEF+HrwG2aHxj/glMF
twrMGbyGPQ3g/cP/Zy8vcvjI8yTfk9w+dD65w3A0WQvYN4nYwqWB88fBa9iz
AU7ntgXeeGxsHxNfAn4fexDBwWhU4L1Hx36m7HfB/lDgCfgo7PcD/sVeB3CS
L02NXzCn4KiOKvAY9hpgP5dVifeZIjY2IXC+PvtRsB8UNnt73nfVe8XB6T8i
c3ydvRjYo4y9ytj/hFgTGA37YxEzJHbInCf/lBgkscjvy95frGHmverYc4y9
x8gPAJtZGNj/JP5I7io5B0dm5iTBTcKHAY+Czz0e7FLHaYW9eVbgHLJXC/8W
rHpy4b8SjyXPn3x/9upjPxJsJfYYZK9B3hnvDs4A+63BAYALQI4Q+9+x/w37
M4BJsZ8D8VX2SiNng71RwJ/Y72lQZK4Q/LphsTEK4onMSeYmexw0yczH2ye2
joSvSEyc2DhrRpQ5Zk7sHA47fEL4gNMi52uQy7lP5r1A2fOpZ+I5xlxjj5rf
1TdKbHuTk0a+CvEw9uDBv7omNd7PHh/EG+D6wM9kThJTeinxHmTkbZG/xd5q
7AnGviRgpmCn8NvZ+4mY3uuJ8xGI5ZIDeWZm/ihzihjai4n3DCMHDUyMvfbw
AdnLAU4yviH8dvaOIia2AFskMpaMm8D+iuy/Q2yTHCn+H3gre1cRY3snsU0x
JzbHBFtj79xzCYwRrBEM6/caY1ZrC/+L3A/2o8xyx3vhNo0Jba/i37LXFBzj
Dqlt0LmxOSvYpsTf2TOONYS15PjI2L26b9jPEb4pe5jASYKbNCJy7gs58/uF
Xn/3rno/XvYnAN8g5xOf7OTc8Wn2wGL9IvYO3sneYcQc30rMHQN7j4Ni/9Tc
e0uAkYOVs6cEe0uQQ0EuBfkL5CHBcemQOaeGPHry6cm1mZY692BWYPwfPJd9
jIhJfwG+kTpWSMyQ+Cd7xrB3DOstsf/pqWM9xHyIF7AvE7FN+L7sBwdezN5v
xKS/TBxfog0x2YWJ+fXspcA3ebDKn2bmjmIjfFN1PG5mbPsbrhD5CfiM5Is+
pf6fxM5LJz/9+Mx8IXJu4DiNyj23iD3DZ2Y/PDiVxGLAUMDv+Sb4NsAcyM9g
Tzf2FSIGQSxiauq1DIyFfAv48XCmiKHckzg+xl4jcF4yXf+MzLmr5OjwPbAf
BLn27MnJ3pxLq44lkMMMPw4bGTsAe2Aj1U+p8d6YxJzPrfEeEth7rNHk69dm
bosN8Q+2fuq9OMnZXJGYgwoXFR1+Sep4Du+mR2QuInx2cuP/Cm0PEi9aXXbO
CYm32AfE5piP5B/D73w8ts4m147nzb5aYFrgka+kznVljOaFfkfXk5NH+yRx
LjQ50cdm5pc+HZujgv6Ev/lk7Hw79gaB7zqsapsWPIM5ylwFM4MfAV6OLYJN
Anee+Fb7ives65GYcwP35uey+fbsLwMXnpxA9C982xdi79nE3k3493CPGIP4
GN8M3KmrQ39L8FPZkwB/ZEzu/UX4do8OnC/EnlHkL+ETsR8AOUr43uy5Q34S
c5K5uVnF/ADiG2Br7KnXPTGf+NvYMRDwDfjGy2PHMNgbgz1tyEslh4B8JPIJ
+G/kKJGr9Ce2fsV7Eg5NzUfgWthI2ErkRJAbcUzgfCfyCYmFkUMIPgsHFy4u
axjxE+JBbSrec7hTEU9pVXGOGPdDPKZ1pdizCCwp9bfImkx+FfgH3AzGIJ4E
/gJ3hz7Eb+5KbXswJvEZ4o/onm6RubX4XPhecLzgVxEjIVYCxwJ77/8ArLUB
1A==
           "]], Polygon3DBox[CompressedData["
1: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

           "]], 
          Polygon3DBox[{{3116, 1454, 1355, 1214, 1213, 2344}, {2384, 1389, 
           2193, 1110, 1113, 3066}, {2381, 1384, 2223, 1182, 390, 2569}, {
           3188, 2202, 2236, 1170, 601, 2352}}]},
         Annotation[#, "Charting`Private`Tag$9586#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {GrayLevel[1], EdgeForm[None], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtkztPVVEQhfeBc473kuMDTWx891r4E7QTtYBGGzUxAprIvRoUDGrkFUET
GxK0sLK0Ua5a+SBRTITSTvBRIMYH2AFqCMFvZe1iZ82ZPbNmzprZe05XWyp1
IYQ2Tj2nPQ/hK/giM3YkIeh+sRxCI3gC/4fU9jvsvCGEeeytRQg1CI5yquQs
ET8b41tzczzHvlY27x9whdhmTgeX1/mew/8PvBpzxXGjbH7V6cVewC5hPymF
8Ig+zmSuoX7U1zIxm7EPgJ3U3YA9j/8TZwv2FLH14qLHI7HmhcT/nuLfGexX
zCXyvxSu2Z+4xvHIcwWcSV1rEs7f2Lux38sGBxPfjdDnMe7GwL9l5x4ER/F9
Ey+YU6Mb7MP/jLin2EucFP8iMQk4hX8fdgsxA4n9uzinMv/D2dw6SLc27JNx
fprnG3K3YzeROxjrqr5mdT5xzgQxO8DDxKzFuWwMnqXiFKM5yS/tPqo/fC+p
M51aP+3Mq8z+z6n7mI1zn4R/L3Yz/KtxT6AJd/i3B9x1gxOc9sy7JB71eQ6O
i4lnIP2HU+vbAfYQV02tj/Kkv+ZQSbwzm+KcpPkA2Jk4V3PZX9ivmfTm1lOz
U1+12Nv9kuO1M5XMGv6C5xZnhIDb4OXctfQWunL3qX3ojzp3gdOF56GdbAPX
4/+Jf6gwrzRZSK2/dk4a9yXW+TU9bMN/iJibZfepvWglDwjfyRsozKvZSc97
5NQVfifqZ7Tkd9cY37Hel7QZxz9TeIe0k/2Rtym+O+3XW2Luxh5+pOYSp/5V
s9E/jkfdVuM+aRfn4m5IwyHyHpbcl3ZgOfVb1ryyBr99zURvVz9V436dZptZ
E2kjTdaiLsPxTm/hcerexmLMStzb//iioho=
          "]], Polygon3DBox[CompressedData["
1:eJwtlM1vTVEUxU/bc6/7nqdpKzFBMGfgT2DmIxGdGKlEtCXpew9VQonXvraK
SKQJE4kwRFBNY+CjCZW0BgZmWmLgI2loZy0RE79l3cG5Z6+z99nn7LXXuVsO
V9srjSGEfYzI+MmnzEKtIYTeNIQ9hRA2sv6D9XophHPMm8HD+EewR1n7xbyV
tdkMm/jj+L6BL2DP4Z/Hf4K13+ApYqrYX/D3g0cYZ/E/YPxdHcIN/Kc5d4iY
VcUQDiYhfMBXAa8Q+wZ/i+7JuAi+Ax7Hvx58E3tdyb4+ckxjv2X/EriX/Z+I
OwJ+xPyQcZ34mcTxyq9zZsGLwffVvV8krqWJ8RE8zZ7mYG4+k/85/q9gcTiH
fwd3agveq9qbGROZz92F7z3zMv46+ZeIeZaYix5wJzmnwN/BQ/hus+81Yw24
KzH/4mQYX080V68YLIdO/IMYOzljbXCt8+B28LbgHqlX94gvR3NyC3sZf7nB
NZzHjsRcje6JejNDzAT2E4mj5B4qtiNxfeJYXA+SI+FufeB69B22Yw8UfNYo
ayk4K1o70lAN3xXWx3IsbSmHci3mftUrLSiHcq3kWptknszMv3ojzXWn7peu
ehJ8FPyn4P4dSsyHcpyJ5lC506J7sSnX0/6C8+ucS+K7ZI1JW6pfGlWseih+
1IOxzDWptlrqei6z/z7rDeypRnMqbqUBafVxtDZUr2rvTszlbvwbwAvR/dxb
8FscYERij6WuTTW+ZE8jMU8BdznrWsn1Sutt+fuTnmWLQ70r6b01mGP17R37
OqJzKJc4knaUQ7mkcWldd2gquqfSqLT5v9cl/xt0Z2lVepFdScyfaljI36e0
Kr3rrUhzXanft2ZhaVFvXG+xJf8/6PxTqf9Benvjmf874lu8658jXzWxvqVP
vd3WXM96b+JXPVFv1C+9nQPR+/8BlXar1g==
          "]], Polygon3DBox[CompressedData["
1:eJwlkD9LAnEcxp+z87jEBBGaKmjXoZegm3+WDocmA7GsxZMIBafA4SbBSYfe
QWO1KmhD3eBLcAxTdDNp7HPe8OV+z+f7eX7wu/Oq6zQikpJMlFFcGtjSjymd
ED855w6la5Z3lvRgSH/kOfsy02K+8UbsI3SH+DtYBjazQzfo3NMd41zgtJl3
nLRCv0fO4lXY1/Ga+DvyMbwO2+B2YVZM8skpelcwj3mmX8I9g63Jj/QP8PKw
Gm7f3j9JE74Ghy3nJ5wXcofs4LnRsBvc4cOLsFvYEpaAfcAKsBvYAnYEm8Iu
YQ3YCnYK+4J53PlLfmNezfD//QMFGS5d
          "]]}],
       Lighting->{{"Ambient", 
          GrayLevel[0.8]}}]}, 
     {GrayLevel[1], EdgeForm[None], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJw1lElPFFEUhZ/VXV1dncL/4EIRTTQC6ophiSbGAA4xjI1omCILYmLCz3Dj
Qpe6EYc4NCqyUcCYqAyicaWy0oWzO8PC73jKxct5deq+e++751RtG5rsOheF
EIZZBVaahfCiGMKXNISjvDi1JYSn8Ktwy+Aa2As/CL/C87FSCE/AhiSEfvgq
/CrPffDrxM6XQ3hZdPwrMGZNUOg1MQPEjMK3cHaeuvfiEPaCVfgx+Fb46cjx
g+Bp+HH4NvjbxF0lfjs4wLsh+DVyfk3dzz6wibXIfg8xmwXn+Z9vM+/hIf2d
p6dLYA/53sMNUifOfPdP5GhmLQX3doOYZ+wPg99Tz6YRnOV8lTwXwd7MdVVf
taqR+z9b9Nkz4DjPkwXf50fq2baAjzl7N3bPi8QdIW4JvFnxbLvorTnxfY+z
v1z2bDvZv8usxzfy3Ko4RnvVmYhcawfPNWrtyqzRCNyVsmcr3Q4krqFajYnv
chCcy1xrmV5myn6nmO6S+33D2S5wN3FTxJTBGmsmdq3fqfVpB+/zfB2+AfyZ
2ket4K/UPbTlPf9hbQT3pz77S/bIW7hucH/qeU6R53NqvaSb/KG7DpfsIXlp
qGSfyW/St5fzH4L5dviPwfFJ0bU38j7Uj2YzTd6Fov2gvv5px0zr6uzjE5ln
p3jpcie25pqd9uvwnbHvMRLZZy257jqrvkYj99Saz+Qk/CN0XJBPK/b8NWZx
IbP3pK90luelhTyiGeq+sxXPVnlr7B9UPBPdRZrIz4di6yCvdoD1iWfYUbJe
itc5fWfyTLtmnrg36a4ZaF7y1tY6f7fqWZ7Xd17N/xM9kc/US/tg3fW/0Heq
Wk2J59CZ+64v8hx3wj8nzxx3Xsn/P/oP6X5jkTX7C3yZoV8=
          "]], Polygon3DBox[CompressedData["
1:eJwtlLlPVFEUxi+TN29mHg8TWzsLFzTRiKgVMCWaqAFcoiwDiEQGozHEyj9D
CwtttQCXqICIxMjqvqColdpp4W7t8vv4pjh5555z7lm+8923uvdk64lMCKEN
iZCrSQh7MEyjfy2E0BqH8AjHQ2R9LoQ6bIv4eqtC+I7+GZnGdx/5Ux3CVBrC
rmwIC8Rsq9yv4147Of/hb46dezfnddj7OA+S6zjnIuez+RDG8JfIN45+kHwv
lAvfipoQRjkXs45ZS/5PyCyxM0g2tUhXT+ptQ+rY5bzoXdR7i28JuYhtDbZT
6JfQr6Pvx/+S+E76qafmF3J0099TYgr4NyPzwTNq1inuvcJ3jJjO2DNptjls
w3ljMkP8oSr3Mw6+ZfSe2PN08x3g/IGYdnL+rXb+kaz7TZBFcj3H9oP7l8l5
NDK+V4g5wv0mapap2YS/LTZewlu4jyXOX8JeQ713qefSfFuIX4i8D+38AXo9
tiXON8l9N/UO33C+VZlXPWhWzazehKGwfB15/t7Y833kTkfW+xdvlF/casF2
Br0buZE1J9SrMBbW58l3mlz3kHPoB1LPvjXn/huJGch4pp8F70tcLGHbTsxh
cpYj71i7Fp596EPIRnLVIqPBHBKXJvOeW/2pz9uJc4njv8m/SvuPzBFxpUHz
Z4yBsJhIPEsPcifxfrsy5tAv/Cu5M5H3XEOp96U+VUO1ZNMu+yPHaifax77Y
u9qEzHHeWdmHOK/zcKV/YfaEu48jYylO6a2oB/UyH5mPyqldC0Nh2ZExN1RP
XOip8nvXPLPENpN/MjU/3wfP3MC9IjGDGb9Z4aP3LG7vxVaL/1piXZzX/6El
9m5VT3WVc0fOmKmW+Kra6ld9i8Pisjgk/PR/EJeW+Y3/W8H7FoeFj2bW7PpH
iWvCSFjpDYnL+dRvRm9F+x9Bfxa5pwt5Y6De9GbEJ/Wn2YVxR2o+622Kc405
c0q7Fybi2n+W77Z7
          "]], 
         Polygon3DBox[{{3119, 1460, 1363, 213, 2356}, {3159, 1633, 1854, 617, 
          2366}, {3113, 1451, 1352, 196, 2343}, {1617, 207, 1232, 1231, 
          2204}, {3114, 1452, 1353, 197, 2342}, {2535, 345, 1831, 2219, 
          3195}, {3115, 1453, 1354, 198, 3070}, {3118, 1459, 1362, 212, 
          2355}, {3158, 1631, 1853, 616, 2365}, {3192, 1119, 182, 1445, 
          3248}, {3109, 1445, 1344, 181, 2330}, {2542, 1620, 1833, 591, 
          2735}, {2355, 212, 1458, 1847, 3164}, {3254, 2195, 1121, 1124, 
          3070}, {3187, 2200, 2196, 214, 2357}}]}],
       Lighting->{{"Ambient", 
          GrayLevel[0.8]}}]}, {}, {}}, {
     {GrayLevel[0], 
      Line3DBox[{1021, 1, 945, 367, 2238, 16, 2244, 31, 3067, 1195, 1145, 
       1163, 1135, 3194, 2218, 1161, 1162, 1146, 1158, 2224, 1111, 1132, 1157,
        1143, 3078, 1160, 1133, 2217, 1159, 1112, 1144, 1155, 3189, 2206, 
       1156, 1173, 1154, 1142, 1108, 1245, 4, 1243, 3, 1241, 2, 1637, 364, 
       1021}], Line3DBox[CompressedData["
1:eJwt0ktLFFAYh/G32+joSFEt3PoF3Ae2bFWLCK3U2ihRFmiIRGZTuqog7Yp2
8ZLZqEUqXSyzFL+BqzI1S6gWfgJx1+9Ai2ee//u+Z845nJmKhpZjzdsiYgo/
d0bs4l7uwyM8xhNMFkeU5iKeyv0YwCCm9If4GXLmw/wcI3iRMC/wKMYwjjd6
Zda+lF/hNU6h0tmLZgd5jY9wvjTi1o6IerlL7pG3zM6rv8pF2Yh2+Y9cLN+U
s9zHOR7lj/aewQff2+PcT+mO8ix/xhfk9Wf05uR5tKvH1QtyE5bsU+1xvnMN
L/OBoojG7REZ8+N6K3pb7nFG74R6VX2Sf3Atr/E3a7vwEJ2YcMYD3u+8s9yG
e7if7mWW527sM7/G53Add9Ibm9/lVvSgAbN6e63tkG/jKhrx3tnl3qPAJdzL
3d5zxH1vyG1yXr4st8odcsa6pjSTN+1bJ2/wYV7lKp6290VMq3c797RckOu5
Ds3pDvrv9GrTO+GSekh9Qa6B4+Ivl/BvzqY7ZNzHH/No+l3Vh3y8la/orVvj
6eMXZ/7/b/8BOOZe+A==
       "]], 
      Line3DBox[{1255, 12, 2192, 1197, 1198, 2226, 3086, 1199, 1200, 2208, 
       3079, 1201, 1202, 1203, 2228, 1204, 3191, 2209, 1206, 1118, 2253, 45, 
       2249, 30, 2564, 385, 1023, 15, 1019, 621, 1259, 14, 1257, 13, 1255}], 
      Line3DBox[{2330, 181, 2343, 196, 2746, 609, 1029, 211, 1020, 635, 1361, 
       212, 1362, 213, 1363, 214, 2196, 1215, 1141, 2233, 3089, 1126, 1125, 
       2215, 3080, 1139, 1124, 1121, 2231, 1119, 3192, 2214, 1137, 1120, 
       2330}], Line3DBox[{2354, 195, 3069, 1217, 1218, 1219, 1220, 3195, 2219,
        1221, 1222, 1223, 1224, 2235, 1225, 1226, 1227, 1228, 3081, 1229, 
       1230, 2220, 1231, 1232, 1233, 1234, 3082, 1235, 2237, 1236, 1237, 1239,
        1130, 1370, 222, 1371, 223, 1372, 224, 1856, 620, 1031, 225, 1018, 
       619, 2368, 210, 2354}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{2255, 2446, 2581, 2447, 3302, 2254, 2448, 2584, 2449, 3303, 
       2256, 2450, 2587, 2451, 3304, 2257, 2808, 1502, 2590, 2452, 2258, 2809,
        3272, 2453, 2593, 2454, 2259, 3168, 3273, 2455, 2596, 2456, 2260, 
       3169, 3274, 2457, 2599, 2458, 1944, 2911, 2810, 2459, 2601, 2460, 3377,
        3179, 2261, 2602, 2748, 2603, 3389, 3034, 2262, 3062, 3032, 3061, 
       3033, 3388, 2263, 2171, 3037, 2264, 3214, 2391, 2265, 3215, 2392, 2266,
        3216, 2393, 2267}], Line3DBox[CompressedData["
1:eJwVzzkyRGEYheEjoIwhuUCgSpsVURtyiaCLjBsrVmRuQy/CCiwB3WYaOzA+
N/jqnPPe9w/ucLG7ttORZNXddid7PclYb7Iv2/3JDXagV7BD+Y41sSN9HDux
510L+7IX9MGBZEI/5tzh3/pbZzJZ+tg9VvCuXN2ewk/lAz7k7Y99Zk/Lc/kr
P7ibfcmffoHNyEbp8Ld9e/R2Frt0c24Er/Gf8Kp9rdd56+U/6c/4hl7lNe1F
Tku+4I2uZMl+1T85y/pK+Q/2KH+LV7i2/Q/v6jGT
       "]], Line3DBox[CompressedData["
1:eJwVz0kuhFEYheFTulKNMYamphKlGlsgYQcWwAo0i0BINCNN9JaBYiEopbRT
j8Gb7zvvuf/N/SeWVhaWC0kW8TuczJeTOfSqyY98W0pu0Ja/5Wv7ZiWpjSQt
7ot7lJ+wgSm+yX/yD3Ibp/K6eYgDfOjuzHuc6NbMfeyhp+tyFXsVs95SNkt4
1026v2gfRks3ZA5inO/qd+y7aOoG/u8vJm/8ln0bDX7M2X57Hzq6K/9U50f5
Ahe88g3vOMaM7tKZF64uH6HGXXDPXEc+t09zZ+aq7/8A0iIvdw==
       "]], Line3DBox[CompressedData["
1:eJwV0DlOA1EQhOEmQGJzjmQIOIEJwDFCHMA2iy2zG0zmMcsN2IkQmw9g4ASI
lB1yiOEIEJCR8U3wq6q63uunmaFas5R0REQZf10R770RH9jGSCai2h1R6Im4
oSd9EbO0KN/SU3mOluQx/gwN99q4x7zuju5g1K6GPuEv8YgF/QNNzPP6Xb6J
KzxjUf9E6/qsvp+f9NYnjjsjKvIABjFt9oVfZ5fcm+L3zPexnu41z9nxyi/r
X+gBDrGRoh/W13Q/8jWK/scR/caK+Yyd486dY1UuyxP8Berpt8pVvoUtd96w
Zr5J/wEwYjBm
       "]], Line3DBox[CompressedData["
1:eJwV0LkuhGEUxvEztrENY499xlK5AQpE7FujoZOYMRrhGlyFhIYGg0osnU7N
lYhEI/bfFP+cZznv9775slv7a3uJiNhEVU3ERV1EEbvYqI14r4+olD/gmp5G
BX2PVf0bP4VyfsiZYazIx1IR5/QZynSDZgGPyYhl/QCdRUKXMXvt7/jOk66f
70PoCrIe3TbfjSV9l7mOTvxVR4zo2+k8OrBop808xp37fu200Dm0YkHfbB5h
1Nm8O37spPkmzOtzslcc8o341p+Yp5grvcG5BjqFL92k3SvM6m69+1M2wV9i
RnYj+5CN88XSf5S9OPuMA/wDdP0q8w==
       "]], Line3DBox[CompressedData["
1:eJwNzTdOA2EUReFHgRCpgBaEREPOe4AF0NnGYEzwOM2ABEtBxBUQemLLMsBh
C6SSrzi6592rf2aynG2mPRFRQl9/RGswoo1bjA1FfCE3EPFoO+cVmXc/yS35
rUt4gU95M40L3bb7jldtRT7DO5jFpb2k+0DNviMT3cRwxJz93f2Jum1X/tjm
9V0soKxrocLHbSPe5fgi8ljCvr2NF37WG7HHl3kBKzh0F739xau74V8HulW+
hoSP+m5Hvrmb9gq/5w+48q7m7iK1VeW67hoNnunqcsN9g5Qf6Zryz/3MM37q
W8f8RP4DxOQzqg==
       "]], Line3DBox[CompressedData["
1:eJwVzTkyg3EYx/FHRSyVtMxoXEAqDmApdWZodBohmz2xdJYjWE4gdmZiV6s4
gtgvEBT5KL7z2/7P+3aNp4cnGyJiBE2JiKnmiI7WiBqm+Yquk39ERr6UL1oi
ettkPqt7kvvt21jns/qc/pkf0O1gg9/HC8rI2zP6Pt+58n5Td4AqDlGw/9h7
+CNcezP6f6+votvdDE3pbmxj9FU+pm+03T5LT+RT3HozL080RrzTOZzpz3Fn
W5STbj7oJxYw6P+7KPJf+MYShnR7WOZzbkv0V77nV/k8XaF/ugd+jS/QLf+q
A0mjOP4=
       "]], Line3DBox[CompressedData["
1:eJwNzjlOggEUReEHDYIYl6BUWNjauAUTC1oTTKiUQkPlUDskDhCNRqOh0I0w
CE6FVK6BwiiDtcSvOLnn3ff+IVfaLmwlImIV6XTExnTEXDZicSZikx9kIubN
f2jwQ+T4BE2+Jh/QdzvAEC39rOeP5Jd5hDHa5rLbvN0xf8KOb1btlqciPmXH
fKr/xg8W3J7IJbuu3Tkf4MN7ijjjz/qaXDf3MORVvOgvZSXlH+QFVuwfcc3H
+MUVwnde3d/yXXkjE7o3fs/35J1M6t55ne/LDP4BETcx3g==
       "]], 
      Line3DBox[{2316, 3106, 3245, 2315, 3107, 3246, 2317, 3108, 3247, 2318, 
       2178, 3048, 3046, 3063, 2319, 3391, 3049, 3052, 3050, 3059, 2320, 3327,
        2696, 2756, 2697, 3001, 2321, 3184, 3280, 3030, 2507, 3002, 2508, 
       2011, 2922, 2870, 2509, 2910, 2510, 3359, 3177, 2322, 2871, 2511, 2704,
        2512, 3331, 2323, 2872, 2513, 2707, 2514, 3332, 2324, 2873, 1589, 
       2710, 2515, 2325, 2874, 3281, 2516, 2713, 2517, 2326, 3282, 2518, 2716,
        2519, 2327, 3283, 2520, 2718, 2521, 2328}], 
      Line3DBox[{3083, 3394, 2555, 2759, 2371, 2554, 3122, 3198, 2557, 2760, 
       2372, 2556, 3123, 3199, 2559, 2761, 2373, 2558, 3291, 2430, 2560, 2762,
        3093, 3344, 2901, 2804, 2805, 2561, 3292, 2374, 2934, 2935, 2936, 
       2562, 3293, 2375, 2239, 3200, 2376, 2240, 3201, 3190}], 
      Line3DBox[{3084, 2570, 3295, 2381, 2569, 3124, 3204, 2572, 2763, 2764, 
       2571, 3125, 3205, 2574, 2765, 2766, 2573, 3296, 2434, 2576, 2767, 2768,
        2575, 3297, 2435, 2578, 2769, 2770, 3363, 2577, 2806, 2436, 2579, 
       3095, 3268, 2937, 2938, 2437, 2580, 3298, 2382, 2245, 3064, 3065, 3393,
        2383, 2246, 3206, 2384, 3066, 3395, 3196}], 
      Line3DBox[{3085, 3397, 3075, 2439, 2583, 3096, 3269, 2582, 2440, 2586, 
       1873, 2771, 2585, 3126, 3209, 2589, 2772, 2773, 2588, 3299, 2441, 2592,
        2774, 2775, 2591, 3300, 2442, 2595, 2776, 2777, 2594, 3301, 2443, 
       2598, 2778, 2779, 3364, 2597, 2807, 2444, 2600, 3097, 3270, 2939, 2940,
        2445, 2747, 3098, 3271, 3016, 3015, 3060, 3392, 2387, 2250, 3210, 
       2388, 2251, 3211, 2389, 2252, 3212, 2390, 3068, 3087}], 
      Line3DBox[{3088, 2329, 3110, 3249, 2331, 3111, 3250, 2332, 3112, 3251, 
       2333, 2162, 3031, 2334, 3284, 2522, 2719, 2523, 2959, 2335, 3285, 2524,
        2720, 2525, 2875, 3334, 2923, 2876, 2526, 2721, 2527, 3335, 2336, 
       2877, 2528, 2722, 2529, 3336, 2337, 2878, 2530, 2723, 3252, 3148, 2338,
        2879, 3149, 3360, 2724, 2531, 2339, 2880, 1604, 2725, 2532, 2340, 
       3286, 2533, 2726, 2534, 2341, 3398, 3090}], 
      Line3DBox[{3091, 2733, 3337, 3188, 2352, 2539, 2732, 3361, 2890, 2889, 
       2351, 3152, 3258, 2731, 2888, 2887, 2350, 3151, 3257, 2730, 2886, 2885,
        2349, 3340, 2538, 2729, 2884, 2883, 2348, 3373, 2881, 2882, 2728, 
       2537, 3287, 2347, 2960, 2961, 2727, 3333, 3150, 2346, 3256, 3117, 2345,
        3255, 3116, 2344, 3396, 3197}], 
      Line3DBox[{3092, 2741, 3362, 2900, 2899, 2364, 3157, 3266, 2740, 2898, 
       2897, 2363, 3156, 3265, 2739, 2896, 2895, 2362, 3155, 3264, 2738, 2894,
        2893, 2361, 3374, 2891, 2892, 2737, 3339, 3154, 2360, 2962, 2963, 
       2736, 3338, 3153, 2359, 3263, 3120, 2358, 3262, 3193}]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzb8rBHAcxvFH+TU4VgPKbDCxGAwWhYX7C4xXXLEoZbpzZVBkUbqyWEV3
ZbtbrgyMfkwiC4v4A/x4GZ6e9/N8Pp/vd3y1vLzelWSJnrqTVk9S6k3afGcg
WcOVvuRG3sK3vKrfxnv6e7mCX3UPuIYP9c/4Wncgv+AjfqJ/w3X8zk/5mW64
kHzKF/IXn+9PGvjD/aX5r64jhybMpuyP8Ekq6O5okI7tt+0/4hWz0f9/aIzq
ZmXdNH3LC/aGvPODa7oqzcr7fJdm/LnBN2kOX7k/54vUwk1epD8C+C9O
       "]], Line3DBox[CompressedData["
1:eJwVzz8vQwEUhvEjUUTwCWhikggJCxLxAdB2kLR2VlESDE3ERJRuFVsbiUF3
vkA7SMSfScJGGlPndq7fHZ6c9zzvubn3Tu8Ut/YHIiKPn8GIZipibyiiZZ6N
RRTl8+GIC5TkX+5Ddypfc5Wkk//4b74sV7kbvHBVe5u/NWtcHa/8nb3D35sP
XAOPcmYkYhNZrIxz/BOedfPcLuawpJsyF7CIr+Sb3TWR1uXMN7yjo1vlDt0d
YBn95F26Gb5ndpFFoO/7Lt1coYwJbs39J39kP8ExJvmU59d1G5i1j9oL8jby
/u8f/DgwEw==
       "]], Line3DBox[CompressedData["
1:eJwVzr8rxHEcx/E3+VUok5JSt/sDnB/n53KnbhDlnEnmk12xUWI7YbnLj4H9
FOtdHRZnkC4Lg0lWg8nD8Oz1ej3fn293ibWNhUJLROTx3hZRbY8odES89UTU
9E19tzNiD1v6B//Eb+sH3OH/Tf/km/y+XuSO8MgV7VP9BMd6Sfb3RpTlmX0h
z3GpX8kBt2tZsTNdEWlkUeFuUOfv5Dp3Kwe9f+Cqeg1N/V7++O263PFuEUv4
cnvmft0a8tvO8SsYwSiSaHXLy1U0vB2TExhHn1vKdy98yp7CJIb4ef6Vn7Zn
MYNhvtt/XHabs3Myyf0BYUM0Hw==
       "]], Line3DBox[CompressedData["
1:eJwVzLEuA2AUhuHTKG1CI+0oEQyGLm1CTEJq6SYVEZEISYuhlagB0SBlMbkB
V+AWajBYGJklXTBXdLEYPIY3//e95/xnqtZcPUhExBo+khFPgxE1dEciPvVX
eR/v+rfeSEe86XXvM3ck//It/WYoYiETcSpf8Cn0UhG3/DS/JF9z2f+bdu78
78sd8y2zbYzp43Yf5ATftlfBCor8nncGo2br3h17u/hxq6oPY8LsC3W+gYKb
eT0pv9hreg8xx8/yA+7m9GOcYJEv8Wl+Uj/DOcr8vf/LZgX9Eleo8I/8Jj+v
d/QN/AG1Kyju
       "]], Line3DBox[CompressedData["
1:eJwVzrEuQ2EYh/E/6akOlUi5AGe1VEJMTajF1ohNYqooiRNCIhWJRhiMbkLE
BVhqMFjdgpVZmCV+hifnfZ7v/c45Zf9462giSQ8ftWS3SK6ayaf5rpFUvDud
fPMDfsbX+C8f8o55pDVwwe/dfagn61PJrdZCpT/qP+axsxovUMeLvUntDQO+
j0XvLO0umWf0d+zZa+kDz77exLz+hUNtzlnl2XZvQSvMJzjFirb8/107s3yI
c6zqT/6r66zklxhhQ3/We3qbX+MGm/qrvqN3+Jhv4w9YlyMr
       "]], Line3DBox[CompressedData["
1:eJwV0L8vXXEcxvGPxsXghttqYhFpSCtoly4GI6OQSm7SxI/WIgY0TNLo1Ikm
DBK6SPxYhKET/gHSqZZ2YSHREJcoEm2vH+3rDO88zznP+3tyznnSN/xqqCAi
xpFNRazjU0nEYzQVRxyjQn+RjjjS2+xfMOleNxrc+4lH+nPOod5iX8EffQxV
OECR/SFvX2+2L+G3Pooy7CFj35UvbfO41uucG5QF+IFyznfZaP+MK/0pp1+e
FkXsyDTnm3xmn0HGfun6LXY527KEsyWr7VO40Hvx1b4pi5Pvc25Dr7RP4Jfe
hXXOmnzAqeesJt9g/4hz/TWWOYsyVxrxTy4gZX+PMz2LWc6cvE868oURI/ZT
vdZzO+UEZ1reYQrnnAFOTq/hdMgPnNvk/b3PTfK/OW845fYT1+14x8nLHs5f
2Sr/A5HzRv0=
       "]], Line3DBox[CompressedData["
1:eJwVzr8vQ3EUhvEjpS2phEhUE0lbvw0diEkiJlvTwSJhoZMYKsEkEpPJYrFY
LCYJiakDgwGJDkYGtfgDEKvF5w5P3u953pNzb7m+vdzoiIg1rHRFNDGfiVhN
R9znImrmGxxyFeR6I6q6Je4S+1wRGX6RX+AusMf1Jx3/IduY48/R8H5xOyXf
8Jrc5s8wYH/T/OVWTzaiG1P8Ker8O9+Szyhxv+6cyHVzS3cnbzHsToE/RsqN
pu6a/7Z/Jfv4IxR0Q5i1P518C2n+AHnvQczoJuUE/jojdnVP7oyaxzGGH36L
f+BL5hGU8cm3uQ1d0fwod/zLP1iGKrk=
       "]], 
      Line3DBox[{2207, 3201, 2193, 1389, 3206, 1267, 1398, 3210, 1278, 2171, 
       2172, 2173, 3390, 1703, 1859, 1704, 2118, 2090, 3379, 1524, 1722, 1525,
        1967, 1724, 2130, 3385, 1539, 2157, 1540, 2189, 2129, 2094, 2100, 
       1553, 2136, 1554, 3226, 2135, 1758, 2002, 1569, 1777, 1570, 3231, 1779,
        2008, 1579, 1798, 1580, 3234, 1800, 2014, 1589, 1812, 1590, 1814, 
       2018, 3360, 1602, 1826, 1603, 1828, 2022, 3361, 1615, 1840, 1616, 1841,
        2025, 3362, 2221}], 
      Line3DBox[{2210, 1446, 3249, 1336, 1441, 3246, 1329, 1436, 3325, 1864, 
       1785, 1322, 1431, 3277, 1766, 1561, 1317, 3223, 1426, 1746, 1545, 1309,
        3217, 1421, 1730, 1531, 3242, 1302, 1417, 1710, 1516, 3237, 1293, 
       1411, 1691, 3306, 1508, 1283, 1402, 1678, 3303, 1500, 1272, 1393, 3269,
        1665, 1490, 2212}], 
      Line3DBox[{2211, 1607, 1829, 3286, 1606, 1818, 1594, 1815, 3282, 1593, 
       1804, 1584, 3329, 1801, 1583, 1783, 1574, 3323, 1780, 1573, 1762, 3228,
        1558, 1759, 1557, 1315, 3221, 1544, 1741, 1543, 3244, 1307, 1529, 
       1725, 3276, 1528, 1299, 1708, 1861, 3308, 1707, 1290, 3215, 1408, 1280,
        3212, 1400, 2213}], 
      Line3DBox[{2216, 3262, 1355, 1454, 3255, 1346, 1448, 3251, 1338, 2179, 
       2178, 2180, 3233, 1788, 1866, 1787, 2101, 2158, 3229, 1564, 1768, 1563,
        1750, 1983, 3224, 1548, 1748, 1547, 2075, 3219, 1534, 1732, 1533, 
       3354, 1969, 1714, 1519, 1712, 1518, 3351, 1957, 1695, 1511, 1693, 1510,
        3349, 1947, 1682, 1503, 1680, 1502, 1937, 1669, 3209, 1493, 1667, 
       1492, 1929, 1657, 3204, 1483, 1655, 1482, 1643, 3394, 2222}], 
      Line3DBox[{2223, 1384, 3295, 1262, 1491, 1666, 1873, 1874, 1273, 1501, 
       3304, 1679, 1876, 1877, 1284, 3235, 1509, 1692, 1879, 1880, 1294, 3238,
        1517, 1711, 1882, 1883, 1303, 3243, 1532, 1731, 1422, 3218, 1310, 
       1546, 1747, 1427, 3317, 1318, 1995, 1562, 1767, 1432, 3386, 1323, 2177,
        1786, 1865, 3326, 1437, 1330, 3247, 1442, 1337, 3250, 1447, 1345, 
       3396, 2232}], 
      Line3DBox[{2227, 3395, 1268, 1399, 3211, 1279, 1407, 3214, 1289, 1705, 
       1860, 1706, 2174, 2119, 3383, 1526, 1723, 1527, 1968, 1726, 3312, 1541,
        1740, 1542, 3220, 1314, 1555, 1757, 1556, 3227, 1760, 2003, 1571, 
       1778, 1572, 3232, 1781, 2009, 1581, 1799, 3328, 1582, 1802, 2015, 1591,
        3281, 1813, 1592, 1816, 2019, 1604, 1827, 1605, 1830, 3337, 2202, 
       2236}], Line3DBox[{2225, 3397, 1392, 1271, 1499, 3302, 1677, 1401, 
       1282, 1507, 3305, 1690, 1410, 1292, 1515, 3309, 1709, 1416, 1301, 3241,
        1530, 1729, 1420, 3380, 1308, 1744, 1745, 3316, 1425, 1316, 1764, 
       1765, 3321, 1430, 1321, 2062, 2063, 3372, 1435, 1328, 3245, 1440, 1335,
        2230}], 
      Line3DBox[{2229, 1281, 1409, 3216, 1291, 2048, 3369, 2144, 2049, 1300, 
       1727, 3313, 1862, 1728, 2074, 1742, 3315, 1863, 1743, 3222, 2078, 1559,
        1761, 3320, 1560, 1763, 1575, 1782, 3324, 1576, 1784, 1585, 1803, 
       3330, 1586, 1805, 1595, 3283, 1817, 1596, 1819, 2201, 3398, 
       2234}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
8r8mGU9ygpD/dXZNcTFH/jfFm/7sFOJ/sl1kxTiqi/1nWkXIyC/f5mZMpUP+
Ws9hh4Yy8teEtrzSPPLX66rSsB8HfuwdrNiP74y6TvHjTsYpmBuhxHqjIMyN
m33bKdwYdqS/0BFxzm/NhuJviHNGuZb005CvlwngOyQiMA29sl/T9l3thTEn
HyeTo/2IoNAm0mWZCWhbyrVNP3kIhgRNzieEuRGtp23pv/3b92wFYiZmuTMB
ILlMKZP1365bEU8eCKuHgPqiakavX3+vL38O8jL9GgHSDOwnri79vU6sK5Nf
o48B53V8zYAoGUbDa5KBX2qgcHGGZ1L3KFFkbPIS+RHQeM+zBPsRgUiTCexH
9GuKNx2c/fscj+MfkwaqP4Jzl5/9LsTf97hubpaRbYFnzeBB1lIqELp5YfvK
NRK8dS0hT/dIJyxQpU9OUGACAW8P3Th1jQR+lT+0D5bshOpbtrOJnWICliLX
2HfW/n3+ZHrdym37fHBcFZppRI/Cp2wSLdMho9BzQkXZfp0yiM1PfRE/TwIZ
LmNHtj9rg79mQWdKqgoI/c1HOxQyCrYliArron8v+Uli6lUxZTDxXfh0zKYu
qKUidmbuGAkyajQoRfOoAeg2EeMzNfXn795oTjVSUe4D1Q43J9xnO4H/yLLB
D3kSTPzovt74mhrIi7wvj54DdpWvO4efw2ToL4GfQ0rUbB+1+TufPLj79uE2
uy8gj6XDGK0fcF3g6cTrjxPMk8frDzLb3IueD2etHYzx81W0nJeM0PNVNRhd
0b7ggGmEHN7X3O75dryvn/Gz1GhfcIq4JIb3xcivl4T3tZfMYD7F2Qt909iV
mmSnYQLH6ErREjOIH1XmmRj5u547ZXkch66ng+uaC8zoXECXFFUZPhcvpu5E
fC5O1eLX0LlA0pEmV3wu7rGjO/C5PHnvx/EQna+3QMjBKbkWGHjywpGACirw
vZDHAXEymLjRdxtzMqf5izHMyY/r3UKuLPz9u5I/1DSF6OPBneTz9iIo3158
9L9SW1EDme9H7UjoGyXIvaLr1P/t9+wuUjsUqTjegfmZy/FW//YehPdNJDOv
cNh/nH/y+bwzNftOhsmd9U9PXE6EDu6JH1amSolNOZK9pt+R35nf8+grup5z
4cG7E6RSwiEtbOb4PBmo1BuVT5klwH4J6U3rS4v/4zyQtoC9MGqGDOdoqQKq
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
jxShrkd/QnXxpip2KUGdN3DWja+bHToZUPDdngcJQYq//30oLXEe5h3f812O
a0D19dLV4wMl63PhtVsLj3y8zYCDs6bkD+0z+P3vO5qUVmAescmssOgcqusn
n433e0i+AS83dUf3od+fWj67I6DhP35/+05pMcyTKcefYZU6mwCmrMznIXwL
1q8IYOLbniuf9TG+vZ9mHYxwLNAYWcTEsQ7+DqIYx34t962l0Ll4P1Eggr/n
YLLoix7+nsOB97btQiEDYGi+eyLus23oX96H+2w57gj7fmGhAf6nmZ64/+GL
0Wtd3P9gvnlzbw3COeu7rmbg/pNAlcpo3H+ie6LQ7PJkPeApcOvD/SfdqsAP
959sjkrY/JW1ClSOZVbj/pNXTb2RuP/EdL7D85r+eChY9j0uGOUdM6UDjOGu
amrEdHlHouZ92PFoWagDev7pscf2PHCeDowfspSi+Anc159nxk8daccaHD83
jR+K2MdWBT7uMczG986y+ie48b1zAWeM8JypemDcNTiM751V8y/a4ntny5yV
WsdR3PD+JCOC751jbvsn43tnne2Dxv6SQ6CdS+VJy44PkK+OW8BOh0GJFnL3
zrKhgx+rTSLO+1fBgQXXZ+5oqKNuJkem7UL+HOrd2Yi/68WScjYBf9er9Ej6
2DrkT54UoTt4fvnqKesXeH45oq3AcQr5M3Wh4SPcF8GWHz8T90WMJx+IdULx
fGsDz3P8/RDxHdXN+PshqzKsaXm7+0B1zdAi3H8evSgnDvef31lVrL948wBY
PBj+CvfDsD+9/wX3wzi2CWw3n+gElgVXb+M+/xiH9nTc51+ispE+A72vloRO
Ku7P0fEbPo77cwoHds/mQ/a0ym/heN56DLIE4O+TNNckFIVntAIXz+c6uP9/
NluvDe7/N85wbKYtbgKqsoUmuJ/n9M23z3A/z5LhdoNKjRpwtrL0Lb5vMmkO
O4Tvm1KO9LqgvAC0R7e64bzwWCs6E+eFpxeOvUHxH4zMtlXG8X9xV9IyHP9V
EwxS1YTfQVm/gpcyaH27vrPYn1XiAm90OBIQfoD50deY+EFgTC8C44e7vu5O
CA/Aqpf9bBgPXGPvOoXxgPgddiOUr8Fl8bPMfD1vPd0N5+vOB40VaF+B7bVC
zH0VyJizHe8r322WIWgfArWOma/wPpwXa9aD96GWVkcceh4Qc4DBfB6t4G4L
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
G+xIjpm/urEXJi/kXSvc7UlNpa5W1j3dCuV9PVgK6/ugu53hw0t5btRL4r/s
Jv7LNeK/XDx56/moWhfUyWR2Zf/WBa2kBXts+YOoPDueB6qWHdCbevaozqsH
buNnUVS46kvtIf7OaeLvlBJ/Z2j96lXWuC+PKksrvhewYdk2H98L8JbHhSxA
+87OlHnpPdp3j6vudx8EB1NixA9SJ35QJPGDuhbvrDykOATXrjIsxvcIo9Wr
6fcIjY/qTv26PAAfTIHxeVqNcP/toFOKwnGUM/GPioh/VET8o+9zMvcXTf5r
fy85Osi9OhUAxG0fP3iD7HLDjS0veiOyYPfWUzY0xXLqC/GbxIjf9Ib4TfeU
ZrL8HWjgWPfItkvvs2CC64HdRsrl1FPiNz0jflMU8ZtOjjaqIXsDfLovWobt
jSkNWzlsbxwjeBLB+wj+69ebF06BJdBOOb/SrWsIPn249PyJ+X7UmeYYgwrj
cijYdsuvzHoIuq2JS37C8pq68lHwXciGanje4IVoe/kgPGaqc2xKOYIy2G/X
sdarAbqtShJZEzgAbx1xURuSi6PeD0jb1xxsg0uql6gzyfbBowflBXq6Mikx
G+bv3xR64Cqbn4+zmzqg+cir4xXrqqlRYY4w07QhWCQzKhAdXgpHZ8wWqAqP
U08usEGQNgQ+PPauro4ohUby5s3ta8cpQysmSWRPgi1zuAyxPZnif37ua2RP
XpfKsBq80Q3e6R1pn0Z+mff414D1eRUUS3ar/h3vbPg97k3JgbvIXtA/KSh3
5gM12uW6asIhH8443P48dYAGLzG4fmAWi6feFya8H+EogQ3jS/Wv/hyCpp+j
PSua06hAv3VLc6QqYGhGs7HosSG406JUvZ6hiLoxoeUjOVUHrS7udd8ydxDm
Shft7aHqKfFtob8CndphWIDj/nztXjiRn3pe4s0w5T//G9+U6SA0NQ1L1N1a
C6PV2N6HKXCD575bzquaDoKJbEtrH5lauJuTb9FGVW4QOn4gGNnJ4PT1kXRs
J4fwfd6E7eQI3xltppJ68Gljdx5z2QDcbXJdaUNKDKX+WFbvgF8VqFYNvInj
VzLGTOk4fqU+GjWA7GdwIv1MJbafG/bfPInt58pTjr3ik2UgXcEtC8e1ytUf
XcJxrc5raUvZW2LhwpKrTTubkX83dmKV5oYqyr35nULF1GcoFckjol9Gg9+Y
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
e7zlIDwXU2zOOxDnz/wf6kjqrA==
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{247.30522776688412`, 191.00726948660267`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-50, 50}, {-50, 50}, {-5.9122326953860536`*^7, 
    5.926868638438148*^7}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.164905571315812, -2.85107370626971, 1.8149889459626347`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.745926389691228*^9, 3.7459264240083447`*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"3f9b6fcf-6557-4f89-8f42-19625a7d4a7b"]
}, Open  ]],

Cell[TextData[{
 "b) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    FractionBox[
     RowBox[{"x", "+", "1"}], 
     RowBox[{"(", 
      RowBox[{"y", "-", "1"}], ")"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "82c1f67e-4c14-45ef-b219-43975d7e6ed2"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", "=", 
    RowBox[{"y", "\[NotEqual]", "1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "35980231-fc3c-4f07-94a1-f6f0a5b57eb7"],
 "."
}], "Text",
 CellChangeTimes->{{3.7459264584233265`*^9, 3.745926458923563*^9}, {
  3.7459265137036886`*^9, 3.745926534153363*^9}, {3.7459375388505764`*^9, 
  3.7459375635691214`*^9}},ExpressionUUID->"cab69ee0-7abf-4f98-95f7-\
f38b4f63fb77"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionDomain", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"1", "+", "x"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "y"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7459375971686*^9, 3.745937599965785*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"9e14e526-8f12-4fac-8ee7-89943352fe57"],

Cell[BoxData[
 RowBox[{"y", "\[NotEqual]", "1"}]], "Output",
 CellChangeTimes->{3.745937601293625*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"a4b32310-d14a-4a3d-9549-7d96552f024f"]
}, Open  ]],

Cell[TextData[{
 "c) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{
     RowBox[{"2", "xy"}], "+", 
     SuperscriptBox["y", "2"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "fbf4a542-8e35-4354-9e48-22f67688a048"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", "=", "\[DoubleStruckCapitalR]"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "3820440c-14de-45dd-8a04-a477098a980b"],
 "."
}], "Text",
 CellChangeTimes->{{3.745937621269863*^9, 3.7459376548867507`*^9}, {
  3.7459377161420546`*^9, 
  3.745937742176225*^9}},ExpressionUUID->"29a10027-47fd-46ab-9796-\
7ac08785dddf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionDomain", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "xy"}], "+", 
    SuperscriptBox["y", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7459377449906807`*^9, 3.7459377716772966`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"9ad7bcbc-341a-47be-861e-10cc49b145a4"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.7459377634427586`*^9, 3.7459377719272356`*^9}},
 CellLabel->"Out[22]=",ExpressionUUID->"81bbdfe7-7ae8-4856-9bbe-cfdc7b2440c2"]
}, Open  ]],

Cell[TextData[{
 "d) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{
     RowBox[{"3", "y"}], "-", 
     RowBox[{"4", "x"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "902c6677-9d4b-47e2-9ad0-2a08f987c6dd"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", "=", "\[DoubleStruckCapitalR]"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "b7b874ba-ccdd-4ce1-80ee-4ce882fced42"],
 "."
}], "Text",
 CellChangeTimes->{{3.745937777602459*^9, 
  3.745937823836179*^9}},ExpressionUUID->"2d3af849-d837-4d65-86a1-\
f147ba940217"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionDomain", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"3", "y"}], "-", 
    RowBox[{"4", "x"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.745937831100477*^9, 3.7459378467693167`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"253e3ab1-6c48-4c58-a7d2-95041d8e3683"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7459378470348806`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"c200eedf-487e-48c2-be7a-911760664563"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["7) Dom\[IAcute]nio e imagem.", "Subsection",
 CellChangeTimes->{{3.74593786083484*^9, 3.7459378659018936`*^9}, {
  3.745937913353492*^9, 
  3.7459379247251806`*^9}},ExpressionUUID->"59854d7b-ac22-406f-8859-\
708631d2e61b"],

Cell[TextData[{
 "a) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", "=", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["y", "2"], "-", "4"}]}], TraditionalForm]],
  ExpressionUUID->"622cc5ee-fdab-417e-99c8-6d27d8dd4353"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", "=", "\[DoubleStruckCapitalR]"}], TraditionalForm]],
  ExpressionUUID->"a56fee78-8eca-490b-b568-794fe5ae1fd0"],
 ". Tomando pontos."
}], "Text",
 CellChangeTimes->{{3.74593792871227*^9, 
  3.745938030666724*^9}},ExpressionUUID->"251ef111-5239-41eb-be05-\
43230647d70e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["f", "a"], "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   SuperscriptBox["y", "2"], "-", "4"}]}]], "Input",
 CellChangeTimes->{{3.745938033162695*^9, 3.745938064991579*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"96507328-a38e-44e7-b343-4b63a4631038"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["f", "a"], "[", 
  RowBox[{
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7459380731205997`*^9, 3.7459381018629546`*^9}, {
  3.745938166488987*^9, 3.74593816702011*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"6a4936c6-60e2-426a-8549-4077393ec811"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.7459380884915986`*^9, 3.745938108821355*^9}, 
   3.7459381677074175`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"c468047e-6acb-433b-accf-60ddfc133678"]
}, Open  ]],

Cell[TextData[{
 "Precisava saber o ponto \[OpenCurlyDoubleQuote]m\[IAcute]nimo\
\[CloseCurlyDoubleQuote]. Mas para duas vari\[AAcute]veis... n\[ATilde]o \
rola. (?) Qual o menor ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],ExpressionUUID->
  "c16dc1b1-2a79-4884-8dc9-b10e0419c8f5"],
 "? 0. Ent\[ATilde]o ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"0", "+", "0", "-", "4"}], " ", "=", " ", 
    RowBox[{"-", "4"}]}], TraditionalForm]],ExpressionUUID->
  "083c0a05-49d9-4e01-972c-5d1016fac91a"],
 " \[EAcute] o ",
 Cell[BoxData[
  FormBox["z", TraditionalForm]],ExpressionUUID->
  "70dc72d6-6dec-44e9-9843-be25d5d767e0"],
 " m\[IAcute]nimo. Ent\[ATilde]o ",
 Cell[BoxData[
  FormBox[
   RowBox[{"I", "=", 
    RowBox[{"z", "\[GreaterEqual]", 
     RowBox[{"-", "4"}]}]}], TraditionalForm]],ExpressionUUID->
  "6bf43d97-9e6a-44d0-b244-156f128b7111"],
 "."
}], "Text",
 CellChangeTimes->{{3.7459381950017233`*^9, 3.7459382028820343`*^9}, {
  3.745939470666318*^9, 3.7459394830851893`*^9}, {3.7459395369595785`*^9, 
  3.74593960927522*^9}, {3.745940068741649*^9, 3.7459401551783314`*^9}, {
  3.745941772510997*^9, 3.745941772510997*^9}, {3.7468154543106027`*^9, 
  3.746815464588125*^9}},ExpressionUUID->"a26dd62e-5bf2-4798-89e5-\
ae83e7d64266"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"], "-", "4"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.745940161793395*^9, 3.7459401783170195`*^9}, {
  3.745940214365669*^9, 3.7459402565213013`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"9c0f3b9d-b945-4399-aab0-778486acb403"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
4U5P5qkgybwWJJnXgiTzWpBkXguSzGtBknnNysPvzG+Uh/JTXl9O+JCTW1vs
PP0yKyf8q+HzCgsa5Vs54bvFKSd8kPJx5bHn0t94X8v993e7pZP1N3jdmP3T
3uwfeMneeHry4f1uGWuv0y0f+JBY+yb2TeBNlJ7yoQc68DyeQzn5ezjP5Xfy
WaL3gt/5/yXu/eL/xzWOv1/ob+eNGpcoP+lnKx/ahfSMY7QLnPea9wdeR+Wn
38N/ls70J6+PrV9UXvoJulE/2hHd4LQL+cK9DnDmKeoLZxymvnDGK+oLv0jP
pb7wNJXT1hGuXnZOqufvdvWlfeif1BdOf6O+cNqR58H9PAtnHqG+8GGufeHp
rn3hh137+npRX54zKNrugef0G55fx72P8Ivc+whPd+8R5aUfkg88zY0PcOrl
xr0/jM/wJONekGTcC5KMe3/Qx88L22qkX5XVs2nIz9Vlq7xfvth44PmimC4n
izfHnv9p8fJ/vHbm0p17iuHT4zx7vTjp3o+V62DxNf++5LY1GyqEpINPFic9
P2u8fX3de4+kGefv6ogXxv8+m/+/Q/nAST/bPZefjVz+98TrkX3u4nj5SQcf
KO50C5LoZpx1Me0TqL/xO/8PN/8VPWfflrotpj851voJ6/ihSs/vtt4Rt31w
8T7uufxdP3HakXbZefnRqVXu3ZINt/XRmG9m/9DjY0uHfrQvnJ9zXuvw/oEe
J0xP0tdx+pP/y/99unjnnirWXmbPitO+5P+68oeTvslPN5z+p6JyIe3Hc2hf
OPmEQ6P1Jb820oF0cJ4Lp7z0Z/RF735ufqF9aBfKR/53uH4Ln+3eF8aDNU43
+HqnGz93q/zoAE+XDnDyc/3f+in9k/KgH+MDfw9nfEA3OP2N9uP/09SOlI/0
tAv1hG9S/4STT33lw++M319NuPfQ8U0VzW6gHvRDOPV40+ls88kVb85593g1
m4/Jh3aB2zgpjs52Lll/49G5R/bZ+0C9m7jy83f0W9LDp4yN6kA+bZ2epKfd
GXeYN2hf26dT+8NdeusPzJvMe7Omrxl2PH1QQPn5u/7z/3Zo2uzBNp9G9sfm
DgzQi/Qrf5+/Lhnsy2PPRQfev0mxdVlNmzfh48XJ//xYfinhykML7zy3Qor1
Z/ib4pQT3n1gXnpJSWK/j/+n/JSP/Cg//ZX0s+vF253f0Yn+yd/z/3erv9GO
8KNKb/ve0mOg6tsmXm6r32zVy/zTpFM/lx6dbld6OM9Nj+pg7U+702+oF+2O
bthNM6PprX79XD+hPLx3PDeJ/lZ+9Ccd/Z/3zs2/1s9d/wzIHx1JT/5w+mnl
rW/ntaicb/Yh+VBf6kk+1BdOPku6Przixp75gRuHrZy0Cz8rx+zSRgH9lZ+N
xUkHryVOO9F/GIfRgfrRD9GR9Iw/9HP61SZnP9i+kPKnHJSL8vBc9KCf8zv5
tHXzPvwblYfy0d8HuvEBTv+nnpSH94X+BL/djRt+vHL9IUzSH8Ik/SFM0h9C
+gP6oDfjCfWFY7/xvCTvaejfU54Hf0bPtfM7PYfxlnak3oyf5mcrvce79Pae
Kj393I+f9Hs4elJ+/75TfjjpKQf9hX7C+5lkXAr8uOTmuyDJfBegJ9z8OKSn
m+9sPIH78QTdqfe9r1539Pk/D7Z6weeIoxd2aM5j2Us6VvivpSM/8rH1TOnc
2nGOS+85/ZP3hfnC7Cr2ex+Nl4fy8f/NVU7qj/70f/SkH43c+05m+dapVm54
nY1X/+frWhVNh3oT/tRmR+EpwU0jm93Q7tO6li/lrKN8qA9824fxfMiXv+ul
9HD+roqeiz70t9mj6yyvmzrEysP4U/DE4CYbWtSw9PTDXzYtv3PxmsFWr9Q2
9e4vnHCa/OH7Guc8+fDWvj1fuvVSKz/pNyg9nPSHlJ50dr6m9OYPIE7+mbuq
zZmwo7G9728cKPtlu59zg0rxfKxc71BOnefCf1A+DeL5WHsOzPu48/ROeVYe
yrvBlQd+yJWHdhmkfCiPne+58sC/d+WhH76melFPnkN9eR6c5/I79RrsOPmT
D+8L9W597NgXp3zRx5575Yq0VwonNApXNxpVpfqH/U0f/o70pLP1tNLzvvF3
K2P9rb/1M/hTC7Jze3zV1+pFfiduLLd7yxkD7O9tX1n5wG2fWfnw9+hwUvlQ
Htpz9A0PFu2/M9feE/6uwyXPPHbdsgHB9w9V+7TktkTczfRr3ri2Rc6ooH9J
nddLSjJtPdJ307/yuta60jjpl9Xrff6smX8O1n5Sa11JSR1L//eqE6v0OzjS
OOmbPbjg2YLgcs0jGZZ+3PrHFxaMHGGc9FO655/50uohwYDYc9Ms/f0vfHTO
409dbtz8TJvf+05BmUFBR40bpF967cV9Wiy8zLilv6jjDbMq5mm/97DZFZMP
/fpFw/HYA+Ef4q3axdPb+37n77qtvzRor3ENTj/sFy9n4MsP9+Vvr31P0o+V
PnDS3yh91sR1tvT3SH+4xTFJ//hzMy19H7Uv3Pzv1L7qJ5a+7CNzu1d/eLTx
iA6/9R/6FX43sw9O3jf/8AjrP/BW7foEG/ZdZv0Evuz5hf/c//Qg6w/wk0Mv
a3ukca61O7zn9AYLtvyrn7Wv8aKJR+d/3MvaF/7zlUtnthqbY+3r449oX/gR
pad9LR5K+dOOvjy0F/yEyk+7mD+j6ov+8LOkDzrD75ae6Iwf0+3PvTmq1rCh
pjO82f55b+TkDjKd4YtHfdlsXNVLTWf43qbBoD21epvO8PN+XHr3poUXmc7w
c1ue3P/Akm6mM/z9pyccyp3U1XSG3yb/SXSGr1d6dIZ3Uv7obFzlQWf4HpUf
nc2vXPVFZ3iW9EFn+B3SE53xC9v/68X9N7w32HSG3599WkFJ8aWmM/zUSVub
df2pl+kML9qY3yrvxx6mM7x+xxnvTPumi+kMr6fzEXSGX39s0ZJWZ7QxneF5
8gdGZ/hkpUdnOOd66GzPVXnQGb5K5UdneG3VF53h90kfdIYfkJ7ozPpm/cE6
L67qMtB0hn8+ZnfqztH9TGf4J0Nu3ttw+0WmM/zHa47tGLv8AtMZ/lDs/P0c
0wd+/cCjW5r2PNX0ge+L9avTTR/zb1U+6AP/Xs9FH/hmlRN94NtVL/SBvycd
0Ad74Iwh8wtXLc81feArtz5355wOvU0fOy+etmzOde93N33gv+p8DR3s3Fvr
XHSAH4zVq4bpYOfUsfI3Nx3gJ5Q/OsBvUHnQAX7r32usbDe4t9UXe+y7WYdP
NmyZqC/8gvOuTM9r08vqCy/3xVV1z3unm9XX9ofVz6kvfNjbdb98qWtKSH3h
p2udRX3hVb7b0PX4gCyrL7ym8qe+8LIqD/WN5tPL6ov92My1Lxx9qC/8Bte+
du7s2tfit8ZG2xe+27UvfItrX/hR177w6137wqe59mW95t93+Db3vsM3ufcd
vs+97/B73fsOz3fvO3yHe9/h97j3Hb7Xve/wje59h29177vXAX3w//3GzTvw
uW7egdd08w680M078Bpu3oGnu3kHfrWbd+AXuHkHPs7NO/A0N+/Aq7l5B/6q
m3esnG7egc9x8w58n5t38Kee5uwoeBNnR8EXOTsKvtPZUfB2zo6Cn+PsKPOj
d3YUfLKzoywexNlR8LbOjjLu7Cj4l86Ogj/h7Ch4Y2dHwW9xdhT+6Xe5dQG8
pVsXwAvcugB+1K0L4D3cugDe3a0L4D+4dYGPQ0Fn+PduXWBxJW5dYNytC+C/
uHWBxbG5dQG8hVsXwGe4dQH7Mbe7dT28wK3fLT7FrdPh17v1OPxxt+427tbX
8MmP5F2Qt+lS09nHoaAz/DqlR2efPzr78qCzPdetl+25bl0MX+LWv/A73DrX
4mK1Lnb7JwH7J26fJGCfxO2HBOyHuH2PgH0D9IEf29Hm2Clj8k0fOPsebv/B
8nH7DAH7DG4/IWA/we0bBOwboAM/Y3baskR/0/5fWLPhxl7TFyT2hXqfXb37
jo5NwhEXPbBi1FvDTQfOVSbOOL7r+eqJfZ7n3qn+QuF3TcKB8stCB5475Omz
Z9eak2s68NzeOmdEB567bfvMjaNuGWI68NwJeq6Ne3ruZ7H5+s+mw1bOC36f
X7IT/eHQmDp9snpmhjfGxuc/mw78TI3Ze5cn1uML6mbtKGwY3qD+iQ6naP/v
9dh8N9B0aHdV2v/l1GwUbnrgw0t27sm1926U9veK/154Y/6TiffooMpTbnw4
uPCfPU0f1SMcHWv3von1tcpzUPu36FPFlQd92qs8tAv6UB7i2niP7j+ZNj7r
vUZhlVvrrhz+/RWmW+UlGd/mzDs1/MdHD7xc/ofE/Du6S638rJ51wjFdul3e
YsrgxPpaP+N2fq7pdlrsPKJu+G3MHutvuk2rUPvxwgn1wttkf6Lb9idqV56X
VT9cq7hCxqtOHU+9fsKO+uFLNU583bfbJTZePaR9mL5uXqik8jdV/Cw6X6Xy
vy67xdbXKn/cPu9pOjdy5UfnW1R+4i7RmfLv2/nEov1v55vOlH+M3mt0bhh7
L2qEXSa/em2tLkNM55tj/b9m2D5mJ+Ra+eLnJxlhxTYTj/y0uK8brzLsHhKb
f7vX6LKjsFZ4cayc3U2fTD037iff1vS5Sc/9a+y9O9f04bnHY/NjN9Ono3su
+jyo5/av0Py2un/pb/r8uL3Gc4UT/hTeWvLq9YUTzK4O+k6uWWteVu3w7Oh8
Go6NtVflsI/GDfRpEj/nsnZBnx0x/VPDAzH9L3H7llXDhWtbzu1xZTfTh5/x
farzTJ8xeu6kJ14aVrCzvunTSM89EHtuC9OH565RHDf6LHDPRZ9cPfeE+hv6
VI2919XDmUUZq1c1SNjJ8fc33d479Dk9Vp5jxfs6PbJizpbE+nShzsffGPrK
XzZtS6xP4/mXFL+h/h/d5y+r+2cSOjRW/ms3zi++5d33s9HhYeV/9oxBDWa9
W9t0IP+qU8+YduN5Z7l98rK63+y8xHsU62/lwvti67gLTYdOGg9S1M+p746Y
Hftusd9/eFPnSKlav1Pfd2LP3VU8MbbeSazHX9A5XX/Fp1DfN5V/Y/ldUN+V
yv9xneNT33eV/y6tT6kv+fdV/tT3yZhu3xYT5069Wuv5+Zo3qVeRzqkulB1L
ve6L55OdqnyoV4HO+/q5evHzC/lRRO23g9n1m15a/sbz0qxec5X/wLUz1jes
18zqRf59XL1ejeuQfY10pl7fxt73CsGZ91ySO+FEntXrHD2/nNqXek2N94eA
/hC1e8vq3oxE//xe+c/fvqty1/YZ9p7yM0P+NtRrivK/MrbP0NrZpWWD+q5/
lo/35+zCyHyRqTiAk9Knj9X3ivh7GozWe0p9K8ff64D3mvpSLuYd6vuQ/PYX
uPHqs/g4E6zVOIMOGh+CW0+d8MOKrmdb/avoua/Fyt/WdODnTo170XVQ1eBh
N15t1XO/0biKDpnyN9incZjxKj7PVja/MvTpEx/ngzM1zqPPD/F5IWBesPVm
fB4J+mkeQR/K6+e7uB2YEZzQPIU+PDe+r9vF9OG5C2P9JzuxTtRzL9S8yfP4
2cfNd5/quWXVn9En3p9raj8h1/TR/BtcoHkffTrG7YRgtOwE9Im3e/0AuwJ9
ZEfZ/Q/O7gq83aW/U7x8T7O7ZBcFzAvYXbKj7F4U7K5l2k+Y6vY9ZOcEK2Sn
obPsIt2fkGM6U372UdG3ocq/z9ld/CwrOxOdKf9V0fkxoPzYsegsuzc4RXYv
OstOtvsf0Fl2votDsXVB4NcFstsD/DfQmfIyr6Gz1gXB5swWM4Zv7Ont28Db
t5T/Lo0n6Ez5Q6070Jnys05B58oqf6FbRzyv8rPPQLn5WUXrJnSm/Kyz0LnS
iPR685Y0DZqf/12FHc0S63H8gO7Teg2dl8bXd8HnWt+5dWgwya1D+8TXj8F2
rR/Rp7Keu6lS40fnzBhi+nym5+b8HF6W/+UQ04fnEq/k1qHBRLcO1bo1GK71
MrrgX8P62ukQogP9gXVrD5UH3lDr5f4aP+knPyi//r+v9x/KtX6yBr8O7du4
+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
60b9DRL368IpT/T7FxnhNukfvT8qI+zg+hvPP+7uXYeXVfuSD3yE+rP376Kf
0H6817vwV+f+WHH0t7gv8bif2BlWTniB0pt9wHil/L934zDnfeYHqXE7xd2z
DT+ufhK9VzkliPsZdrZy2jlLrDxt7L2AF4hH70nmfu/Oie9TiB/Vc6lXNH3i
uwY850n1E8oD/8rdX233FCo9z4Ufc+0O9+0OZxyL6pCheJburl4ZwbOuf8K3
uv5pOql/0p/I77h7f+HPuvfX++fzXPgM9z7CGW/J3+L4tW9A/t4vPapPZvBy
dHwO/TgG9+OAfa9TnHHb/BTdeGX2h/gJ6RO9Fy7D5rXod38ybHyOfvcnI3w+
0l5p1u/ob+Rv/kLqD+QPZ14gf+9Hav5V4vQfnhv1a0r0Z5+e/OkvJ937a/uQ
7v2183f3/tq+qHt/o+Nb4v2F0z/RgX504r3U1Q+UT4x78KVqR8pp93zoPNfW
5+LZJekvPpCVbuU0u0vjJOWEz1U+lBP+rBs/4YzP0e9Xhkm+Xxkm+X5laN+v
pJzw1FK/Rxkm+R5lmOR7lOEfvkfpxyXKb34v0XHMxqt27r2A+/cC/px7L+CL
3HtBPXa69xqOPUD+tn533wmCL3V2jo2Heo8YH+AFbnyAR+eXNOPH3Pd9bFzV
c6M6ZwbYn1GdE/efR7/jkGn1jc5fmcE2Z3/CaS/ztxB/QeMw9bL0zi6Fl3V2
qcUHObsUzrzg1hFBknVEkGQdEXQofR0RJFlHKL4sz+rluVtHBEnWETZvunVE
kGQdYfNU9P7GDBsno/dKZYR+XPLpyYd6L9P4aX5L4hU1XvE+w6tFxofEPZqM
z/RDnoM+1Mfz6P2lh4vf0no5Og6kmM7mRyIeaLyN2icpAeu+6PcL0gLmi2i/
TZN//hmu36aZfRi9lywjSHH6w+c6/eHYk9QrEuf123oQneGc70fv10q0r+2D
iPvvEdMu2Of8bvd7iVMveA/pST7mxysevWc1LKpW6j2rod2zSvnsflOnD/x8
N2/Cy7p5Ez7X3XNr84jrt95vKtp/Eu1Feu8fBefvBuncnHLw/5eLk47/f8vd
80n6Qe5+SO/XAUfXNjrnRTfbV4neg23lynf3a9lzlL/FyTt/S9Lx/0NdOe1c
WM+lXpSz5sjP9+/rUd29F7+ty8RJZ/dZipMP4/pXsnNIB8dOo75J7hOz8no9
/fkm5YOP1Tkdv5sfl7gb/8Pp/dPX5KzNC/4fDjnQmA==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJxFm3f8V9Mfxz/3c8+9R5SQMrIqWUkkIxlJk0hGktVWkZSElEpLKhkloYhs
lZWZSvbeKzMre88f8ns9vc7v8fvjfM/rc77nnnvuuee85+s26D3kiNOqlUol
L1RUXxcqlQ1V/6HGAWqYKXyH8EDhWcJ3Cm+qvtOE56g+We2XCS9W+9HCI4Xn
CvcXvlR4kfBg4SuFlwifJnyV8L3C/bJKZXuVufq9he67o/Av+n8/lUvUtlB9
XtI9Vur3NbFSmaj/T1CJKm+XlcpJ6vOzruutcr7adlL9vtq7qf1r4Q+FjxH+
RvgtjdND+HvhOSr1NfYFqn9QnxPU/qPwkSprhR/V/Z5V/57Cv6itv8beQWWe
fk9RPUylhkpz/W891S+r/2qN01///1Nt3fT7XOF5usdm+t1Yfb5RW2/VjVQu
0v9q6ffmqjuqzzO6V1fhz9X3OeEjhL8Qrqk+mwm3V59r9buZ6nmqm6jeSaWe
yvrqU199Dua38LbCRwkP0Xwe1L06qt5E7Y3VfrTaawtvIdxZeAPhLYUPEz5Q
uLvwJOE6Kr10bUOV9YX7qN5W5RyVbVQ2UWmveTRQ/amu2154c+H3hbdWXVdl
jMa6VHUdlfOENyu8H+aq3rzwnpmnupeumSp8i+7TU/hC4ZuFe+feY7cKHy88
QXiB8AnCE4VvEK4hXFe4tfAHes5+wv/RXI5ReUz3PVp1H/aO2h9Un6+FZwif
rPavCz/TDaq/L/x+b1f9Ze730199fsy9N+/XtX2FrxV+SPg4/W+k+m+n+nu1
X632+9R+Hm0qF+v3d4X39m2F14a1Gqf2z9R/kuphuvbLwms8X3VLzb8H66V6
X5XjhDdW/TvPoP7NhY8QPkPtW6t+R/XwtA/31P8OV72e6g9Vz1Spp/K57jVd
1+6t/utofp+m9/dV4X24QPWx+t/ZvF/VtzPfzPM4PvO8mfNwjfuJ8EnMsfRz
7qS60JhPsc4qV7Ef9Pti1T/pf6fqukzjv6MyRDiqfk/9hvJcKpernJnm2VDX
bKr6Pc33U107XP1rqv9HwqcJF8KjhAcI/62+Ufd5nvkwP7WfpfaN1Ocz4TOF
1+deKueztxlD5T/qO1h1T5WPhU+kLvx8XXTfPzK/U9Z9XbUPU/sB6rOB8Ajk
DHJC/6ufedwTVW+hMl54vP73nPAxpefN/N9X/bTatuLccLYL76urVB+l+00R
vlHP0ULXHKs+G6muq/ZGaj9S7RsLNxQ+QnjX4Pf8ktr2CV6zd4Q/Uj0n89q1
CF7Xt9R+Xmk5PKb02rGGHwtvpLE2VPkps9xEfr6j9p2DZerzuvYT4UPVPqO0
Thgs/LbqEjmlPt1UpqnPBqpfU/93VU/PLAe31+8O6n+W+j6ka25F7ktuLxVe
iNwXbqT6QPU5XX0aCrcWHiJ8gK7/Ufg4lX3UfqLqC9W+MmMjad+r2k/3bStc
K/icc97f0Nh/CZ+MDNecD879vq5kTLW3YW7oFpXf1L5c/18jfLjwKvU/V79v
E35C/X/TWM8KH6v6V5VnhLuz99TnduEn1We08ELhp4QnCN8t/KLweOG7hF8Q
HqlxJ+oeD+t5L1P7SvaD2r9U+/M8I3tT7XcKP6/2P/T7b8ZS/waqD1A7SvlS
4UeE3xOeKvwQz1u1rvtHuC+6QfivimXEZ7pnF+ZWWP+hB18Xbp17fS7m3Qev
7dNqb5v7/c5U+zThpcJvCl8o/CDXCgeVh3WPzipDdO0fan8kt/7cXOUU/a6j
3w1Ud9XvbYT3Fx4sXF94b+EBwrlwLeFDhDPh9YQ7CFeFawp3Sv13YP3RX7rf
F5wbbAO176i6h9ofYd7C72oue6i9o/A5nJG0r4YKL1efg9jb6vOo8D3IaK1t
VF1H7fuqT5Hbztn7X+NHZ15VO+FSeCP2oPA6whsL74/NI7ydcDfhuzS3T5Bp
yCPGYm+q/ov1Em6l+s+q7amWqm8O1uMnq+Nbpfcee/BUlS801iD2M2uh9r30
Z43a7kG38luDHKz6XLXvKdxJeKRwE+FWwqcK75z7zI4Sbip8mPBo4V1y74fz
hJvlvu+YtFbYG2OFo+79nfBdamuR216awDvXXNsJr1V9ptoXCK9Q++6599V4
4f01xx+Ej1JZB12oegl2jcpePK/6nCF8nfAy1ha9K3w7dofKTpwFtW8l3ET4
+Krlw27CvYS3Ft5Z+AThYcLzhR8W3la4uXBv4X3QZ8J7qOyQ9tvAqnXBq/p9
kl5SS/X5Uu0tVHZChqo+RX12FG4pPEj4XM3tZ/ST6l9Veqm9qerTk715un43
05jthHPVC5L+Re/uXPoMvqy1ukm/R6h0Vdkv9xmdzrqpT0e1FaqjSjWz7CpL
y7fXhOervlalg8oBue3JGbr2Uf0+IrNtum3p/wfVjxde/8dU3537XAzHRhT+
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
           "]], Polygon3DBox[CompressedData["
1:eJwtm3ccl9MXx595vzJ+MpJQKckuyggZkVW0S6UhpCJ7lEIDZZQyU0hJaSgh
SpSWkb1SZMvODNl+n3ef+8d9fe+59z73+zz3ufecz/mc89Q544J252dJkjyf
J0mh3w5lkqzS7x2SB1eSpLXk1ySPlXyF5DaSX5d8i+RBkjtKfkfynZKvlHxA
SJKb0iS5X6VQvZP6V6t/nPqvUv9hkmdJHiz5YMkr9Kd7Sd5F8jaSW6hcqBtq
prZ31ddN4z9Q/W71D1Pf4ZIfknyl5EMknyp5jeS7JF8tuZPKctX/VVup/99f
9Ys03zGS39N8LdU/QPIJkj+S3FbytZJPlfyxxt+o8askPyW5heY+Vf3Pqi3R
8wT176W2ByWeo7az1Lev2q5R37sqb6rvB7XXV/1qlYc0T2O1PaDxl6n9oPj8
CyUPktxf8jGSH5N8reTDJH+o3510bTeVybp+P/Xfrf7z1d5I/d/pd3f1rVOZ
xTqp/1H1X6P2Q9V/sspAtZ/I8+j5flP/fhr7h/qHqG+VfreVfKrKfRp3k8bU
1O8A1pjrNP4F1a/XuEs1/gTJz0seKfkSycdLfk7yCMkXSz5J8krJN0i+TPLP
Wo8+7A/N1VXyDZp/Z9XPVdsxrJnqB6n+rcoMya00Zoja2kheo2tPkzxG1+yq
thuD73md6i8mfhbm20Vyofu/XvVWantVfWM010CNvUnyYMn3akwtyaeoXK16
a7V9ofFHq3+J6sM0/kL1Xa7/2F79n2m+01UfoFJN8p+Sz1f9FI1/ReNv1vgB
rK/klyWPlny55Js1Z22Nr6rxo1Q/Sv3PqH+o+i9Q/xGSF0m+WvJ5kptLflby
dexLyUdKXix5iOTzOW8qQzVfW7W9WHrPf535GTkLbSRfI7mT5A91f43UNkX1
S3X9geqrLXm85J6Sz+Q8Sr5f8iWSG0veU2W2rr9FbZ+rb2/JD0u+TfJO7CWN
+0H1+XqeU/Q8HdR/o/p7qG2D5MfV/6PqC9TfSvIe6p+p/lFq+1L3s5/kJzLv
2Tqab67Gf896aPyeGv9n7v3YT6Wm5H01/nGNn6Axu2p8fZXbVe+rcfurr57k
WyWfLbmB5N1L32sfyQ0l76UyJ/OYL1h7tW9U/VjNv6Xm313909lLatuBvau2
fVSvpXHbqe957kFybcnbc9Yl7y25JudE8iuSG0muJ7ma5DP0jF9o7qqas6fq
T6n9V/U3U9vmGvuGyqGS91J7dY0/S/J7XKv+JhpfX20zOHecT93PW+o/XPV9
NKaG+j6RfJLkgyXvLPlTyS0kHyJ5l4rPNGf7IPSE5NP1Oy/zO+fdo8QP0H81
Ukl5Vo2Zm3lNd1b/PirTVT9X1/VW3wP6/ZL5NT7n3tX/pOQr1H6u+uvqni9G
V9AffKY5233RwcE64q3M16A7ukgem1kH/K352km+TnJnyd9L/ojn0lzdsRFq
r6lr7lJfD7WfwfPxnOrroTJF/Xuo/w7191P7AervXLGtytRf0f8fpP4n1H+5
2vqyt9EdLIPkIyXfK7mB5jlQpblKE8m36drdVL7SmAVqm6jxe0r+WXJbzbdM
8m2qH6Hr1+p3nPruUDlM17ZX20j97sQZ0v/P1++9Gr+H+n/U2PtUPpXcWHJW
2IZgS25S++HYC8kzJPeXfLbkQyTPlzxAcj/JTSQvkDxQ8jmS9+cMSb5Ich/s
rcqTqv+itkT/fybPpuo3Kg+qfTQ6XP/9t+QjJN+o6wepfo/aH9G150muK7mt
5Jz9ozJB9cvVVlV9F5e2x13UVlFfD5U3Nc//NOf/gm0muqdxbls6QeO3U9+t
Koeof4yua8HeUzlKY7qr/0P+X/XhGn978LvYER1SWsdxfhbm1n092U+qb63r
tw7W2eiew3Lr8l4V2yns1TD1/6X2zyW/JHmj5uqh8hH6X+3XaOyd6AD2mea7
vfD5wdYfmNtWgkk+zWzzwCo8Y3uNvSvzs4+UvGe0N2epfofGjNDYqWqrq/7r
wQSqb6P+Fqr/FnxvXfU/j6p/M2wI+0djulf8TB0kj8/8rJwJzsrRuc/KPegf
9VUHE6g+Dh0r+QswB3tb11+ErlHb5sFzvqhry9T/xZ5spL4bMu/VmyXvoWs3
15iFkqsG2/4rwUN6lu0lz+Z5VZqqXkUlqP6Sxk/S+HM1pqbGnqz5UvQf75v3
IfkPje0leVvJTST/LnkU2ErXT2I+bCT4Q/3d1b6Frr+stL7txv1zf/o9SWP/
U9uRYI7S+vk0tVdR/yWl9XFXyZtJ/kBrcKTGV9HvPRWvK+vLeThO15+oNgDt
UZJXa8xbwfj128z74e1g/Lpe8rWSU96Z5Kd17b3gB7Ufrfk2qO1wdIjm6AV2
YT+rvhlrlvod1Na1mcof6l+isRM5K8G2+pvM+72vxu8k+XjJ/6qvn+Sd0ZWS
/5P8jeY8nr2u3/uwF+qvxlqo/y/ON/8nuSmYRPI5kneR3ALQzlkobVtqo8+w
9ZqHrj/j+3ii8P/9L/d6Pl74frbKvZ7LJB8suYbkZuiH3PYY+w32ROc8LXly
Yl10sfoXZcYUYAvsz/Roz7DfCzVfQ9W3UftRunZw4b26me7vVbWt5P0xVvVj
1f9LsO7hTHO20YnzIh5AV96i8XXj+Rqr+nKVQ8Aquv4YjR3EO1H/rmCKwpjn
wWjvsYdPq21/1bfV+KMrPtecb/D8iWpbUxgbNlD9JPX3zv28k9S2W2l5dsQX
YJFu6DDJ50nO8YUK+xJ7aNzxFdvUx6I9xtayB1uxlnFvrpJ8Cs8m+QSwqeSt
Nb6G7udztb0MRlV/XdWPq9jHeDSzjcT3wCcCKzfM7Su9VHiv15HcvGIbOo3z
n9i2zlL/Vtxr7vO7B/pJ/zUdfKT6EvSj+qujcyu26fgDNxa29dhw3k+L3LZ9
UWH7sb3kLSU/I7ke2AobUTFGZG2a5xE7ar59wZeZsf2Cwvqkam59ME9yDclb
5rY39TX+Mt3bVJUtgnX8bqx/4f0xv/D+3zq3/vhUv7U0dmVqG7dY/bupv5ra
t6rYRnKeOdfYTnxC7CN2El9xpsZvqWFZ7vM0Q/IWbI/c53NuYX1XkVzwLgqf
zyqSA9i5sP4Lue3pdPY7tjn3eQejYA+xi2CXB4pNXclfUX8+Uvh8b4YOV/8V
aquOrlL7P8E+J/oRPYkvOk3twLx/on6YWthv/zvqhwtUcs6+2l6N+7MJ+Ebz
76DrV3Kfmu95lc7qe1PlMPXvrfYd0c+6fhtdP0TtCyQvVvteqg/T+NO4t9K2
Ax8S/MqatMu8J1gr1qRD5j3BWvFM7TO/E571TtWX6trLVY7X3LdKfjq1T4d/
OE6/z0lernKC5Nq6porqz6i0Y+8H9zNubsU+1kuZMRK+V0f2u/qfxcdVfQD4
W32vSx5YeM9ge7Ax7CV0ILYFzINuREdie7A56E7ODLaPPcdZOl9lveZqrnJE
fEf3g0ESvzv2NLYOG8deZ0+DpfZMvNfZY+hudDJ7jz2CbeAMsHfYQ2CzOon3
FnsQW4HOZm+W+q82mTEuWPfm0vZ6g0pf7JGub5X5jK0O9nHOzfyO8X3qF9aV
r/I+Ve/HnuF9qj5ZY8/U79rUa75/YZ2EbprD+5K8srSt5Yxz1nuovK2+hmD6
wjYWW4uNBYs1A5Oo7yD1za7Yp8S33FJjrizsQ+JLPqnSWvX+uuYrXfu1ypP4
ayo/827BCKofV/heTgNjaI7jNP88sBftmn9oaSx8KBhY9ZPw0VRvq/6HK77f
tySv1Zjxeraeklen5lz2QJep7AD+UemCDiw9nmd7DLyicgB2Rtf/zvMG48s7
It4bGmyvWubG21up/U/waNwvv7EnVL9WZT+Nfb80tl6BvlO9aeGxYKiqnLvM
64PPfYDmPF1ta1LzA/jT4JOJko8Dn6O7Cp/9iRGvdCmNjf/WteMr5tj6ZdYJ
cG/4uOdk9lnxfcHnX6r+n9qWsHclv5IaP58ajCnAetskxhroMLAgOhDd1j5Y
t/ST3C5YJ4Fd0KHoKvYce2+o5N25Xn0Hq1TlvOleh+s+X8nMacFtgWPBswdw
j7k5H7A4mHx8YR0IVkKHohu535c565I7B9/PC6n5mbaqn4zNA7/x/6rfBz7g
/KkcmxnPo4826SU9f+tgXYJO2Ur1G4LxOTh9kfrHBfuX+JmLK7Zz2Dv8w2Nz
czyvZ/ZR4X7AMGAZfIa7Ve+gskzyJYn13UTJO2a+p0mxH10In9le9Zb6v8WS
L0yMP7l/fKmGcfxGlTMk19LvTP13p2DbeIXaOqo+ovCz8h/4F/icyzJzAvii
2MwzMnMe2FJsfC/WP7HtP4lzkFrfnaB6c5VZkqurfJa7/9F0k5pLTiyMCfBR
GyfGCtuxhzNjMrAZ55Lz2T7x+T9Z5fHU/g5nGkwCZ4iPC1aBo+mfmTOBu9kZ
vz8zJlwer0cfbCa5pep/Y/8z2+xVqh+rMgNbonJ0sJ3F3u6gMkz1nwrzleyt
pyr2EfAV3tD1PbU+dwavHe9pYVzfF1O/0w7BmB/sj8+B7/tOaa7iUsl/oitz
+4e1MvOFq0r7yr3Vtr4wJ/my+h5JzFXCub6ZmROAi32jtG+Pz4Dv8FZp32m4
5G+ZvzS2ZU/9IXkoZ1zX/xLxd2/1r0v8jprrfqeo/7PEnAXnr7fkj1PrQPgO
OOpnM3P2cNeHFPb1r5b8rub7LngvNov6/SDJY9U/U2U71euAedhrYDZd3yBY
9+Ez4TvB2SzNzKnD5eBT41tfJ/nXYA7tisycF9za4cFcDD4rviuYZVBmzgws
U7NifgqfGt8aTm1wZg4Nrg0MBD8OZgcb7cp657ah2wRzLsszczRNov2aor42
KgcH298mUd9hn49R2zR0CzoJrJr7vHB+4A7xCfpGfcv/wamtkDwzMdcGR3Vw
1Kez4/loG/EU5w0OGy4bDudq9nJh3xqbgs9YW/0TM3PeWWkfp03ED5wvfLDW
ES/gm8EhjpTcJTG3CMc4IjM/B/d4XjD3fbHqu1XMCfPuuuXmiuEQeTfdc3OL
cK7wdafl5mLhfOGCz8jNBeMT4hv2ys31Nor7iefHv4TDXZzZn4Tb5Z1xL81y
v0s47VejPYDrPr80lgRzgj3xR1+O+A//lBjLa5ljKsRe4LxfiecJfxX/dkV8
v/iXcODwkV1zc+Nwzs9k5tThouFY4S83xYcK75HO7O24d8DAm+Ipubnd7SPf
1lFyvYo5Z95Np9xcNPEo+H18OHy5Rbn5h1bsP8lLc5+N1uj4wpznkswxJLhQ
5sS/xb/jv9gTxEpOzr1X0C/YOmxg1/gOP8ltv3m3N/EOJP+EvS/NqePPT07s
3+Jznh71Pb4oPnqPzD49vnvDwrYTjAhWfEVzvaf6CJV9C3NU6O5vJPdXfYOu
XZUaI4K3mkb7BIYGSw8rHQs6TPI/qvcqHEsjpjZc167RNR+m1ikHcn5UqoAP
4/zETF7UuIcTx1K6B+sv9Ni8irn3j9LIT6ptlNqa5MaUz2v8itJrAacEt3Rh
MJ8Ar/A4775iXhVMubA0TgYv/xzfD++L+k8qF0j+D52o69/UmL80/lKeB/yl
/ssKnyvOV11snMaug5fJHFOAv7hEpQFrEcd3K4yt/0vtv1yvsd+nvn+eg/kZ
+6/K5ao/HMwnwCvMr9j/4VpIoStUfy23f4dNGBrXk3f1LftD9b2DY5djdck6
+J/CsUZijut17U6Se6fmvOHLq/M+Jd/MO88dPyVeR0yQ2CCcN/ws8Tu48J01
/uzUnPsveYx5ZubciYXuqP4z1T8m8f/tXdi2nZWYzz5S9zc+4rFqqu8MBlLf
meq7rWJOqHP0t8ADxJiJ5y6M9gu80CX6e+BfYqYfSF4a8Sb48/3MMULsby3N
P0f1C9R+p8a+UJobhJOGm0bfE68+Op6XfYJjXe2QNfbswrHFeqnX5wOVT1Jz
MHULx5SITzeL9oKYw3cRbxCLuDU3/sCfIvZOzPudzDEFYuE/6v+6YAsL++vV
g2Mn16j/o9LrRSx5GOun+g7BsZfhkj8ozRn1jHgMLumC0r47Pju+OzH1z+L7
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
fwuGD4Iv8lrwf/ONDd/asOdm5vaJ2Iv/B89lPpU=
           "]], Polygon3DBox[CompressedData["
1:eJwt13ncTlUeAPCn5/W+DGlkJMkyJEIxjS1LqsmSvY+1sTWZIrJkieyVQqL0
CYmIsTN22XfZQ/alIpkZYxgiyjTNNN/f3P74vc/5fc/v3Huf55577nmLdejR
tHs6lUp9LDLFMn+GZaRS++Fy+e/k+8RN7VzZUqnBoldWKjXHp4/UNLXTxVHJ
JfYcqyn/RJxm3xr7CTvjeDfZdfkXfLN2D/VXb0mlbvg8wH9Ql1v7SVFXzRus
rLquxtbQd4Sf4mvZOvE0O8/axDG1J7H/in+oeZ+10J5i7EB9+eXZRIY4KTKd
95TP79SOd4wJooTavGyFeMvYY/L1xjaQfyTaspnsDXa3fJRowN41thgf6lgT
WUs2VT5I3Z2ZyTXGtVbnq8UJdeN4M+0/ZE+l8mjfLiby21l7Y8upX2fcP1kl
n5VFPtecQ90HLG98f3Xl1a3VN5DdJR+uPUPfKnWTwrQ78udEHue6rr+7MbX5
GnFSzRRRTDsmQk19u9VMZgVZJ1aZbWXjWTbWhBVli9g10VX7cT4i7qeaa2KU
9luir74f43uIjtqPqNshvlLzgWtsFXNHDNZXQJ4r5ovv2Up9S3E5K/HoP6bu
uDjPprI2cRzxur6CMX/U99F+gm0XZ+K78dbRFsP03SW/wP8l/yHuBWvF/m3s
S9r12E5xVs27/EntFtmSa2oc47S3ajfzuU3flzHXRC7tp/wupRxjjHy0sY1Y
2+zJnIu5N5UXj3mv7hF1ex0jN79VnBa/dNwzPj9Xt17dhozkXsU9W85flx8w
dkX83vJa6pYZU1f/n2K+yj8Uv9bupu5hdXuiT+0zbB4bzYrJ+4l8rCm7h21U
18HYvzheJ+3nxTPyOmI1e1XdVvWfGTeXVdMexdoZ+1e1r2Ulz8847bP6/i5f
rPYl7c18lrqK8hGiMhvA6rOv1U9XW4r1Y3XYgbhmdj8bxBrGvWfz2KNsbDqZ
SzGnhjteJdaf1WNn2Sx15dlQ1oSdYDNZOTaENWbH4zlhD8TcY43YUTaCXfZ9
R7KJcXz5bFEh5g9roe40n89qsXHpZP7Hc7CJDWa72G7Rzb3fFXMh5q38hOjL
+rrmPKyxvIixa4ztz/Kz5uxetjnmMruN1WeF2CrWif0kn8lzsrkxb2PuyBvy
wmw1G8mqsIGsATvHNrqWAewIW8OqqvmGDY31l+fwvfPKF4j68knp5JmIZyOt
9hbx56xkXhf1PdZrv6x9SN0qdVX0b2D92WG2mj0U1xbfQyzMSta8Ysb2lufW
fkLd3epWOscc/RXjeWYt453BFrHmbDYbGeu9cTPFlPg92AV9F+XTxQS2lJ2P
d4B8Vjxz8Xuwi+ySfJHoo70pfkN9FeQ5RQHfvXis4+Kicy5lg2ItULdQXQ35
Et6eLWPvsyJsQfwm2jvYVX1X5MfFrlgPWeuYf/I3xWNsOPs9u+I8N+Slnfd6
rMV8rVjqHE/Ll8f8U1c4jp+ZXENcy7f6vpG3V3fO2I6O8wX7mi1mT2kvSCfP
cR/5O1nJ3I45Pl3tWPly8Wy8Q9lH+i4bew8roj9PvHuNLSHPGRHvT9ZTXJGv
EF2M3cJnG1vG2JWsK9vG5rKy7GP2AtvK5rDSbGNcI+vFHmeb5JvFUtab1WJb
Yqx4L/YPbBtrGu8EUVu7L1sZ67t8rXP0jTUpnexfKrN1rB87GHWsElvDerK9
bDErz1azF9ketiieX7YjM1lrYs1ZFfde3ivWZ+06rGDsk/wOS9jAjOSex72v
Lu8mslg19iu2RN2hWI/Zd+xL1lbNs+I/sTank/1T7KPmsufVLWHjWSn5QZ2T
2Y10sreJPU511sa9yW9MVVFN/kf+o5rq6WT/Npvv5WPjGWD7WWMdHeIdJ68q
lKRm+fMi+4W6R1l+tjzW/TgIq81yac6L90C8W+VV0v/vSs1kh+PdKvmenWbt
1ByJ9zK7yc6w9uyz2BOxa+w4a5mZrIlj4j3O/hZ7O+vBgXiPsqvyY+paqJsn
Omckz3Q82/fJe4qS0c9ecx0vGzefdVe3kn2or9zPe58CrCVrJR5zjmm8HZsV
+yR1heQPZiXzfTR70PF+Iz+bmey1KsoriEtsIett7EZ1M4z9rfyVzGQex3ye
q2+tfF/sJ2MdYEf0NWP72YR4btlR1pxNYyUzkvkc83pDPOfOdVvcm1jv4p2h
5tXM5LmI52N+PLPyT2NvEuseO6CvCZsR95jNZ2NYcfmeeP7ZBbaPNWJb2Cvs
FNsYe3U2RBRl7dgDbFfsJ1kh1pqVYdvZIFaYtWFlY82L/wdYkdjnsPtjjYr9
UVw3+5xtij1f7F1EGfZCzFV2WF3neKewuuxWNp8NY6VZF1aNHWJDWQnWgVVg
+2MPy7KzGixfrPusB8vBarI72LKYH+wO1oyViDWHDWB3ZiRzKObSFtaFpVk9
lpstiD0Nu491jueGHWQ//bzXn+xzkvg+1jl1GeoapJP7F/dxN3879kHsU9Yw
1rp417KTbAN7mM0Rndji2DuxkjEP4l0V15CR7Ntj/z6bd5Qv0n5P372xXjne
yFj72U5WNzPZgwzJSPYased4yLzfFv9LZST/g8X/YrXV7WRvsnNsV+yZY41l
w9lXbDurxbazEews28HqsP8Be1flnQ==
           "]], 
          Polygon3DBox[{{1297, 1296, 1780, 1170, 1171, 1781}, {1421, 846, 970,
            1762, 1285, 1286}, {1528, 1020, 742, 743, 1021, 1529}, {1474, 947,
            628, 629, 948, 1475}, {1714, 867, 698, 697, 1006, 1517}, {1719, 
           879, 713, 712, 1014, 1521}, {1695, 805, 629, 628, 941, 1468}, {
           1419, 844, 1167, 1779, 1281, 1282}, {1426, 849, 978, 1765, 1292, 
           1293}, {1427, 850, 979, 1766, 1294, 1295}, {1286, 1285, 1763, 971, 
           972, 1764}, {1686, 778, 599, 598, 1157, 1658}}]},
         Annotation[#, "Charting`Private`Tag$13828#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0r1LlVEcB/Bzr5apmUIILSpuIeZg+YaKWESItgg15KC2ZNpVWkInR/0L
cnBwCB1TIYVo1CFcBF9ur6biUgR2NUsn7XNs+N3P93ee85znPOc+5Y+HOgcT
IYQpNS/EPOpnj6+yQyjia5bxHau4wmam2cGzCyG0uKdLfnIxhIzcofr1z/Qn
8sO4sHkj6JGL5XG5lBOs4AxrucC7XOYfVpq/qtb1s+xT+8kQNvS/uMkM0zzg
Bx7yI0vs8an5n+QX8mncl1pTn42NGAvmDug31W/5S9y3fCR/jXvgFv/yG4+5
zRPuMGGNavPTalc/x5Tqsfc1fSeXeIdveIvTvM6XvOaMes0fk5/L+dbt1l91
fTg+V36gTuO76NvljPxI3mM7N9jE97zBtyyNWuMHF91TyEnWq/uecSWuxQK2
8TLvMT+eP/OYZZ0683PllPxTrlW3Xb9k7Ltco1r1OfHd5BbZa4Tm5PlfHhoZ
j7mBWaxLnh95SBq8mfj/3f0Dga5QTw==
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1187, 1462, 761, 1186, 1784, 1377, 1188, 1785, 1378, 1189, 
       1786, 1379, 1190, 1787, 1380, 1191, 1749, 1788, 1381, 1604, 1750, 1789,
        1657, 1668, 1382, 1605, 1966, 1463, 1659, 1669, 766, 1635, 1464, 1684,
        1984, 1383, 1192, 1790, 1384, 1193, 1791, 1385, 1194, 1792, 1386, 
       1195, 1793, 1387, 1196, 1751, 1794, 1388, 1465}], 
      Line3DBox[{1198, 1685, 1854, 1197, 773, 1199, 1795, 1389, 1200, 1796, 
       1390, 1201, 1797, 1391, 1202, 1798, 1392, 1203, 1977, 1656, 1393, 1673,
        1981, 1658, 1686, 1978, 1678, 1677, 1687, 1982, 1204, 1799, 1394, 
       1205, 1800, 1395, 1206, 1801, 1396, 1207, 1802, 1397, 1208, 1803, 1398,
        1209}], 
      Line3DBox[{1211, 1688, 1855, 1210, 1689, 1856, 1212, 787, 1213, 1804, 
       1399, 1214, 1805, 1400, 1215, 1806, 1401, 1216, 1807, 1402, 1217, 1808,
        1690, 1857, 1218, 1691, 1858, 1219, 795, 1220, 1809, 1403, 1221, 1810,
        1404, 1222, 1811, 1405, 1223, 1812, 1406, 1224}], 
      Line3DBox[{1226, 1692, 1859, 1225, 1693, 1860, 1227, 1694, 1861, 1228, 
       803, 1229, 1813, 1407, 1230, 1925, 1466, 1408, 1532, 1946, 1467, 1409, 
       1533, 1947, 1468, 1695, 1926, 1534, 1469, 1696, 1927, 1231, 1697, 1862,
        1232, 1814, 1410, 1233, 1815, 1411, 1234, 1816, 1412, 1235, 1817, 
       1413, 1236}], 
      Line3DBox[{1238, 1698, 1863, 1237, 1699, 1864, 1239, 1700, 1865, 1240, 
       1701, 1866, 1241, 816, 1242, 1928, 1470, 1471, 1243, 1929, 1472, 1473, 
       1244, 1930, 1474, 1475, 1948, 1245, 1476, 1477, 1931, 1246, 1702, 1867,
        1247, 1703, 1868, 1248, 1818, 1414, 1249, 1819, 1415, 1250, 1820, 
       1416, 1251}], 
      Line3DBox[{1264, 1496, 1495, 1933, 1263, 1417, 1821, 1262, 1874, 1705, 
       1261, 1760, 1873, 1493, 1260, 1758, 1872, 1491, 1259, 1122, 1490, 1580,
        1489, 1258, 1951, 1488, 1606, 1487, 1607, 1967, 1609, 1608, 1647, 
       1486, 1651, 1485, 1650, 1974, 1257, 1484, 1579, 958, 1627, 1256, 1482, 
       1871, 1754, 1255, 1752, 1870, 1480, 1254, 1869, 1704, 1253, 1983, 1680,
        1679, 1252, 1932, 1479, 1478, 1535}], Line3DBox[CompressedData["
1:eJwVzztOAgEURuHLex2ILaCyDRtQAS0Naqcb0BYqSdRaFoBLcAXG1pgYIYQl
gCgqQvgsTv5zz0wymfzxRe08ERG7WKUjatmIPVRxhWttiUt+lIuY2j/3IX/g
Cz62TXfOvmYifrURb2hZ+6L9aENe1zK2gh18611ti28jjU0U0Nfnnuf5BlIo
o6h9ochLSKLn3YH91J99L8HvtXc7097sgTvsk+cf2r67757yyf9/u2/sHW4x
0R+1Nu+ghVOc4AxroHUrtw==
       "]], Line3DBox[CompressedData["
1:eJwNyqtOAmAYBuDPA5gc4ommIrcgAQ9cgdONgc1isggzOJs4IuAR4QI4NAub
wWtxc85pMBgodp/w7H2/9/+zJ7VSdSoi9olERCUZcUSZa8ZzEU17Xb9izd1y
T7Out+Usbyx479tu9CTf7g13Wt66T+UFr7aJXGSLO2+f/OrP3vJyiQL39mP5
Yt+WOyyzy+FMxJf3Pb3ICgP/HmwH+rtclUPboz7PBxnbyNbRU2T1J5nmz9um
u6s39B9y7jNZ5ZKet3P5D+XyI1Y=
       "]], Line3DBox[CompressedData["
1:eJwVzksug3EUhvHTUL0qYQE0UqzA1KWzqhADl7S0zFzCGsRE6CIYaxMx7kaE
GBAmggFhqD+DJ8/7nnP+X77i7vHqUSIi1jCajNgYiNjEOk5xm4r44RG7E97R
v3lYb8oduSC/ckMf4kc9jxd526zAD3oOH/KN2QovYxBzKGMWWTdvfO1miaeQ
xzQWMNEfkXFTkquYRA4zmEfHu3dOuxnjRYz/fxefuLLf45T9PTLypdkzJ/Un
3tLTfKf3oa639YT8xTX9nFu4wJ9/+uWu+RlXcIB9HKIHIwUnMw==
       "]], 
      Line3DBox[{1301, 1511, 1710, 1935, 1300, 1828, 1431, 1302, 1829, 1432, 
       1303, 1504, 1830, 1433, 1304, 1767, 1831, 1434, 1591, 1628, 1124, 1592,
        1435, 1512, 1936, 1506, 1630, 1632, 1654, 1436, 1648, 1973, 1633, 
       1634, 1631, 1652, 1711, 1975, 1513, 1508, 1578, 1626, 857, 1577, 1509, 
       1832, 1437, 1305, 1510, 1833, 1438, 1306, 1834, 1439, 1307, 1835, 1440,
        1308, 1937, 1514, 1441, 1560}], 
      Line3DBox[{1310, 1712, 1890, 1309, 1713, 1891, 1311, 864, 1312, 1836, 
       1442, 1313, 1837, 1443, 1314, 1938, 1515, 1444, 1561, 1958, 1516, 1445,
        1562, 1959, 1517, 1714, 1939, 1563, 1518, 1715, 1940, 1315, 869, 1316,
        1838, 1446, 1317, 1839, 1447, 1318, 1840, 1448, 1319, 1841, 1449, 
       1320}], Line3DBox[{1322, 1716, 1892, 1321, 1717, 1893, 1323, 1718, 
       1894, 1324, 877, 1325, 1842, 1450, 1326, 1941, 1519, 1451, 1564, 1960, 
       1520, 1452, 1565, 1961, 1521, 1719, 1942, 1566, 1522, 1720, 1943, 1327,
        1721, 1895, 1328, 882, 1329, 1843, 1453, 1330, 1844, 1454, 1331, 1845,
        1455, 1332}], 
      Line3DBox[{1334, 1722, 1896, 1333, 1723, 1897, 1335, 1724, 1898, 1336, 
       1725, 1899, 1337, 1726, 1900, 1338, 1846, 1456, 1339, 1847, 1457, 1340,
        1848, 1727, 1901, 1341, 1728, 1902, 1342, 1729, 1903, 1343, 1730, 
       1904, 1344, 898, 1345, 1849, 1458, 1346, 1850, 1459, 1347}], 
      Line3DBox[{1349, 1731, 1905, 1348, 1732, 1906, 1350, 1733, 1907, 1351, 
       1734, 1908, 1352, 1735, 1909, 1353, 906, 1354, 1851, 1460, 1355, 1852, 
       1736, 1910, 1356, 1737, 1911, 1357, 1738, 1912, 1358, 1739, 1913, 1359,
        1740, 1914, 1360, 914, 1361, 1853, 1461, 1362}], 
      Line3DBox[{1376, 1531, 1023, 1375, 1924, 1748, 1374, 1923, 1747, 1373, 
       1922, 1746, 1372, 1921, 1745, 1371, 1770, 1920, 1530, 1370, 1971, 1529,
        1528, 1945, 1369, 1527, 1019, 1368, 1526, 1919, 1769, 1367, 1918, 
       1744, 1366, 1917, 1743, 1365, 1916, 1742, 1364, 1915, 1741, 1363, 1944,
        1524, 1523, 1525}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{567, 762, 1784, 568, 773, 592, 1856, 786, 607, 1860, 801, 
       622, 1864, 813, 637, 1185, 1983, 825, 649, 1875, 1159, 835, 659, 1883, 
       1167, 844, 1822, 669, 853, 1828, 679, 1891, 863, 691, 1893, 875, 706, 
       1897, 887, 721, 1906, 902, 736, 1915, 917, 751}], 
      Line3DBox[{569, 763, 1785, 570, 774, 1795, 593, 787, 608, 1861, 802, 
       623, 1865, 814, 638, 1869, 826, 650, 1876, 836, 660, 1884, 845, 1823, 
       670, 854, 1829, 680, 864, 692, 1894, 876, 707, 1898, 888, 722, 1907, 
       903, 737, 1916, 918, 752}], 
      Line3DBox[{571, 764, 1786, 572, 775, 1796, 594, 788, 1804, 609, 803, 
       624, 1866, 815, 639, 1870, 952, 827, 651, 1877, 953, 837, 661, 1885, 
       970, 846, 1954, 671, 981, 855, 1830, 681, 865, 1836, 693, 877, 708, 
       1899, 889, 723, 1908, 904, 738, 1917, 919, 753}], 
      Line3DBox[{573, 765, 1787, 574, 776, 1797, 595, 789, 1805, 610, 804, 
       1813, 625, 816, 640, 1871, 954, 955, 1034, 1949, 956, 957, 1041, 1952, 
       971, 972, 1824, 1043, 982, 983, 1831, 682, 866, 1837, 694, 878, 1842, 
       709, 1900, 890, 724, 1909, 905, 739, 1918, 920, 754}], 
      Line3DBox[{575, 928, 929, 1788, 576, 777, 1798, 596, 790, 1806, 611, 
       935, 1925, 936, 626, 943, 1928, 944, 1064, 1120, 958, 1065, 959, 1036, 
       1950, 960, 1135, 961, 1136, 1042, 1953, 1137, 1147, 974, 1152, 975, 
       1151, 1976, 1044, 985, 1079, 986, 1124, 1080, 1000, 1938, 1001, 695, 
       1008, 1941, 1009, 710, 891, 1846, 725, 906, 740, 1919, 1017, 1018, 
       1053}], Line3DBox[{577, 1096, 1097, 1095, 930, 1789, 1155, 1153, 1977, 
       1154, 597, 791, 1807, 612, 937, 1028, 1946, 938, 627, 945, 1929, 1031, 
       946, 1101, 1148, 1974, 1149, 1035, 1087, 1086, 1038, 1069, 1070, 973, 
       1068, 1067, 1089, 1965, 1077, 1078, 984, 1076, 1075, 1964, 1045, 1091, 
       1092, 995, 1936, 988, 1126, 1002, 1047, 1958, 1003, 696, 1010, 1050, 
       1960, 1011, 711, 892, 1847, 726, 907, 1851, 741, 1019, 1139, 1141, 
       1140, 1142}], Line3DBox[CompressedData["
1:eJwVzq1Lg1EcBeDfnKJlsCSDgSJ+VBd1zLKoMnUDQTQpY1q2IvgBNjUM/wHR
ZhA31LAZDPZFm8EqS2ISk8HH8HDOPfe+8E5sN8r1RERUKA5ELA1GLLPIw3DE
TTLiXD/lmhfbmVz3NuMu7VzV2/qQ/cr5Xt+3dWTTecT+pJfkCms82ldligXq
FEgzRst9WY7z6tuc3GGWIpNsMMW7+7ys0vXdvBxlmk1m+PBmTx7//4s3u7LG
pz0jb21f+rP//pZZ253tR+/ZTuSc85t+oRf0vv6rX+pb3h9ywBF//0ooaQ==

       "]], 
      Line3DBox[{581, 768, 1790, 582, 780, 1799, 601, 795, 616, 1862, 807, 
       631, 1867, 819, 643, 1872, 964, 830, 654, 1879, 965, 840, 664, 1886, 
       978, 849, 1956, 674, 991, 858, 1832, 685, 869, 700, 1895, 881, 715, 
       1903, 896, 730, 1912, 911, 745, 1921, 923, 757}], 
      Line3DBox[{583, 769, 1791, 584, 781, 1800, 602, 796, 1809, 617, 808, 
       1814, 632, 1868, 820, 644, 1873, 966, 831, 655, 1880, 967, 841, 665, 
       1887, 979, 850, 1957, 675, 992, 859, 1833, 686, 870, 1838, 701, 882, 
       716, 1904, 897, 731, 1913, 912, 746, 1922, 924, 758}], 
      Line3DBox[{585, 770, 1792, 586, 782, 1801, 603, 797, 1810, 618, 809, 
       1815, 633, 821, 1818, 645, 1874, 832, 656, 1881, 842, 666, 1888, 851, 
       1825, 676, 860, 1834, 687, 871, 1839, 702, 883, 1843, 717, 898, 732, 
       1914, 913, 747, 1923, 925, 759}], 
      Line3DBox[{587, 771, 1793, 588, 783, 1802, 604, 798, 1811, 619, 810, 
       1816, 634, 822, 1819, 646, 833, 1821, 657, 1882, 1162, 1163, 667, 1889,
        1170, 1171, 1826, 677, 861, 1835, 688, 872, 1840, 703, 884, 1844, 718,
        899, 1849, 733, 914, 748, 1924, 926, 760}], 
      Line3DBox[{589, 933, 934, 1794, 590, 784, 1803, 605, 799, 1812, 620, 
       811, 1817, 635, 823, 1820, 647, 968, 1933, 969, 1112, 1165, 1166, 1164,
        980, 1114, 1970, 1173, 1174, 1172, 993, 1827, 1138, 998, 1937, 999, 
       689, 873, 1841, 704, 885, 1845, 719, 900, 1850, 734, 915, 1853, 749, 
       1023, 1024, 1025}], 
      Line3DBox[{750, 916, 1944, 1016, 735, 901, 1905, 720, 886, 1896, 705, 
       874, 1892, 690, 862, 1890, 678, 852, 1935, 994, 668, 1969, 843, 1169, 
       1168, 1179, 1178, 1980, 658, 834, 1161, 1160, 1177, 1979, 1176, 648, 
       824, 1932, 951, 636, 812, 1863, 621, 800, 1859, 606, 785, 1855, 591, 
       772, 1854, 566, 761, 927, 1026}], 
      Line3DBox[{755, 921, 1118, 1117, 1971, 1021, 743, 909, 1910, 728, 894, 
       1901, 713, 879, 1942, 1052, 1013, 698, 867, 1939, 1049, 1005, 683, 856,
        1975, 1150, 997, 1094, 1093, 672, 847, 1083, 989, 1058, 1057, 1963, 
       662, 838, 1056, 977, 1074, 1934, 1073, 652, 828, 1088, 1039, 1951, 962,
        641, 817, 1033, 1948, 948, 629, 805, 1926, 1030, 940, 614, 793, 1857, 
       599, 778, 1978, 1182, 1184, 1183, 579, 766, 1175, 1130, 1132, 1131, 
       1133}], Line3DBox[{756, 922, 1022, 1920, 744, 910, 1911, 729, 895, 
       1902, 714, 880, 1943, 1015, 699, 868, 1940, 1007, 684, 857, 1119, 1063,
        990, 673, 1955, 848, 1109, 1111, 1110, 1968, 663, 839, 1108, 1107, 
       963, 1878, 653, 829, 1066, 1122, 1121, 642, 818, 1931, 950, 630, 806, 
       1927, 942, 615, 794, 1858, 600, 779, 1982, 1181, 580, 1984, 767, 932, 
       1027}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
kZPf1W4wIWMByv8itRX16Wrv/WVxEurTFDQS9e9qN/J8+BP173tRDMfb1a61
tfA6jveQkRji09V++Px1XcRn5oZviGdX+/IKfTvEk/JOykMp/6Q8ifImypco
rlOcp/hOcYjiEsUj8pvkR8l/0jqndU/rneyS7JTsk/QmXAnPxXuXHcR+9JSR
aFPA/u2LazvsWbOnjjPKF9d+JIbyP/L2HNhpzyyHt2cT3p6dO+2ZreTtWZS3
5+ed9szaeHve7pmN+LDNZkLHEZ9GxfFzEJ/5ObmIJ1ObeC4e8Xz8Kn8g4kn+
mfJ68s+Ud1IeSvkn5UmUN1G+RHGd4jzFd4pDFJcoHpHfJD9K/pPWOa37e938
M9kp2SfhSLgSnls7/T6j53hevpptCKB/FjfaMQv1sfhq4In6bIsedAf985pH
5hao/+m3gctR/9o1kvLon99WvYvH8bLam7NxvJN5/zy00z+zO938889O/8zI
P1NdRHUS1UeUx1NeT/k85Z2Uh1L+SXkS5U0UrymuU5yn+E5xiOISxSPym+RH
yX8SzrTuab2TXZKdkn0SjoQr4cnnPYye2nz+E1UyZBHmG1GNsd6oP/mHnwFb
JTHfeH6pcR2ON2mwbTGO16rVOR/zjXBD3a+Iz8XPbX8x39Dk842lnfkGm8Ln
G1RnUt1J9SbVRVQnUX1EeTzl9ZTPU95JeSjln5QnUd5E+FNcpzhP8Z3iEMUl
ikeEM/lR8p+0zmnd03onuyQ7JfskHAlXwpPP+xk91/P5vy+fP9d15s8shc+f
bwfPWYz585hAqTTEZ0iypSTi84fPny0782d2m8+fqW6nOp7qd6ozqe6kepPq
IqqTqD6iPJ7yesrnKe+kPJTyT8qTKG+ifIniOsV5iu+EM8Ulwof8JvlR8p+0
zmnd03onuyQ7JfskHAlXwrNOXx/rXkZPyh9etDSbYz3IbGt+Ij51Hh/XIj53
ZlZhfc16ZxZjfc1ivJ2TEU/aB6F9EdoPobqd6niq36nOpLqT6k2qi6hOovqI
8njK6ymfp7yT8lDKPylPoryJ8qWufIiP8xTfKQ5RXKJ4RH6T/Cj5T1rntO5p
vZNdkp2SfRKOhCvh2VL6F/d9GD3fquj9Rnwi7MR34v5G6uDD/RBPtVkrjRHP
rn0lfp+J9pdoH4T2RWg/hOp2quOpfqc6k+pOqjepLqI6ieojyuMpblC8oLyT
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
aMwZWYT21vmsgpjc+5Fcvy77sdzmeQz7Xw1W6M+Nk1X4Hf+CeMy4myKM4+2f
uBvHwz6rfVXD8T0c7vEFxzWfneqD/Xc0LeuJOD2Qutzjf+nPqL99/2wcf9d7
nZQO2iMOTZ49L3HzzQr0rq7B+S/5ubc9iZv3S+4jmrn5ZnEa23vh/Ev2EJjj
vKteHnke7eObT7At15+V8/3JPkQsO+yFkZ3Qevvv9VcF+nPnIP5d+oQ19Y1G
/JNEMtFu2OPEkVPQjuacPiKD+FM/Wn+07sivkZ8j/0b96T0k38rraCLO69DC
rzjPzLDMfibKT16kPH7LMlfQ13dQtvkhYJeGO7gqW3hBye8f1jjOw5VSOG5m
tr/6D463pBMXRjgRPmeHimlNWxrJzljdWrElQcAuNC07ufK4F9A6pHVJ67Fn
a8bIu4fKGD0HWd1eol8TA9a/Y/B31/OE5nbA9gleR8ZivwpVJVFsF+H7k/8l
f0x+mOzvv+2xqsvvkB8i/9Mtf2Dkn8kvk58m/0x6kF6kD+FP9k52Tn6N/Bz5
t8o15aqoT8lFk2P43nwl0Q59aD3Q+qB1QXZP64Dsn9YJrQOyf1oP3dtpndO6
p/X+MnrEFLSHXvaWaA9w/jDzRnsgu6d1QPZPdt/dT6aHBO9Ge1D2O4D2AFtK
VpmgPRA+5FfIn1De1j0+kl8mP03+md5HfpreS+8L6Xx/13vJz5LfJX9LfpP8
KPlP8r/kj8kPd+vPqD+tK1pntL5oXdE6o/VFcYLiBsWL4i1nVyLui6/H3960
jPMD9md9OtYjbx9kL2QntD5pvdI6pfVJ65XWKfk78n/k98jfdV/X2zvXNXRf
1+SnyG+Rv8r49/Ma6r1x1jUcB5u3cvMz1D/+ompLUlEwGB6adCE8TwA58gfS
w/S9qZ11bxf+2DMo/spbLv9+d90ztg4ioyc+8w/92PX3JI/6FybOxHb2cv3Q
Rmwf0JD/Cdu79Wf/R39G/ck+KW5QvPCbkeHN6cNGW9y+wenDPiobO6A+pB+v
LyM9CS/yi4RbofeEl4+TsuF1iuj0u7U1oPdw1Rb9aQlQHbxcYeDKNEj4c/Lx
cMU6KN+0p2aozHv4JLx9w8ofkaCQO6dg7UkBOzFh9qGH9+KgqHaDPyeHHVh+
QJKTw/bzcjJmJ8lzcpipXBPKYT8caipQTonPHQl834Xye0H4d+MXr9uG/el9
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
JA3+NIy1MTKvA4Ws+hSpq1EwVc4v/PyMqKjBPC9Bi+cj7Orsz37x/WX5/lf7
bc7k5DPhPf+EUL7ygAwZlD/R/bQ2pw+LHSg9CfVZvS/qAOqjsaL5I6c/8z6n
Uon6j9a+ugj1V1xfdpAbLytfsX4IjrfJTV4Bx9sm9G4Xhw8TdTtphfgszL0e
i/iE9tUTcHiy6SvnGSKeQ3TkFRHPw4fcDIfurgOJxf2e9CvMgPjV0o3PM30g
9Kr26Z4ZtRCXcOLIyq9ZcCR8v1frnwAos9g2vLK1BvZHmKjOic4Bjbd3Cl+9
DIZ/UavN9j2ohujHllob2vMh7YaBT/XBMIjWiZigN7YS3vQp+XnLohgOCBs6
vtkTCa/uaWqnT/vKtjfcnHT7Tw0cKYuYu1ftLXgccO1lk1jCfiT6zyxvLgfD
icuTTr6LhsWHD07k5LATD9PrUU6KjfsjlPNvtSO+l82e77AF31uQHeWB75WO
7jOS05Npta1cjnq+Urifj3pOyf54lhsXi7+YtBPH9Syt/BmOS2vpUyMOB6Y5
Wd4Ocdj8o70acQg7dt0g5xaXnyQZLbN2egs/Wu7ZOn73hQzD7UUndglA+GvY
k14/E0DWbaN5WFwgDO5Z5FA/QgC3x9idCov8CI3m8V/ax7/o+g4uw38Hn8x/
3/x0Kui92PASZnJ68+O9N8rBu3TJn2aTVHj2ykpNW7malT+7OfHL03w4emBP
e+LUd3An6qFJrHsti7Xu279/eBb4fP9UN+gT6/rO15//7jeC/34neDfDkdOH
zbBQOYH6yLS8yUR9dhTsH6e4U8AWxW+odu3/Hmz7G6eYZwTC2OO9VJ7+h6cj
1HuXVO59JT94lb1G+l3tf9rDxI/mzhcJguefS4+sK/1P+3U24p23+4vu36+F
lvLfr71eiskoPaul/S6hYtvYEQunZHfflxOy5+usXz+qLiqH/6c91HzI5epe
/993Z6Fe/HfMyDV1qE9X+6/JabGoT4pl6kaX2v+0b1tj6X54ShA8C9TQw/kV
Fpt5n5tfFjH4yQOcXwdJcTEOH1C8L9H7Wf/37G/xpAzEZyA/vy6d88sa+Pml
79eL+e/Xk/j5zZieH4/zK7lUzpmbX/bk/pNWnN+9876o4vy2/3w7nZtfltor
5i/Or3nGl475Pfwpuy83v2zo7+m1OL/0XXYM/512OD+/dfz8LuucXybNz69g
mR7qz7bqr2jn5pexecId86vLr/fZneudveXXewi/3j92rnemy6/30OvhIrje
+55/oMGtIxa25WBBxzqyfH4T17vokV07uXXHfA2tOtbd8LOp43C995xzuJlb
p+xCrbIdrtO3rtu0cL3v7Z04mVvvLO6Viwyud5OVgn/W3HqH+Wwut95Z7e2r
73G9e2QtHo/r/ciu8iaUM3mP50OUM+anBL6XrfkyfTe+Nzk24Tm+tyHRQhTX
+33/wWtRz/vv6nJRzzkh2mdwvZdWaevguFaHrnHFcW3h1/v2zvXONvHr/SMf
d6w74w6L4eNOrMLRnRh3DiWMfcj5VWaxqeAd+tXVLsfRD8P5qjb0wywt4nOH
H275syQF446QmHsZ57eZZa12h9++cyh2N8adZU6aEzg/z87Nbu7w8/K3izvi
ToT4ZIw7TL1qVkdcSNm7KxHjTsVHHYwjbEuPCZ8wjhxV/PkC4042z0Ppw/NQ
qjv7sxK+vybf/8zax9kYd5aqfWiP4+TH/6iVRvkhiyRQH/ZmcFGHPr00Hfeh
PovUX2HcZMOVlDFusnhd1wWo/68lKh1xp2XPUoyzrI+H5Twcr+uiDRiXmXF4
XwfER23z9WjEp3BSSR3GHbmn+40Rz+ibSxYinv58HrW9M49i1nweNfPwvrWY
R71/+uALlycwK7eCw5gnnAYFG8yjXm+R1+DyCqa8qLQY8wovOfvbmEc5Hmgr
4vIQNnFJQkce4r3r7j7Mo/YUWmIexYTeFHTkLXniHu37uDzqV1MW5lEsXHhj
HeY5Z12izDGPWhR/AfMiZq02rwfmRRIqPv+Ay6O681CedfZninx/K77/p8fq
/TCPsir5jXkU04ztWYvyM8+bYV7H7ko0ZKE+KbUi2qjPno277mAedXXJhg79
g/QlO/LAs6WidphHyZX8U8PxrnY60ZE3RiZv2Yh51IXp4phHMRGn3zqIT/6v
hlmYR50PmLUU8RTzHfMG8ZxsrnYK6wLz5BpvLo9lsSEGUzGPPbm+cg3WBdt/
vwvl8l42pnjMQMx7X96eYYd1wb1NMQO4PJldaHt+CPPk7M321lgXrLNa68bl
1Sz491sTzKtVVLNfYF3QvG5HEJeHMx2pXeswD08JUr2OdUGCdIkJl7ezh/bX
IzFvn3Q1fCTWBSnLT2Kez1ReXryFeX5GwuU0rAu681BWdvZnyXz/lXz/CYkN
5lgXDL5kaYzyU/e9e4Xy77wErFPYjFseWKew8gtb1VCfRRoTH2Jd8MTWwhX1
99VONUL9BcFrHLAuWL6poh+ONylBpGO8Zb3bsW5izYpnsG5iewIn90N81F+f
M8a6oF99xnPE8/Wy1xMQz6BHjVZY17u7Vx3i6jLmM1fQUZctPqSTgPW7+1dZ
c66+Y+t/SulhfVd+Y8wzrNNr9M61cnUi84lu+4B14vo+I39hPb5ueMs7rt5k
aYU66VhvbtKd4Y11d1Iv2z9c3cqs109+inWrSVFNPdbXremrv3L1NZsvUrMH
6+s7cY4fvh2OhboHK+VFnQTsRX52qBlXL4/eOWbl/iN+Ud15KEJ7Boh8PxzL
Au6HzcX+y01MQrC/3CTXNk4++z214AvK/7Tz8W6Uf3FwjA/W0Xo1izr0uTja
2QX1GVKt3oL1srXF8QTU3zDdKg31v11g6Ip1cW/7po7x/o4an4Dj9X546wPW
v/KKZ80Qn6jZ7CjiE6bhi/sk7GfYxAOIp/sgE3nE0/7cUgFXF4Pc/SYnri5m
4pMVh2Jd/PDmbob7J5tZ9jiuvmZDZh0/jfV1b01BM+6TKO2depar01nMKoWZ
WKenvQ3zxf0Q+ZYpi7l6nw1TyLXFet9ddEwf3PfYmDptdVp9Lbt1P8cF9w0O
zchdtuwFY3ObFYcmhQnYtkfFIv33eEHQrCnLprQms9NKI2659BCw3DFVWbjv
Edwph2nwcm7wcnI638tk+fcO4d+7JubUL9xPaFSVP4N6is8zkUY9o0fa474Q
C0gLxH0htvFzqRGOK+N8tX6RY1nX8/6d0x6Tg93gsfN12c0WJaCv0Rwtd7EC
1oxMShQZ5A72RrvsDw8uAsmSl1v991XBvnaJmbs0PeDegoV5s6XzYN/kPgpH
Z9dAuIVr+G1DTxAM8ni2TusLtD53rZaNqYXYS98/DNX0gpweKTO2Toxlq4U1
RJSfCqDJnv0qqPGFvfEH20ZopLFTH+yNt8fWgZuNuGvNQx+YHnA/68jdbJZu
PPJb85VaUPWXNjrY7gWhnh8lag3ymOm506P+idWA+7XYgHfKnuBSn/Tpo3sh
K2htCzzmUQV5706VLbjnDhOumQmqnxUzp79r539ZVAm/ZCcdvPjDDdzmW88a
fbMCvghb3lt6tQTSLedObebs5+3eM5XjHcq6nkECzcM7VniCwcPERc8lSqDh
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
A/489oeVRQKuXoDM5GWWWC/UtLmWYr3gqFYwhss/4c1i/WFc/gk/+ihrYf5J
52b7yXWes5Xiz816vYjfYzsvh0nCaZG1/jVw937Envkp8fDns2tHHvtGLmIw
ykk/cVIT5SxIiAvFfO9B67DROF4tkbCdOF7/SfcfY377NOmSDY5r10+ljvyW
+O253eqUbnkvUN474p/JGG5eWMymFfI4L/3nCwXhvBwfaIt1Gev7w+wa1mUS
2y4YYl3Wre5gVHcUh78fgngG6eepcXgyqSaZSYhntqWpA+J/Zca2UMzDNwo/
SUQ90942HDOdVAUlPoK/VSp5ENF79dX6uZ+748YIt1L+PKcxf55zCn+e01zP
oGFJW0HU7273VLTI7D3OyWe6N1d3yNf3HXcF5TcMnorzzpxnrFFBPR1+fPvf
6p0uvn+/kWfeTKwXMNE5FWp1TtaQvnm//9Wlfl12e4zP58luIWv4U7TDN+JD
NTg7ZD8Ov+2wQ+nP9kFotw2C6AmYt0t+WbQH57Egqego4iByfn2PapU8JiW0
qkPPEYdO1aK9ORSEWnP2xi6HupSgvXU/hz+SrwuuT88p+R84dN07EVC7eydn
b6BVoSvK2Rur77lnJ9rblQ1bEH928/OsnvjeAqn0i/jezNl6P7Aujkx8cR/f
K/zoRhG+d83sp7i+2NqpzSo4rtFtfQ1xXKd4eyvsdr9EYavsa86/s5YdViMO
LYhlt9xmP0c/P23vg95Y7w+rEovn7IqtfXDtDNqVcpOd/PLV+cA2z6geMrea
LVsyYvqQvYnwausuPHcc1f1+iRSNf0pcf7ZmTn059j+9bcQ07N9anYPy2bWp
FxnKb0qp10f5w3k7/9Bp56wfb+eaIxXmoP8UqwxbzPlPdniDyQX0n9oaEeHo
b59uPdOGdYeS8OkZ6Mcqpiy0Qv9ZZr1mDec/meriPX7oPwv1fDzR31oubOuo
X1bJKHfULx+sK/BeiqgX/L2F+vy9hTVqi6xxf+aAoQD9MDMYHeGDcqg/ffcc
wH/37JPwBf080zCZgX6ehR6UP4t6hj2rmoPx6/aUGoxfXL5hewDj1/HBkicw
3pl9mjgP64JIgUssxpH1RZo3MX49dXTG+MWuGW7JwPhl2VlfgANfX9zl64v1
0qa4Drr06cnrc6RTDnvMy7nJy1nH96e82oTPqz+NGSOP+3I2dqIdevapTNiP
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
CT/PD8K++56w73YX9t0Cv/4vzw6O/bVw7tIq4dwlR+F6l745HTz9i/Ubqrl/
VdMsx2Wcq8+VyjeeFr6v54W3E+3i2fc2MJiyd30KXa/jMEDVIooYj12uPnNR
GtH+J2HrvnMSUpK4LTe8PO5fHh18N7jurwL/DR4cHDj4b+nrC55rpfE87bTp
2ks5jy+5PcuO52mjnxpa/RUhofLXu5Kti1JJWR/xPM5jX5ynxvO65IWmRhzP
61qbJTny63EuC85pwfks4LnBd4PrBmdy5eJ+dc5frwVncnwhvw8tN/FR5Pcp
u/btPb8PxvvuVXL3EoOjRXeE8Q7+Hjw+OHxw7eDEwYeDJ48UePK3Ak8+eU1/
/rzEM9p5Kn9eN9VPVvx/ot+66Ioo/91eQr9Fv4IvPvzwwZGDKwdPDj7qgm54
aE/VmyLoFHA92nsI1+/xpVfEi5/R4CDJc+7z99CzOJj7+/X7dd4AzRHOH8C5
A6nyxg84p67U3Cktd18Oybag0ZxX/yFw5gZSnHn0P559Ob8+bqqWZbxCBukU
tbODY4/5x+0u59fPHb18qVdmGgmdGHqXc+wvBH5d6xfPTgwFjl1BZc3s5xue
0+G7ewYOlJcQceVlt3XO0cS4x94s7j877+oyHe5HO6Z/z8E8/5l9fIYp68/U
Z66/B+/Pw6eW5vD+LBb8UT8I/qjZgj+q2Pr9Q+5X24V+b3dWKicXakx/8Lxr
hvprG+7fuvlsQm/u57pNY5s5z9Pq2cg2vvdOp7eiknlelzjrFgTzvK775WU3
ttzLpy0+P0xnv2okPxV/6PE8cNO6IeNc9RuIbZKh2QjdEtK3u8JhnjfuL/Hc
oiEjJqprP5tO71dG9v8+4wDPM6tPoi+5z+mqsDUa3Pe01sroHc9Lw49POr8K
Pzv428HXbvb96RP8I8pplOFQnicnB1vSm3mefHDgecUJqY1kkrangpH1G2LU
kn6G59XXl93XjZdtJCHX9w/PyioiT/UlWjwPv8jtouOPfDEpMt3b9ev0UvJX
v+WOPG9/f9JGnucnDwY8MI8MLieHR6+R8Dz/rV91BHruVx2B7BTqCMHznGjE
wDpq6h4aXXSjgjy5ZbeV1x2I2ams13JNJPW6eFpj3GsyKN7sPq9rlHVX6LXB
tZHqVbUNaIstIKcKj8jzuszzr3t4PYjo6eh/rf+YSf4KH7SS14PWnp7H61z0
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
JJpLdV2XGCWQ36/9PD5J8phs6n9vUoW5hBSo3tDz/iORPD/kNNc9/LZIWmeX
//iPfMO2ClrsntnUVVxL3ip4SSJ+3CRrCyb2qTtTTd2vjbomCmLzcHvB/AXt
0YSoRASc96+l1zoPmfpgSyXZmzb5Kn/eaP/SuTe61tPq9a7R3Y+Xk4AHf63K
Y9930Odm5TrlClL4Oj7gysk6EvRtm0F4eeL/4bvOCXzXwA0ltvb1tVRGO/ms
3PcK4vr1bqcw9n8O2cfJrDhVTw89+OLmJSojOz1H7G9g7z8m+FBPmzQxVUp9
+VMttpSIZqcv4/2tk5TvurUQn4RcfDEy83ADVXD2HWKVUEy+HI1aGMK+r7qy
0YfTSxtpskXnFg3DQtLov3lGHuvP/43vGn7u3C6Jt4QUe+lV+xpm0gyV5CWj
i+NIuY4o6zSREJ+PgQGGkU8omT5uz9vxiWTIo58qF4Y2kZnPX83o1pZLd0m0
3Mp1U0ihv656n9kSuv6PzKW7xY+pxrsF723Y92p1KOT3p7nve5fx+9/efcGG
3x91PjlhHka9779xU1teRb/O8mfjs+eoaV37FNDAOXtMevdKIA/yzA6v39FA
WtUqvB2Di+nNIU825bUkkdbcnzY1m+oJSahxWBZZRm97+rpV+YnI+fuxtqyd
JhceWMLbsw2C1/D2vhdv8fvQnQftdvD7TI4K3cDvc6r91m8PIhqp13naS9/v
DTWebmolw/rnKIcrc0znN9HnXZr9/Pvn0YBby+/osnFnu+rcjBOb68iTCRPj
+k2qoBl/iYaLtyeSqM/+u/seriZumaFLV++vppWb7I6fH3WHZBl2m/zgZB19
4ZYYnKVcQf33rZ2twfpVvzvWOZauYvq3TbjXdpv31OhPs8H6bLzcfq6UfT24
gTbvPZ6h6VZMwyfFOfVh88DxHabpzSsbafeyHztGqRRSZ8tta8LYfJh+SLxa
dnIFWZj+ZIC6ex11DTzYr5tXInEymBIwqbWWap6xKi2qqaDTEls9TrNxGpam
Wq92sZ66VuxzCIsqo9H9j05MYvNPVEDTi6gsMR1SdVltSkgpTZf0OdS4NZJc
X61z9fe+BaQqYv7TRf6NtCTDZ50B+y5fY2Uce8Q8IWn3KsqdiIR+cp+x+Svr
P7Y+Cn7yvvEiaT7/qtW5h/Knaumto8utVTZUUseTpkWObD5UNJsQMqpHPd09
5ODb3kfK6ehslx9X2Lrg3tJywmRLJhlh9qJ/Fy8JDZLYFJ5n+27foYqRXmti
RNJcup9BSdyiObXUMNJ2ivqTSro621BZm607c0b04u3k4qiphLWTiWvz+/F2
xWGBZ9nvEs1hBqXsd8lvsYpdrrLfnej8+D77n6Rtbpot+59kS0xZMf+fH/XD
V7DnpfvSb/DnJSMtbLfy5124NjWWvR+qb/LhMXs/pCSx2ZW/n7Nx6c/Y+yTy
WXoa7H2SuYs/HeXvU27C41r2/omW9vpl7P2TttjSP/j7fx1oeJx9L2KWUVnG
vhdpSIrcyr/X7joP/n3p5mfDBrLvS6o6vevLv+/yzfJprD8Q5TV+e1h/IENf
x7vx/tBcd/IJ6z9Ez9vhEes/ZHn/iWt4//HPsMxl/Y0Y7WvdxvobOV+vq8n7
25HIRbx/ErtIE94/SZ7DR0veP309rXax/kw9fd4sY/2Z2I+17+jPpjEzeP+n
3/zCeP8n8ZdWjeD93zPxPR9HhHyP7cnGEXHS32HNx9HLBTJH+PitnlG5nY07
Yt89YjMfd80Lq+z4+J1YsduWjVNiOOnyJj5OSYusPR+/dgYfbHj74Pdx63l7
2tan/D5UEvthK7+PxWJvN34fpR8KBWzeoBcUz45n8waJSlKcxOcN23rt614+
EnLwhPiznnYmSbK03mWcF0dyXnwYzOYxcrUwejmbx8iJh6sr+DyGur+dUPdP
EOrOp1PKNVPGN9A/d+R0GiF+S2RfVLxI75JFJAfcVNk8SVtHpU9m8yTJf1i5
js+TqMuvFOryqAuvl2vh8y0N69Lsz+ZbEjtOcyefb19Nluzm8+eCgyOy2PxJ
+m7VWcznz/tCng7xW7LU+ZXzhfyD9PmViMPBP7QKdWXE1UlS51Eirka9WCSM
2zNCHqNV6jxKxI0YdxXpiU1sPSKqmUVtbD2i5s2vLfh6VL/YcQRbv4h+7chh
bP2i1bUbbPn6VfI4SYmtg6Soh3qX/rGltPdiuVV8HbwTtPTnchavTF9St4Wt
mzRIbb4vXzdl9Sut2TpLsrutC2XrLK3dvrQLX2d9Rq7tydZr6pq9gq/XNEqm
eRRfrycFrrNg6ztJl5B4tr7TzAo/F76+7xy/wY/FA+QeOW3O4gG6YYHndR4P
BG2ZqMTiB5LyclQUix/oWo9f8UNdwrEcFm8QN+WHzSzeoLU6eY083pD2q0c+
QaO/6lEWz9AjXz7xeIaWbTyjy+MZC4/ERBb/sPl0Oo9/qJFOkwuPf1L+bvVj
8RLV+bP+NouXaI5zsAaPl7wGbLjD4iu6Z9Sk6Sy+orNOrtjE46vKlDmdWDzG
9hfyBSweo+fMP9ryeOzoPKvBLH4jvXrr72LxGz2y/Vf8FnRomzOL98iM9r29
WLxHm0bar+DP+8/O6hIWH5L10QG6LD6kgxW8W3h8aDH4QzGLJ0lgiM5QFk/S
V6su+vB4MmKYof6xjxn0Vtb9O267JNRGxf77z+o4IpbXCGVxKTU/PfYgi0tp
ZWXrWR6X+td9esziWPr+6nZrFsfSz6apa3gc+3yfmg2Le6l1yaXbLO6li1IG
DORx7/fuxQEsTqa3HRQbWZxMu9vp6PM4WflMMWHxNlli/7QHi7epZvlYBf68
hdoKLiw+J2EVW7+x+Jw2et/I5vH5kxbLWBbPk50TfGxZPE+tdL5P4f1K7cnV
/iz+JyHevRpY/E99Iib+fM3652M5J12+j9i4cvFyto+gtV9krvB9hKyWqQFr
p9+1wvn+gm7dseQyb+/+e9NNth+hO042b2X7EbrtTvUWvh/pPCPiAtu/0IiW
seVs/0I1SkyG8P3LJC+jKLbfod12K6uz/Q59U/r1FN/vXD2gxvdHNGjJlvds
f0RtNi+cwPdH9gNkjRazeY3of/uTz5fnr2X3Ovo5ifhK+X/GC/PSoA//jGPX
08Zbph3XD+8qVubXXz0ZJX+IzZuReebpmWx+fTGox8XD/iJy7Why5+dsnnJc
N2OwN4vvivvcfS0zKoVc6/KuusglVSTtJ+Cs1VuJ3YdOc3ZK4fc5bt0Syu9T
ZGcxz5ftu2ba2s36wt6filrryrrB0cR39WfeTpUDy6bx9rjTbQ68vY+wT/7y
+te+ubPAM1jUn5vL79N2Z4Ilu56qZSzsuM/pyMuOLxvekutZix9Ysnk3vHXM
wyNyWaT18/SO+6e2POS/S29Pte64f9CJAd34855PXpXB/ie9PUsthP/PEh/K
n5cunriKPy8dFUlf8ecNcr/Zgz/X2j9V0vj1jzJkg/j1Vb5Khvz9z1uQPpev
M/mjLyry93lS4HsChHn9qzCfJ1h7/s7fv8yOKP7+6fwWqsCvxz5wrJT/bcuF
47l57jdE/0f/JeUHm/Bf/GAxn1+evUieP5fT3j2D+Hd87hPS8R3jZ6T24XF7
5kzDP/h6FFM4tSNu31VcpsHWL7Jn3piufP2SpxNy+fr1Z2qgC3vP1NJt7H32
nsnpB6mp/D2jHyBvI+2zinxFhuCzin55WOint4T/f+Ps/I51c/gtRzn2u3Tg
mLjn/HcnrS/j/5Nm9J3M/yd962/esW6CpwoQ3vdn4T0fGmohw/vt7dMfO76j
hZZ9Dn/edMfbZbzfSnNTK6X8VL/+Fz9VrHeNCX9rGQ8weegu5WMQJdTRkf+p
FOrpX4V+jH6N/gwfhBzzhmHG/8sfcvuXvvn8u4Pr6CJwHdJ+huAxUPcFF4H6
L3Q6hVLnMaE/IT+DfiW35P/nLT2SQ0tKPhSKpDkBaR82/O4t5aG7GqcVk2W/
hQ401m4gnxfd9VK9+YgYtSjuYO20r59oEGun+X1vbuPtYt2rX/l1ri9vJitO
L6ZzQt6InGMfEclB+ziVMZlkc8/el+rYfvRuhMOVcSzOmX058XGidiZd7ZP2
ZQuL1171VxlvwuI01D2jpHy08B6RdwIno3jFb4vSmDiRdH2z4b/U6VBnNBTq
jIOFOmOn1vHdVp95RacVrXqZmtxEHlfu2G7G5pn/Aa+P4LQ=
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{323.7476664196153, 194.6844457694775},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-10, 10}, {-10, 10}, {-4., 195.99994285714695`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.247327470074066, -3.013985658718334, 0.9000359056386814},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.7459402288036485`*^9, 3.7459402568649693`*^9}},
 CellLabel->"Out[33]=",ExpressionUUID->"ae4073ee-6c3e-47b4-bfe2-c5d5d37677f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "function image of x^2 + y^2 - 4", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", 
        "FunctionRange[x^2 + y^2 - 4, {x, y}, z]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"range\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"], "-", "4"}], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "DomainAndRange", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionRange[x^2 + y^2 - 4, {x, y}, z]"}], 
       XMLElement["moutput", {}, {"4 + z >= 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"{\"", 
                  RowBox[{"z", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                  RowBox[{
                    RowBox[{"z", "+", "4"}], "\[GreaterEqual]", "0"}], 
                  "\"}\""}, "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a real\[Hyphen]valued function\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}]], 
                  Global`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NumberLine", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "DomainAndRange", "title" -> 
     "Number line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[4 + z >= 0, z]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{
                 RGBColor[0.24720000000000014`, 0.24, 0.6], {
                  Thickness[Large], 
                  Arrowheads[{0.03}], 
                  ArrowBox[{{-4., 0.264}, {4., 0.264}}]}, 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{-4., 0.264}]}, 
                   RowBox[{"-", "4"}]], Annotation[#, -4., "Tooltip"]& ]}}, 
               ImageSize -> 300., Axes -> {True, False}, AxesStyle -> {}, 
               PlotRange -> {{-4.4, 4.4}, Automatic}, AxesOrigin -> {0, 0}], 
              "\"\""}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DomainOfFunction", "numsubpods" -> 
     "1", "position" -> "400", "scanner" -> "DomainAndRange", "title" -> 
     "Domain of function"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionDomain[x^2 + y^2 - 4, {x, y}]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            
            TemplateBox[{"\"\[DoubleStruckCapitalR]\"", "\"2\""}, 
             "Superscript", SyntaxForm -> SuperscriptBox], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "image", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "DomainAndRangeWord", "desc" -> 
          " referring to a real function property", "input" -> 
          "*C.image-_*DomainAndRangeWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "desc" -> "a plotting function", "input" -> 
          "*C.image-_*PlotsWord-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "image x^2 + y^2 - 4", "score" -> "0.5555555555555556", "level" -> 
        "medium"}, {"\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.25806451612903225", "level" -> "low"}, {
         "function"}], "\n  "}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "FunctionDomainAndRange", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "6.904", "parsetiming" -> "1.076", "parsetimedout" -> "false",
     "recalculate" -> "", "id" -> 
    "MSPa134716gg80g4adie563g0000463620b7fbd1gc04", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "29", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2018, 9, 14, 16, 22, 41.2475413`9.367972943388894}, "Line" -> 
    35, "SessionID" -> 25012999979382367957}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", 
    "FunctionRange[x^2 + y^2 - 4, {x, y}, z]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "function image of x^2 + y^2 - 4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{310., {68., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[35]:=",ExpressionUUID->"c63e4972-9501-4541-a799-71b7d463fadf"],

Cell[BoxData[
 RowBox[{"z", "\[GreaterEqual]", 
  RowBox[{"-", "4"}]}]], "Output",
 CellChangeTimes->{3.7459417618255653`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"795ab4a2-d8f0-4d32-b2c7-fda2bdb48f24"]
}, Open  ]],

Cell[TextData[{
 "b) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", "=", 
    SqrtBox[
     RowBox[{"4", "-", 
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "10a0a3ea-6bb3-4e3f-af50-be5097f997ea"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"4", "-", 
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], " ", "\[GreaterEqual]", " ", "0"}], " ", 
    "\[Implies]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "-", 
      SuperscriptBox["y", "2"]}], "\[LessEqual]", "4"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "80533a3a-cd46-449f-935a-e51e9647a67d"],
 ". Acho que \[EAcute] esse o dom\[IAcute]nio."
}], "Text",
 CellChangeTimes->{{3.745941875568446*^9, 3.745941919850048*^9}, {
  3.745941976341874*^9, 3.745942038663845*^9}, {3.7459420846317677`*^9, 
  3.7459421039289665`*^9}, {3.745942596436596*^9, 
  3.7459426049810753`*^9}},ExpressionUUID->"4d708f19-26cf-4761-9893-\
121172c06547"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionDomain", "[", 
  RowBox[{
   SqrtBox[
    RowBox[{"4", "-", 
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["y", "2"]}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7459426076854773`*^9, 3.745942651054308*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"f522dcc5-9962-4962-9a47-a948a2e66bff"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x", "2"], "-", 
   SuperscriptBox["y", "2"]}], "\[LessEqual]", "4"}]], "Output",
 CellChangeTimes->{3.7459426513511133`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"dcf9bffd-08c8-46a3-b481-7e71dbb8c1d9"]
}, Open  ]],

Cell[TextData[{
 "A imagem \[EAcute] uma raiz... raiz \[EAcute] exponente fracional. ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "b7cf94ee-85b0-4f09-828f-4431ec248071"],
 " \[EAcute] par\[AAcute]bola, mas ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    FractionBox["1", "2"]], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "603c66ea-ebae-4cd0-9844-30c03fa9c43a"],
 ".. A curva j\[AAcute] se tornou convexa."
}], "Text",
 CellChangeTimes->{{3.7459426894276733`*^9, 3.7459426943969207`*^9}, {
  3.7459431883715553`*^9, 3.7459431998343725`*^9}, {3.7459432928774843`*^9, 
  3.7459432979127836`*^9}, {3.7459433420356207`*^9, 3.745943361421299*^9}, {
  3.74594341158486*^9, 
  3.745943456818322*^9}},ExpressionUUID->"36df387a-41ae-4641-b496-\
fe45f82f187f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["x", 
    FractionBox["1", "2"]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7459433468485403`*^9, 3.7459433485383406`*^9}, {
  3.745943462195966*^9, 3.7459434808053293`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"5cecc045-cd28-44ee-ba59-d25aad1d2be5"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$16616#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 3.1622775956321}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7459434724901924`*^9, 3.74594348119657*^9}},
 CellLabel->"Out[38]=",ExpressionUUID->"d6bbefe2-8688-4a86-af09-a8ad965c8393"]
}, Open  ]],

Cell[TextData[{
 "Isso nas duas dimens\[OTilde]es com um deslocamento... ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    FractionBox["1", "2"]], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "61e1c797-00bc-4191-8668-14ca711b5166"],
 " tem imagem positiva, ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["y", 
    FractionBox["1", "2"]], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "26f2db80-16d2-4b7a-bbcd-2ca301f8a848"],
 "tamb\[EAcute]m.. Com deslocamento 4.. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", ">", 
    RowBox[{"-", "4"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "32f22f7a-c20b-40cb-adce-0fd5770690b3"],
 "?"
}], "Text",
 CellChangeTimes->{{3.7459435026224704`*^9, 3.7459435117439756`*^9}, {
  3.7459435492098093`*^9, 3.745943558914957*^9}, {3.7459437156934333`*^9, 
  3.7459437451950216`*^9}, {3.7459437762856307`*^9, 3.745943781880496*^9}, {
  3.7459438222851863`*^9, 
  3.7459438320415134`*^9}},ExpressionUUID->"595d6a79-3c72-4afd-b160-\
5bdac16c85b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionRange", "[", 
  RowBox[{
   SqrtBox[
    RowBox[{"4", "-", 
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["y", "2"]}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "z"}], "]"}]], "Input",
 CellChangeTimes->{{3.7459438404020066`*^9, 3.7459438832267222`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"f531c31c-7663-418b-8348-3b1fbaae1032"],

Cell[BoxData[
 RowBox[{"z", "\[GreaterEqual]", "0"}]], "Output",
 CellChangeTimes->{{3.7459438665079885`*^9, 3.7459438835855856`*^9}, 
   3.7459497134683313`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"64d1ef3f-f148-49ab-ab72-e7f7f0ad1842"]
}, Open  ]],

Cell[TextData[{
 "A imagem de qualquer fun\[CCedilla]\[ATilde]o exponencial fracional \
positiva \[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "\[GreaterSlantEqual]", "0"}], TraditionalForm]],
  ExpressionUUID->"5892002f-12d7-4923-9714-951e9c1c6906"],
 "?"
}], "Text",
 CellChangeTimes->{{3.7459497402221994`*^9, 3.74594976223838*^9}, {
  3.745949862382518*^9, 3.7459498632362394`*^9}, {3.746210773632929*^9, 
  3.746210809321865*^9}},ExpressionUUID->"e49aa3bd-1a80-4706-bff0-\
5fd74035b613"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     SuperscriptBox["x", "a"], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "0.5"}], "}"}], ",", "0", ",", "10", ",", "0.1"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7459499979229155`*^9, 3.7459500005639105`*^9}, {
  3.745950058191224*^9, 3.7459500670818577`*^9}, {3.7459501426489997`*^9, 
  3.7459501487040615`*^9}, {3.745950192220643*^9, 3.745950199235174*^9}, {
  3.7459502508334513`*^9, 3.7459502715780935`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"210eab33-fa1a-44d0-b666-acd7ed1bb8bc"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 7.800000000000001, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`a$$], 0.5}, 0, 10, 0.1}}, Typeset`size$$ = {
    360., {110., 117.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`a$70316$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`a$$ = 0.5}, 
      "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$70316$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[$CellContext`x^$CellContext`a$$, {$CellContext`x, -10, 10}], 
      "Specifications" :> {{{$CellContext`a$$, 0.5}, 0, 10, 0.1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{407., {155., 162.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7459500009701*^9, 3.745950019629566*^9}, {
  3.745950067756914*^9, 3.745950087817521*^9}, {3.7459501498754387`*^9, 
  3.7459501530022187`*^9}, {3.7459501996725283`*^9, 3.7459502101618247`*^9}, {
  3.7459502733875656`*^9, 3.7459502757313814`*^9}},
 CellLabel->"Out[47]=",ExpressionUUID->"d2a13800-4836-4bfc-8aa8-a4b538c9a61e"]
}, Open  ]],

Cell[TextData[{
 "Sim. Todas elas s\[ATilde]o ",
 Cell[BoxData[
  FormBox[
   RowBox[{"I", "=", 
    RowBox[{"y", ">", "0"}]}], TraditionalForm]],ExpressionUUID->
  "d85b1c9c-0342-4a26-9013-3bd96e515f3f"],
 " porque ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SqrtBox["x"], ">", "0"}], TraditionalForm]],ExpressionUUID->
  "7030e8fc-f5ac-45e6-b14d-a6e6b386564c"],
 ". Na verdade ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", ">", 
    RowBox[{"-", "4"}]}], TraditionalForm]],ExpressionUUID->
  "3bfbd186-4147-4182-8479-325ee54c598c"],
 " estaria correto n\[ATilde]o considerando ",
 Cell[BoxData[
  FormBox[
   SqrtBox["z"], TraditionalForm]],ExpressionUUID->
  "721908e1-d3b6-4e2f-8297-e8559e147641"],
 ", que se sobrep\[OTilde]e e torna ",
 Cell[BoxData[
  FormBox[
   RowBox[{"I", "=", 
    RowBox[{"z", ">", 
     RowBox[{
      RowBox[{"-", "4"}], "\[Intersection]", "z"}], ">", "0"}]}], 
   TraditionalForm]],ExpressionUUID->"5f81a2d4-6468-440e-ac15-d13d3d67f633"],
 ".\nO plot da fun\[CCedilla]\[ATilde]o..."
}], "Text",
 CellChangeTimes->{{3.74595033103942*^9, 3.7459503722544117`*^9}, {
  3.745950405002752*^9, 3.7459504229366665`*^9}, {3.745950454762992*^9, 
  3.745950531052311*^9}, {3.745950775628834*^9, 3.745950777664681*^9}, {
  3.74621087544965*^9, 
  3.746210885822501*^9}},ExpressionUUID->"2c497bb9-ee6f-4dbf-b982-\
86e48b75f096"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   SqrtBox[
    RowBox[{"4", "-", 
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["y", "2"]}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7462108889581027`*^9, 3.7462110240515537`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"f4aef164-9d68-401d-9d1d-4f38c4aa8dec"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
93G9NYMqOe0C/9awW/AUYrf4Mdr3h/gN2gXeVMa7jgfBS4vfQH7w/OJn8IP4
0Ubi99AD788r9Pgx/OUF8cO8F/pg8ZPQ8aS/iBPgs8QPE1fw05WkH/HL0K8U
P4/8xJ9AeS/yQ99Y4gh8wdfJe/n/PJGTeAw+UeId8Zt4+L2MI62fCn0uiae0
C/qikiegT+j7SbyGDnyt93stM19CTvCfJD9BTvIOIw9x8isZF+gTvJvkRUbe
Ypl5i8nfeK/mP8iJPlZKu7A/8G3Vmk/uFe/My9ROpb8YL+CdqhX7adyLEB1f
6PVAvak/XrwbpOMRuygk/YLfw37Hy3jEv4Hnk/HL3/xu1f1j9twWTt2P34eJ
H2DcQX/ri+C4fnGOP9Q4ZfCH3wzxP/ytcUH8qne8PB0bUcGvQ7PhyeoHNT4b
/hb6KKH39qenY+fKe6GH302RH3rw6qIH9MnvXxn6BM8j7YUevzRI9AY9eD7p
L/wefmarkV9hRwUl34M/9L+IPTD+oSf/xJ7wEwsk7+W9/L82Ym+MT+g/NPwV
v28Qe2a8vMtv8HttmXcgH+1bKnGQ9iDXjcPvdc01/KX2F/q7bfQXeC3pL+yN
fqwqOHYDfkP4IAfj74C8l/Yi1yiR81xkRKc8ddJY2a6mmtQrPtKdZsnkq2MH
/e1qHxO+dXuvCKtxcsadycnh7rWrJp774otHrnML04dMzxNmdamStlWeOiFu
v6pZOzz866kr0KPHZNcij57uxd2UOAh+0vP+/XElt4zadnPVBcW3e+S86oqW
eqnP8lgry14/d6GW26u1XvBE69i8L+FC5OrtvQKtMjKPRj7kWi/1ZNpDOxaK
POAdbdz9p+BZbdwC96lm4/C/aPN37xX+9W3cAr8seAdbTuuxLaf7Y5Hz75Yt
hxftHmI9bXPklKufn/vNTz+WfXl/rra3jN1eXddIbesnDn3GiZyvl3norXfR
H7L1GddF9AmO/odt9tY/9EsM+tE2veszoQenv5oLPXygz7nFm36CLb/rB8Me
wE8b7TL7/b6tN/dDW29Wh6w7PXpD7+j7bBXbDukX7OGA9Av9yu99xJ7pd+xk
t8gj48LN7/cW2+MC3Bwv8MdeJgn/6DxhPb5uF6F1gPW5to8svWiC5lFtJwQO
Lhoe5t5z4Ozt2eVnaZ4DPjfTeQ9OexkH96S94IzvmzNm51n/xx2td0M/YPO+
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
Avr+MmlqsNoPdfE6KcMKFzqfUvW21s4TrLjJk0uWqhlh5hXWBonL6K2+Hcet
axLH0Zusv1jnJO6jN+pe5AlGPLXMeIr8/SQPQW/If0HyFvS2RuRfLnmOkVdY
JSQvQm+Sh1jdJY+iv6n/j5W8C5x8qaboDTy75Dk/fhpZfFvOUK3vkUeNEf2D
P5T+4R4e+JCHVBZ7Bm8q/cZ+deT/UuJ+XRnv4PukP+Gv9UOJp9+W+zIu29Ab
LvRTUfo5yOA/Q+grCz14+mz9eh8p7e8+0TnubK/+E9WfthK74L4g+C+SfbhP
q/73Ob6kuC88/fI4bm63eUujVjxTPKvHzh/EzZu7Yerdx4+V/2ih7zGy4alx
Cxz62R7+F+OW9MlQKtPrO4rf8NjVibg5h1ckzC90U/nsEPqtBr1dNzjhmir0
4H1setdMoYfPIqFfbNDb4/SBa7rID97Xlt/VSuSHz8viNn200DPuJkkcXGPo
zfaria7iEvfBawk/7imCTwnpB+4Xoh+jJe4UlP7V+a/8/kTo8Rv1xB45z4Kf
uSd2/dSgzyLjaLP3uMAvufFLyMM8Zbf4H3DxM+6MqYfNvf7YGafMF5Y2vJFt
dWiYji/wSbnW9WyY3hlH1OfPyHwfevCfjfpAJxmPLhmP2HO45OdDJY4gZxmZ
XzSSuAO+UfL8GTJPQR726WU8n/pe4xZ+Sk89/Gup2yAn9LUu7ajTK+kE8wql
32bUf0aJfxhds6Zvx1A/9ZPgc1uv9XnqE6btym3cFwSu59QER07w4tXdyQte
OH6D+vbCrdMu3op+qXneU85nNL4wocFhJ//BL5V8mpS1b3+nvsc+zejEMm9G
bAnQeIQ/uWLkh26pP5v5WFfJt5+VzH0xSzunDrlF6sMVJJ9EzrSSt2c7XPTm
jsgAxTlP8NHcX64VuO3oU+/PaDdlUdH+b3U8st+1RVBCxgkHnui8gCd5ndaB
JT8vLPk5fKhL122T5/1mjR5oXmrnk8/iyKvBS0r+Hy35v/d6wdU48nPwB5Ln
V5U8H/2sE/2UM/Ltl/LeF/Je6GNFzj5yb6rON+VJexVPac87PjfmHdVELu7F
BUefB06sLRGc+a36T/BWhp7ZP9xp28WFc9u8Un3abE/Hpg3ptaNb7+uqT+ib
Zps+IfbkW+WzWPZXVBH9gG+Q+Y5L9Ike1oseeoke0Nt/5D3cywS9/fwr1tTP
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
pdAnyry4gPSX7q+MsuX0XgdJctWX/Jm6EP2eS/Je7BN8hNQB2IcE3kTsR7/T
J3gJyUPOSD6PPp9JnYF9ReAfCx/uudB8KfKTgSsGO9/rAQ/KXWr1vgYvXOwP
Vv8seTX9CE4+80TyYfD95MMiP3joPVeGwC/DLNNPThE/+VTWNbQOU3du4qYl
J10P5V4GPf8qOPfy0N7W9Ww8QejB+wj+Zc4HFWM3OPwn+H6XufjMAa4vbFzp
y/Wz8bSpTtT5q2oa57xI9W/qlH36nevV1bdTntx37NZdds626K2Wa8fAkieW
/+lnnJPw8YmzcbVb8Oc2H9X/J0sXeviks9+r8XfL7a89720q9yQb53r0/mT0
WbBKlitfvFha5cDrg2eT9zv1cOjXbCo1c+EBJ28B9/5uUUzsSvluUfnizeqv
+dPJK6BP6y2n6meo6BM91xo816NP7/vkY2KryX3y3Y24XHe2HZe5R5p2tQ7O
7GnXPmmXKf9aaZfZ3mbCx9RbOu/+VT0/kX6hf9NFbvf0yxvpd/orZP9ID/6z
9K/Z7/W2vnfi74WOXVX64tvw0gd3uxp+8lV0ndKOXaUYuKDhg+/drqY2rv0+
qpaNNzH6vaDr5qSx772o0kTyT9rbRvLPXUY/trHsfpy79r4rLLPTXw8839G7
4Iow8qgCkkflGLu4wK5Tzvz0S89356+73vXeTDa9tveM0Hc18kx/Ge/zbHlU
/+WW2PLskvqb7i+S9YVSYn/g3N8yWeqTup9H1inYXwveX9Y1vpd5EPnAAlkH
2W3UV1NIXWKmUV9lnSVO5GRcUIfkPAl2EifrX0NFHnDWy5aKPNg/62s/izzg
rMdN98pb/C3W77ZJ/VbzIlkHDJA6LTjrhuckjoN7rzMm6/rO17K+uUjqZrpP
QNZDp0p9DJz102yybgJ+W9Zbh3nFnXDr0FeZ0swYnNLi3iLwpz07HtxwMJj1
Yh0XrBdz3xY468uPZL87OOvRK6SeCf6+rF/nkLol+GRZ7yaP0vskZH1c7hdT
u+0j6+my/q74RFl/l/V6xVmvv++Nu+csefZHjhchFvdugLOOxj0dei5TcO71
wM6h5xwsfqxkHzufCTPy2weSL/lJHgUe3f3rfRdOPdV7EzRPFpx5LvbM/STP
vfcnWNOkXQHe+nH3j5rTcX33VFZ76Xddx5F1/Iuyfor82WW9j/7F/7P+y70G
+LEasn7HvQZadxJ6zvNDX0fq2Jznh57z+JzH5r1NhA/n6uHTQPhw/lxxkYd7
ENAn50Hipb2Mx0eS13WTfQ66X0j001T0Av1hORc8QuoY0HeS9bIw7/0hVi/R
P+uteg+c1BO6GHH5++12XF5krFNsk3r+TKPOf0nwrPb6r86/KlXO7ln/nSL2
ifwFJU8eKXka+LA30z35QxZZR9bzBJ/bfBrYcVbjVKuhdpzFnnTfy+4rSXcu
OvM08KUTK7Sul8a5jxH8r4WfHSzQNkLHj947m/zoau21zn2w4E37PH16dcK/
7sVy/7Iq9VeZUjv3Ypn7hLED8J+yP92bf7xzryb40MdT+qT73rn3FXxP4qIN
Ps2de3XAv9m34mH3tM65APAPjs6seT/YOR8Kzvoy7UV/5dYUOZuxq3N/GnhY
h0+SXpZ17k/TeF0ub1CDI879aeY+YdoFniG075GBdZ17MsEzFXpccfgnTl1G
5Sk1/c6+ZGefmXmPqHFe3j0pKXc+9+hQ574UwT9aWHFI5avO/XjgQyJ3pD5d
OVzlN/cPe99n6+9+c6vovo83Bhj32fq7+2+53efeuGDjPlt/d8qd12q9ny1U
+Zv7geGj+eeRPa+rjHLuQwC/06Hcbxk+dfJUvV9Nxi98wD+YdumjMb+/Vv8F
nmz0O/Y4aFWZ1NF7nf214G8NevoTP0m7zH2nvJd+zuRzoHN0JkcP5j5S3kv/
X/iu7o3gY05/6b4U33P3X1dw+svczwm9+s+s2feUOezYp7kf0hinug9Q67Bi
b5HCB72Yeanew09eKnJCDx4v7fK+x9jfnVn0w9/oO4fUMdAXeH7B0Tv6Gyb9
6H3/wLW4/4g9mPVnzud6z6Ni3nFPfsy/7smHH/bpfV9ukgt7hp52MC687xH1
txhH/H/dPyzjDv3Q7yWlToJewI9IfOS94J/LeOe9Wj8R/8B7wSeLP0EOxb89
EpF0LFDjC3ZVRvwVcoJnFP/mPY7CrXTiD731+Y99il/11me4hR9GTnD8NnKC
D595Lufmjxy/Cn7ifus99f9rnRL7ryXxwoibFvHFiJsW8ciIm9YwiV9G3LR2
Sbwz7p22iJtGfLQ+lDhrxEeLuGzER+uaxHEjPlrLJe4b8dHqa+QJeo/smTNf
1V1xWsct7zku9xXofXGCdy80KUujWafVXvWeA7FP2gX/rnJfBO0Cnyz3SzDe
dH+O+FX4gFfY/KLTw+FO3RMcP884px+Cqsd+lVjST/mb5y/gb95v5n1+OyY2
vZyn5m/ew34McHOfhrcfeOJCHuTn9/Til7zjhbMvArulP7nvl/yG/mU/DHz1
fPzCzg0+beHcR438NcVPQs/vwSKnt15i9F4U7/pUzL/uP+F3X5GH9vB7TSNe
m/rxvs/2H/8t/e4d75Jcs6Rd3vHd35pk3FsCjh16+6skF+tQ3vfh+7trybjw
Pl8fE1tM7AG75/8lGvmD3rs2ddSlTEec8xX8P/Tj7f+fuDYKPXxod7jYibff
S3LlEvn1uzzCn3jB39iR6bfBU0gd+/8AYDv3lw==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJxNmwX0VsXWxk/MzF9KVMQCRQRUVFQwMMEWuzEQAxFEMdCrGNhYWChgJwom
dieIBYqIXaCUjZgYiH7Pj2fuut9a76y9z5w5NbNnx7P327bP8XsfVxVF8VMo
ilr0LdGlRNfSwfBUFF+JviI6Qm2e+E9Ff9L5Lcqi2EN0fY3/QHS6zs1We1/8
J6Jz1T4U/7noAxr7sfhb1DbU+C9Ev1X/yerfRg8/XO1v9fUR7a52qvrbiR6p
9obG9xN9TnRXPfsujVsYi2KwxsxT66tzz+rcweIfEr1N7Q+NaRDtq3E3iw+6
roPOzxK/i1pb8R+Jbq+2rsa9J/qR3qeR+LHix4l/RNc20fGKDbqH+B/V10T8
o+KbqX8l8UeJP1DjHxS9W+0A8Q+IHqGxh4tfoHf7TfxM8d+LHs048dNEf9Hx
54Xnt5Pu947498W30rtNEd+NtVC7Ua174WfdKbq0vuVujZkq/ia168QP0HOG
iM7R8W1qu6q9W/vbbxN9XvfvrzEnie4geprGHlqabq3jSrQz9xL/tfgNRM9W
21f8ULWf1b5UG6b2jdpZOveh3mdj8f+I9tDxMayjjndSW1b8QLXP9a59+G7R
fhp3u55xreh10d/+quj3Gv+rWi8dX1h5TUepHaJrdlPfHqKX6fgXtW/VPuOe
+o7vdW0Ljd9erZH6b4ye59dEXxM9Q/3rqo3V8V96hyW1Xv/RuM3V10xtVbVD
1LZT3xKie4pO03XzdP+zNP4k0V7q31F9x+lcW/GH8TzxHUSPrvytS4n2Ev1d
45YUv4Xaj4XvdZD4Nmq/616X6p5niB6o4/XVNtX5QbpuI/FN1LqqHarWU30n
qm0qvqna8eI3FG2s1kXtYLV91Hew7rWx+F1Eg+jz6ntD92wkvrPaJ4Xf6QLx
W6o9xn7R8Wi1WzUne4mOEZ3OsVoP9oCON2GtRb9VO0zz3F7z1krP+FTnr1Hf
J9Fyd4To3rW/Y7ruf7+uu0/tXR2/ona92nrIr+6xrfp3Fz1GbTfxvUUv07VX
6HwH0cvVrhS/uuil0XriSNFZai+ylqLX6tzq4seLjkVvlF7nZjpXi2+sdzxW
990d2RHdX+O20vnZerc+0fvocNEByKP4f1lD8ceIR/E9oXPL6LrWyAm6Sd1N
RO9VX4FMi57BvdUSx9HXrqvnNkrmm6qvuc6NQ5bVztU196AfdJ+L1IaJX1W0
q8Yso3aRjh/jGo1rpeeW6rtXfceqbaO+qOMVRS/RNZepb7Xa3/oPMql2ko7/
I9pY9GLmDt3GvKK7xa8heqHaJeLbiB7G2omuomc9JTpK/SNFu6m1F/+65uQI
3X85tafQ1fquVdDneoe1xK8pfm3RLmori/9Y/e+K31LX9xF9UfQa5ER0TZ17
VvwL4hep3SH+HtH79Q6Vzq2gd9g02Jb8i63Q9XuI9hMdqf6L9Q6DRf9Nnsem
oqfq2g4aP1PHnXU8Q2PWF31fbQdd21f0fPQS+lZjDkWe2QOiI9AB4l/UN87U
8ZPiTxE9WW2k+E1ER6F/xT+NPKpdJX5NvkX3nYauFO2kcUNZR93/Kp1rxjfq
nsPFXy2+Y23bsnlp+1Ik69bmojvq3Lri39H4s6L5r3Sf19R/LfpX9OzoffMS
z1HrKn5itO3oK/4L0SWS7UsD3xVtZ18RHR5tf18W/U7PP7+yDsU2fp917JOi
f6qN1Ln5oheLXiu6nuhX2Q6g93tXtgPopI2zXtpBz91a57/R/dfQ+nVl/4tv
Kf475ivxUtKL4rdHx/Cduq6/2mE6dwl6VrS3jn/Itv/abMN5F/wAfAD8Amx/
v+wLdBO9BtlEpybbgR1F98n6bbiOV9dzt9Zzt9Zzj9TxWup/GrlX/5Ga41s1
/vfS53bF5kTL+gLRXjr3D7ZL9DfRXXTtzqL/qq0h/kHdZ1nd50vkgueqb2+1
o/K3wfOtwyrbV2zrsaKL+G614yvbSOzjztgNvhN5UqvE71HZxg7Nem15Pau3
nrW73m2BjvdEz6Mz1P8x+5s5VFtBfRM0Zrl876WzXTiBNY62IdiS/dUK8VuJ
PlHYBmILD8hrwHz3zv7U4Gx/+2Sf7OS8dnzTT7pnW73DregV9V2lMRM05o7S
OqAd9ld9j+vcFlknfK65Xx57IX61ZDu7L++uNg79lmwDsYX7qV2q4yd07YOi
TdAF6muBvtFzD1P/ftH2ELuInGJjsbUDS8sCNm94lqlr8/ewD9gPV2T/BT9m
0+wjYEOY9wOC9d7qwX4Q++Ci7Icwf/OifRB8EXyGozWumWgb0TKvDzqF9WRd
XygsF8gHcrK/+FfVdzQ6S22R+N5qhybbkyWT/SZ8CvyZdln2e5S+N8/YLa8h
a7lr9iO+yd/yva4/XfNzouhc5lfvdT3+e7KdOCF5LyKnJ6r9mmwbThU9R/3t
1beh6HyOsX+iXyfbwkGiO6utozGbiO6Hb6g2oLQ+YA2Y/+3zntwj2u5dq/4X
1P9Hsr0fkuzr3VxZF/0n2J4+Ivpbso08TXRBsj07PdlH+yXP+U86Pk/9g0V/
UDsb+ye6vMa0rrx+P6qdnueJPcHeYP+dprZm5TU6X/1rV/YtNhM9r/Je+Dd6
7TbWPb9UO1H3P170Cp0nSDoz7+eWlfd3K7XVK/vB7PVTKp9nf5+a9/jJ7DW1
s5Ex0Rv0zGN4T+ya7n9Ksq5ZgT2AbdLxUeofmNfhXI1fgbnIMoE84Ft3yLJy
AHMrfttkHx2ZRp6/SI5DjkF+k/3zbUQ/yHboSNFb1DdK7SmN3wobyjOS5/GE
yvM6K9lnOjZZ5phf5naP0r4ssndRZX1+DXtVbbiOr1R7l/0tOrqyTlmtso//
BvGA7tkrev4uz3OIDBLPIIf/IEuSi5uT77tV5edsR/yZ1+jvZLt7jugibD/x
n+h1hXUTemlhsi0/W/SvZN/orOS5Rtcz938m+6Bnij6YfVR8VewEa4fdYO8t
yHtxisYdr/EH6/1nJ/uRx4m+he4V31v9b4sfIv4Q8e8l+1jowO0q28Elsq7f
N+t+9uRJ2V5W0nV7afxRGl+K31N8/ywv5+nbViSWYE/jXtSOX9uwR0Q7428X
jmd5/iBMMt+GbhC/hOg32C/xf4tfT+O3KRx7vql33U/8XtHx6Mql7zVJbaXS
/soGwbECMf4fwXHqSI3/Tfzm4t/jvXT8iOhSDY4JWpd+xtql/T1wA/AG/LRL
NHb5aH/2BdHtg/2rAaJHBcvCtsF+cZfSvvFUjTtEdH9iSfa/zn/L/Efr1J6i
E5mn0v7i2/gExBR6pynie6KbRZfM/ehJ4gZin/V1PAwZEW1ZWx6HZJnEDz8T
X0B0NV17Gv5kdNzEPiAemlPZ7/tG/Ejdd77odNHT9I6blo6VdgpeKzCTWfjp
pXGJURr3s/pmiG6iMXsWxh2GBtvZN/6fz8Fxd51bAX8V3aR3GC9+jMYuVP/c
wvcaX9lX76X+33U8u/A7IePYozXULg62g6+rfw3xz4h/TvxzhX14fOIetf3S
dyvb9uXEPyZ+c/EtxT8s/r3K83dDbb8K/+q3aPnFj/1U5+dEP/e8aJ2Afe7M
fq79nrzveclxycPopOB46lEd34iNE99O126k/p0K40v4v+3Yy6Jdgyn40teV
49w/xf8TvC436dpDa+M2P+h8iMZL+oveFh0fw58e/e1biT6qe69VOoaZWXqe
edfzk2Odp5P99+fzfD6vvpWg2J3oPu5zWXI89BS2N/i7tyKG0rl+GnMgca7O
LaW+Ofj4Grs/tl33uZ14Q+PPFK1q74OHeY6OBxfeI0tizwvvvS2DsaYHWKvo
8U8TO6j1x2ZHx87EFI8TN6iF0mPaB8cybUWfU98NWa+fht5R/9Ki2wWPZ+8N
S16fn0Uj86sxB4ieWnu9lhK9T7RJ6ffrEBa7MMVj6ie2xv/hG25JxiPAiKLG
/JB11BLix4i/T/w94j/V+LtFB6Ej1b8IGx89H80bbFvQD7/gf9V+n1/xeegr
vK/Q08zD35V1OfO/UHwn3fuvwjriWN3zIZ1bldgiOO5mbc5hfjTuLNF1SmOG
6M3W+Eyio3XdM3lNmzOv4FVZDvELiZFbF46xsbXgrRfo3MWiq2BL8DvEB9F3
op/LGi0drN9+rowbLMoy87jusaCwTgeLRLaR8cnqf6W0Twy+8W9e9yXBS9HB
+CXBfv51wTHnenmvI+PEF8g5WOhfWd82DZ6b73Rt4+Dv/lb8P8Qr4ncOxkgX
Zhl4OPpZ+O3jozGc7tG++IGlsbL+uma+6BDRttEyMiha7pbFN2ZcND7STHPc
UNr3xk48K3o9c4icJs/bCtHxOeexJ2dm+eU+HUvLFXqBdfs5r9170bLYAuwh
Gat4DfsbbK92yfL4W74W3+4h9pfavbp2X+QqGt9AxvYRHRe9f+Hv0706655d
8Fei9SQx8mjd5zy1x3XcWHL2tc5fr/4NRBuxbprbpP4PifvQe6JN1P+M+h8t
jF2Aa3APYjswnUfQDYWxiTV17Sa6ZjP0bm27+Ap2pzbOdnttDAF7tCgYQ8Dm
/y1+lPgv2H8NjtU+K4wVXqb+LUQXsA/Ef6YxLTTmSvFbqv/3YHlCrvYNxomQ
I3T8AbX1MHaS+ViC9xW/amk/hvf4MxjzBgME6wV7PB08Jxhf/EDX9aw9Zlbl
ueF9Pq+M1YI3gn/+FYwBfh2dg+A+O6jNqP2N+Eqf1n7nL4h/xDdmX4pfrTSW
go1pX9rGYFfAmaEV+6z2/eZWnitwH3wh8G2uK6Nxb/ylQvSnbO/nZf8NX6JF
7bhtiPhlamOeW+dY5Mna63s16yf52VbP2U90bb336+qfVDtextZ8pL6NdF3T
0joX/xKdy15C3l4WXTbHT+eLXwm9Fq13sSFtkzHkbqK11nKKzl8UvbfAFe7X
uB2DcV3se+PS+h8fiDjsHNHlWVt8I/Gv6l1HBGPSb6pvH7UNxH+o/ot137d0
vLSe01TtEPEDiC9E19KYtzRmGD60jkOD8zj4lviYN0T7Vss1GNe9WXwUv4to
R42Zomu/1rgurJf6zguOB64Xv6/ahswVMUhtv3YyekttHfFvq38t9KD4l/GR
1NYWP1X9dfL7/6DzDQ2Wm6uyL4Ptx8bzzuRu8GmZv43Ef8ya1faTZ4p/XHxT
8c+J30z8suhs7Lvm8tysU85NXvOHiL+jbQX45KzgbwTjujNYR0/EP6yNJa8s
+ny0v4T+5H4tS+uoz6JlD//nU13bprBOYD0nF9b7m7KPRcdVjj/ATj8jLon2
AbuKjqlsr/YPzhHC09erth/1lfjza+PfrUUH15aR5qLPlMaZ0AvEs8Sy5J6O
re3/17V9dHzyP4n1xLdFX4m/K9q+gYl1K+3bgCGcqPfYsbSeub+2Hi6Cbexj
Rbaz0XvhONFtan/7RN3zidK2E9tzX7R/R+xzU7Bt6if6czQe8xx6kT2DbOja
m4NzQXtjS4NtZUdsRP0/PxTcHPwcjPTwYN9mjs73DfYTfhW/MMdfYHr4mfRj
R9epnY+9G9mI7tslWo+gT8Ah0cXoZI7Xru1Tja2c63i7sH78Odj3Jvexfr0Y
ni0eAlMJXl/yOKuUjvfQicRv7LUZxM/Rtm9X0YuSbcUnosskY26/8u217SG+
dpn1Hjgwe5p86LzKenRG1qXr1Ysh8eKByjZm26yPsXvofmKjg2rHQ19qzIzo
vN5uolWyPrlQ/Lr14qko7teY6dH5RN7z32CdvJLG/lHb1yOWqqPveUt03ot3
5t2rrM9Zt9t4ZmE5vjP6Wp47KTqe4tpO9WLxKu6tbMvBNh+vnKfGP2kpelPl
93xDx1cE44dja+PQ4Ex3ib+S7xR/r/iTsi8EVg92ST842h+6z6vib8WXry2f
5FJOru0D4wvfru8cqP6W0bHfhzwr2F9irw2Mzl+8LX4N0ZuS5f0e9c9XO0j8
6uAfwfjrnbVxD3By8HMw9feJfXR+tNodeqcpwTbh8GwXLtXxCPWPD44rj86x
Jbae2oAuwbg1ckCNwPHBc82z8PmP0HEjCeZxwTJ9B3o3GusAt5nK88Svm7/p
5KxDBgXHa8zn5ck6f576TgjONTPnQ9V/Z2nbd2DyWvwV7duDKayqvvbEb7qm
nd5hSLReJZ5mf7If0QOjsAv4mvj80TYU3AkcGMwPvII45pAcy+BHTscGi/at
HbsRw5Ez+YJ5E39M7TiCeCJWWW5K5/cbxF+t9oH4uaXXgBwctFMytvY5+xZ5
Qtfk2HA9nfustDwgJ6foXZrWzpODL6PL3qxsR07W+I90/HHp3N4ppesvjqh8
X+6JfNyYx1xQOgdALgBdOp93Lj13D7N24l8Uba22jM69IHpv/h5yxtB7Svtk
pwTn+Mj1Yae5N+/TvXS+Ct1eJvdzHgwJLImahnEaN6u07YMnJp9QuZbh9GxT
5uR5Q/++VFnnI8MxWc6pH7ggORewXHKOgVwDeUbmfFa+9lRdcwnfLvpQdG1J
B/YT34g+U987wXa8c7QPDj6KH/5sZd8MLAXcA7xvdnT+soP6u0Xbse75e1eM
xvTwDUfX3gvsiYZkWwOuvleWeWR/j7yP2E/Tg23lFvjjwXZqc+xeZZv+gPru
qfzOyN5dlffUs7XjJeImcgfUPpwtfjnRGcG+3JY6PzvYN9tG/NXJ9SyvJmPH
3fL7L6/jvUv7239E1ymQK8S3xseeWjvviX9FjPl8sr9I3pb8bSf1T9PYL4Nz
SWDUl4nfq3QdCzkG+K117ivdZ7Nsg36sHGOCdRyax3Pd3Oi5JWfaLuPbxGjU
88zW+Mk5VtuytK4fWBsnAV95rbRf0Zd3Cp7D9TV+TrBPuK34S0vHGtSIrByd
iydvMi0Zb6WGpE30HiRn0Vr8SYVzFrzjsflbqA25XLS9aKvsn7fCd4iuQyBH
8E4yLkkNScdofxu8+oNgDHDD6HsyR9jm94NtEzbqvWC8bgONeTcYr+sifvXo
GARc80P1ryh+I/WtFZ13ACefG+wbb6e+DtFxCnkZMDjiDPJH3wb71TtG44P4
kvjV3wT7zDtE57zBj4lZdguOPYlBvwv2k3tEYyPEPvhuU7O+QFfgO5Hrwy6M
qa3b0fFrRssqeSXiH/baxtFrclxeF2JFYkZqWSZXxh+If9tHY1nkmyZV3o/4
/GCtN+vai4J1OJgANSDk5Sfq8FycjqyX0E/UxjxY2t+APlR6T7J/kf8bdO2N
tfFl6lO+0rmHS38DeBE8ft1Aneup93g62I5jg/DxDwzOORyU7c+E0nK/2H6L
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
+X9mj1Hc
           "]], Polygon3DBox[CompressedData["
1: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
yn6deMiZJGYQC4lpwodxvypz4GcLc0S4MRoAPmULOFVlDQCftjmcqjKHnFWY
I8MtX6jsA/E5I+BP+j19S/P5G6PjHYIEe/q6yhzyptK/gd+CZoJ2Qg5OLv5R
6XyEHBp9C80K7QrNq1WKp//B9XRNN71+cWm9CU2N/L29xsWFfWKPynx2Qe6c
gtwCzeDdwhoPWgIaz+LCORfaz3Tyl9w5DbnNX8IXCvcX7ircWmNV7pyf3P+l
6L1ygvDP0frVU8SvxD9WC59IfCys/5Gvv5h5jrUzos8inLxx4jNwbzhYLfiV
8JHcS3I4nl30s1+uuQdT/vECsUnvf6Tss6K5VaHxQnTOSO4I/4KfVRojtLYi
8bMtdX8vLT3HGvsNrYCYSmw9KDi2gtHSfiitLVwHJxb+Q9f3kN26MD/6Vngf
rZ8Jf4z2P91yc5Q/S68fCZfS9fvr+qvgX8L74sOi/f1C4nnufKi25k7hLAbr
m6P0/27iOftV7/FtaX2xa7Ce+YH+75vZv+BnPhTulNn/4Idm6v0+EF6s+Tr6
7Z/qf+fM/gq/tQr/kfvMc/ZP0/+rM3Oa0/EV+MDcPgJfQfzuljkeEBe6l+YX
szXuKp1XkF/gLwfJfpOYl9kf4ZeOLa09kcMeJ/tuvf/SzD4V3/qZrj8wsz/E
L07Q+q+ZYw6xZ2ZwvtmA+1Xal8JVu8PPhV8Kzr/qC29Xml8ckdmf49e3EK6d
ew8Pld2T35WZ4/Uq/Xx5P94XX70JPj93DCAWFMF7DY52RvAZ5ey2CT67aCRo
JWhaaJHkgOSCaChon/ivlwt/xxvwRdxv4ZG5+RW+AX11mfAE4RnBNntkDOsa
sbBmNxdupnGB8JXCM7lHwbkFHPjCYH92q/7fnlnrRGMjtyfHR0tGo0CrQKNA
K0WjQKtAI0C7PVvjHL1XZ43Dkr+8PZjfoaWiIaAl4MPQYtFU0FbwUWifaJxo
49xjtM9dycsL+2B8MZoK2gqaCVrzH+RxmWMgsfDQ0lwfjewS8j3NH6D1T/CZ
cF59h69k95ZdX9e3Kc0l4SdrNPevcFPOKzxe67N1/ef4Pq3Vq+H84zj4nK5p
D9fTejPZe8puQOwUbi68FzGV/RmtffTV6xoKz+MMa72d1jcVflzzx+Tm4HBx
8l7yX/b4MVp7N/qz9ubc1fD5Rmskp+hSOu8m/34cnyK7QWk9eTd8Rum8mfx5
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
oZ18
           "]], Polygon3DBox[CompressedData["
1:eJwt1nm0TlUcxvHXfe97Zahk1mCWa0iDuaIIzSqyNMctoTJrMo+ZQqKUkqky
LGWWrEpWoiUlFKKSiJBSaSLp81vn/vHcs5/vfn773HP2Pnu/lfJ6tOmelUql
BlOGuuSkUrelU6mvwYb8CPBv6lYgldqOd8hOpQ7zaTqi/y/sF5qi7iG6RXuX
2q9oLb9A7pjcKXw+jcYeoKbaH8tU0bfHmHPkDmn/gf9Ez8mcxvdjv/JHaTKW
R020N6hdTyv4E3K75L7HZ9EobJbxDmK/8wfpWSwbO4qd5H+j57GNWK5na2SM
Y9h0vjN+q/Zu4zeQH451wq7FtmIXYQfkH8FPql2ivSaeQeYp7F39a2RfoOHY
3dhD2r+rvV9fIX4G3knNXHw2NhNrS+21j8hl6VvIV5d7VXsmbXGvXH43frn2
frlD6qfx82kzNl2uDb0idy/WU/+/cl2Mew5fGp8rN1bmVX0j+Z/wPL4fjdOX
we7Beug/qbaz2mL8KsrSn4UvoR78z/SguuN8H30n+NfUr8NqUFmsIf80zZDZ
RluMV5zvTf344tQfK6u2LzaYL5NO1uT52GPYEL4sDcEuwHphffki1BcrgZWi
r91vvvvOo1kyfWiQTGkqFffme1Av7VOe7T86wDemAmo/UfcuzebvM94AuYLU
2z3O4yfQDn6PuibYxJhvKqT2LHwp9eQfVz9UuxwNlSuP7TRuUe0V2EoaJ1OR
VqudpG8x1k2uNd2bTtZprNe5meTdxDt6CisvO03dVGwW9jr2QMwnNp3aavem
x417UqYKjZYbKVcFf1nmduwu7BfPMRWrGu8AayizkC+ub5drM6wZNke7Qnxj
rhNkv8L2xT4R3xN2uVwj/i3tEthu14lyB9L532Aq2WDaUQf+DP3/QEv4lnQ9
tp7WYUP4q+hqvrpcGc/xQfy/mWQtxposjq/k74xvCzuBnY0tj2/cda2aya6b
jDHe/1EyJxl7A/8ijeBforIyzaluzJ/aojFv/CKZmVgJvj1+n9rf3KOIvqX8
FGoa7wP7LvYSfkwm2S9i3/gcG8vfkUm++fj2z1S7jO+YSfbW2GOny+XFN+Q+
rWJ9Ri29l792B8a7okKxFvhHqbP2cZk/aC9/ZewH2CK+lHG/cZ8rsMbYm1jJ
uBfWAKuPrc5K1mGsxybYFfE9Y6Wxb7H6WD1sVTwvtgOrh9WNdYsVxrZjA917
PHYhTcBqyAzBnuVr0CSsNjYYm8jnxj6M1cIupTqx1oynO7XVeJdhF8cawgpi
22JesEuwxdgZ2BfZyVqINZGr/b6+ZwywN+aBNvOb5Nqlk/mMeW0mV4ymxjvF
lup/O86Y+DZjH8GWYaviHKNh2CasptrG6k7HXo6VifeHtYg1SS9ilWMusVYx
tzHnOclctkwn51OcU1/mJOs81nshuTf1jcHqYLW035BxSW3OTs63K5nlcbbR
tvxztXU6WRexPnbE2lX7I3Z9dnIWxJnQDx+NVYr/w3jV4n1SbX6eOtHU5/70
lxubvx/GvvgX/zB1jLNX7ijt4bsHj3+MHnYpEr8DsK78aZmuWOFMMt44rGrs
L3FG8o/EOa/9p1wHuZxMco+8dLJuY/1uzN+Le+ev71jnm+MMpVHaFeM9qa2a
SdZ9l3SyX8e+vYl/Ms4VrEI62d9in+sZc8wXjvMozhnsCWwYf27MLVYh1hRd
xC/ISn73bPFeJskdSSe/QeK3SAEdg7AJsQ/RRKxm7FVxVvM71NaLPTT2EKw5
9iFWEduHNY19DHsHK4ftxW7Absd2YvWxY9gA93gGqxZ7FZYrcx3dHO9Drnb8
JpC7Brsm9kisErYfuxa7CfsMq4UdxlphN2KfYjWxQ1gLrAX2EVYZ+wH7H1YZ
Rso=
           "]], 
          Polygon3DBox[{{1415, 973, 729, 730, 974, 1416}, {1425, 987, 736, 
           737, 988, 1426}, {1641, 862, 749, 748, 1018, 1446}}]},
         Annotation[#, "Charting`Private`Tag$4223#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt1OdzlUUYhvEloaMUCQLSEkhCF6Q5AkJoCS2UBJHeRTpIla6EAKEkhKAi
vTi0YRhGTOgEvsFH/gnaoBSlOCPgbxk+XOd6dp/77LvZs29Spi3MWVAhhDDS
RzlifcTHOV6REML3GITB0ZVDeKPXUv2Wh/Bz/o4boKxiCI25PhYhW34Yz5Bp
w9/wSyxVL8MF+R4yTdRLsBgjkYNctEcx9tjLYbk8+d+M71mjA9/nPbwGvfSv
GVdU70cl3JT/lfdilP4I/arqZhiHPtbNND9B3QnV0QXr0RkTMUS/G0/G5/gA
X+BHDNfLtkaeuidqItMzMszvU2/EH/ZQi3fjX71LyNX/yfggDuAfc48wAVfk
T1hzqMx0vd6Yhqnoi79kNnMGjspclZ8ZzxYtsEq/D6/kTN6KEXIF3B/X5T/i
OUjDPCRhAOrGZ8jO5YFYiI9Rx1q3kG9fV7g2GieGsMm4CW/mpryFm3EBJ/NW
TuFt3Jy3cwtOxQ51GhdyOhdxS97JrbiYW/MuTrXnJM+8jRLjq1wXRfa2EwtQ
GO+Ove/gdDTCcryWm8/1cNE6WbwN/WS38+x4v2RS+Qf+D9+qr8nOir+rXD/e
gsd6M/hP3sTN8QtO2dMxuXLfOaT3c7yPOIwjOBTvmv4dvTrqYyiV/ST+hmgY
z1t/fDxb9ZfIj++AdQeYn6JOwYfogQ3ojiy9h77zNyYZJ6MGusa/BcP0s6wx
Xv0ZqsV3S7a3+crqXaiCG/ZSwk1xQj9Hf616HR4Yd+Sx8b6r9/tNplTyTll3
jLlPsRp39Z5hlPortMNg63zNl6w/ml/pz0RbdR4/RX+Z4cYJaI3LsonxzuKF
fjZXQKt4p+PZyK/iJ3pDOaCMbhjX4qNcyuXxfeTr8dzinYnvLl+OZ8QXuTqX
xXPh8/w7qqrPxXPhs+xx4Qz7k8Nptr1wkh1DOJ7w7vEhzWS99/8//weiZ46G

       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1376, 1822, 1510, 1496, 850, 1497, 1375, 1413, 1794, 1640, 
       1412, 1475, 1793, 1639, 1411, 1260, 1751, 1638, 1729, 1259, 1352, 1728,
        1258, 1351, 1727, 1257, 1350, 1726, 1256, 842, 1537, 1536, 1551, 1552,
        1789, 1696}], 
      Line3DBox[{1595, 1700, 1591, 1629, 1473, 1527, 1404, 1405, 1189, 1580, 
       1579, 1578, 1581, 1830, 1345, 1250, 1722, 1346, 1251, 1723, 1347, 1252,
        1724, 1348, 1253, 1725, 1636, 1749, 1254, 1637, 1750, 1255, 1406, 840,
        1474, 1407, 1409, 1792, 1349, 1408, 1556, 1668, 1826, 1557, 1507, 
       1508, 1410, 1592, 1610}], 
      Line3DBox[{1596, 1621, 1594, 1631, 1550, 1532, 1463, 1492, 1043, 1583, 
       1301, 1697, 1769, 1582, 1300, 1768, 1649, 1299, 1767, 1648, 1298, 1766,
        1647, 1743, 1297, 1373, 1742, 1296, 1372, 1741, 1295, 1466, 1765, 
       1689, 1294, 1687, 1764, 1490, 1461, 1293, 1546, 1824, 1389, 1568, 1388,
        1520, 1549, 1593, 1698}], 
      Line3DBox[{1597, 1622, 1505, 1398, 1713, 1666, 1396, 1336, 1397, 1712, 
       1665, 1395, 1335, 1711, 1675, 1240, 1334, 1710, 1239, 1333, 1709, 1238,
        1332, 1708, 1237, 818, 1707, 1236, 1331, 1706, 1235, 1330, 1705, 1234,
        1329, 1704, 1233, 1328, 1703, 1232, 1327, 1702, 1231, 1326, 1701, 
       1230, 810, 1394, 1523, 1627, 1609}], 
      Line3DBox[{1598, 1569, 1414, 1538, 1752, 1677, 1261, 1142, 1539, 1262, 
       1730, 1353, 1263, 1731, 1354, 1264, 1795, 1415, 1416, 1809, 1265, 1417,
        1418, 1796, 1266, 1377, 1378, 1797, 1267, 1379, 1498, 1753, 1669, 
       1558, 1618}], 
      Line3DBox[{1599, 1559, 1512, 1274, 1671, 1754, 1419, 1381, 1273, 1800, 
       1429, 1428, 1272, 1811, 1426, 1425, 1799, 1271, 1423, 1422, 1798, 1270,
        1420, 980, 1269, 1380, 1540, 1825, 1670, 1554, 1268, 1511, 1570, 
       1620}], Line3DBox[{1600, 1571, 1360, 1450, 1672, 1735, 1451, 1361, 
       1484, 1686, 1736, 1362, 1485, 1816, 1452, 1363, 1453, 1806, 1446, 1641,
        1804, 1454, 1448, 863, 1455, 1384, 1553, 1827, 1572, 1364, 1574, 1519,
        1608}], 
      Line3DBox[{1601, 1576, 1575, 1829, 1573, 1456, 1585, 1584, 1577, 868, 
       1544, 1287, 1760, 1643, 1286, 1759, 1642, 1738, 1285, 1368, 1459, 1818,
        1487, 1367, 1458, 1817, 1486, 1366, 1737, 1673, 1457, 1365, 1821, 
       1503, 1385, 1567, 1619}], 
      Line3DBox[{1602, 1623, 1522, 1468, 1392, 1808, 1313, 1393, 1469, 1778, 
       1674, 1314, 1471, 1779, 1691, 1315, 1656, 1780, 1316, 1657, 1781, 1317,
        1658, 1782, 1318, 905, 1319, 1746, 1659, 1783, 1320, 1660, 1784, 1321,
        1661, 1785, 1322, 1662, 1786, 1323, 1663, 1787, 1324, 1664, 1788, 
       1325, 1056, 1495, 1534, 1633, 1617}], 
      Line3DBox[{1603, 1624, 1533, 1467, 1494, 1050, 1312, 1777, 1655, 1311, 
       1776, 1654, 1310, 1775, 1653, 1309, 1774, 1652, 1308, 1773, 1651, 1745,
        1307, 1374, 1744, 1306, 891, 1305, 1772, 1650, 1304, 1690, 1771, 1470,
        1303, 1688, 1770, 1493, 1465, 1302, 1807, 1391, 1464, 1390, 1521, 
       1632, 1616}], 
      Line3DBox[{1604, 1590, 1535, 1506, 1403, 1721, 1667, 1401, 1344, 1402, 
       1720, 1676, 1472, 1343, 1719, 1400, 1249, 1342, 1718, 1248, 1748, 1635,
        1247, 1747, 1634, 1717, 1246, 1341, 1716, 1245, 1340, 1715, 1244, 
       1339, 1714, 1243, 1338, 1832, 1589, 1588, 1242, 1337, 1831, 1587, 1586,
        1241, 822, 1399, 1525, 1526, 1524, 1613}], 
      Line3DBox[{1605, 1359, 1543, 1805, 1692, 1449, 1566, 1565, 1447, 1358, 
       1815, 1483, 1439, 1445, 860, 1482, 1437, 1803, 1444, 1357, 1502, 1734, 
       1682, 1443, 1356, 1501, 1733, 1680, 1441, 1355, 1564, 1442, 1732, 1518,
        1530, 1625, 1517, 1630, 1615}], 
      Line3DBox[{1606, 1513, 1528, 1514, 1828, 1421, 1561, 1560, 1275, 1678, 
       1810, 1476, 1424, 1276, 990, 1477, 1427, 1277, 1802, 1433, 1499, 1434, 
       1814, 1278, 1436, 1500, 1755, 1683, 1279, 1562, 1563, 1430, 1756, 1516,
        1541, 1515, 1614}], 
      Line3DBox[{1607, 1626, 1542, 1823, 1695, 1440, 1383, 1284, 1685, 1758, 
       1481, 1438, 1283, 1684, 1757, 1480, 1006, 1282, 1435, 1479, 1813, 1681,
        1281, 1432, 1478, 1812, 1679, 1280, 1382, 1431, 1694, 1801, 1529, 
       1628, 1611}], 
      Line3DBox[{1612, 1531, 1693, 1790, 1509, 1504, 1386, 1489, 869, 1488, 
       1819, 1460, 1369, 1491, 1820, 1462, 1370, 1288, 1739, 1371, 1289, 1740,
        1644, 1761, 1290, 1645, 1762, 1291, 1646, 1763, 1292, 1545, 875, 1547,
        1555, 1548, 1791, 1387, 1699}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{678, 811, 1701, 679, 955, 822, 704, 1115, 1116, 1065, 1220, 
       1207}], Line3DBox[{680, 812, 1702, 681, 1196, 823, 1831, 705, 1197, 
       963, 1188, 1189, 1190, 715, 1156, 1159, 921, 1154, 1789, 1155}], 
      Line3DBox[{682, 813, 1703, 683, 1198, 824, 1832, 706, 1187, 833, 1830, 
       716, 1141, 842, 725, 1752, 972, 1171, 1173, 1177, 1228, 1217}], 
      Line3DBox[{684, 814, 1704, 685, 825, 1714, 707, 834, 1722, 717, 843, 
       1726, 726, 1142, 1172, 1143, 1144, 1157, 1825, 927, 979, 928, 1164, 
       1119, 982, 1120, 1828, 1178, 930, 1134, 931, 1121, 996, 1801, 1123, 
       933, 1136, 934, 1166, 1732, 1124, 1012, 1126, 1180, 936, 1021, 937, 
       1735, 1024, 940, 1033, 941, 1737, 753, 1038, 1086, 1819, 1039, 762, 
       1765, 1048, 1090, 1049, 773, 1772, 890, 786, 1781, 903, 800}], 
      Line3DBox[{686, 815, 1705, 687, 826, 1715, 708, 835, 1723, 718, 844, 
       1727, 727, 851, 1730, 734, 980, 1069, 981, 1071, 1810, 985, 995, 986, 
       1075, 1812, 998, 1011, 999, 1733, 1098, 1022, 1081, 1023, 1736, 746, 
       1034, 1083, 1817, 1035, 754, 1041, 1087, 1820, 1042, 763, 879, 1741, 
       774, 891, 787, 1782, 904, 801}], 
      Line3DBox[{688, 816, 1706, 689, 827, 1716, 709, 836, 1724, 719, 845, 
       1728, 728, 852, 1731, 735, 983, 1798, 1070, 984, 1073, 990, 997, 991, 
       1077, 1813, 1003, 1013, 1004, 1734, 1099, 1025, 1082, 1816, 1026, 747, 
       1036, 1084, 1818, 1037, 755, 870, 1739, 764, 880, 1742, 775, 892, 1744,
        788, 905, 802}], 
      Line3DBox[{690, 817, 1707, 692, 828, 1717, 710, 837, 1725, 720, 846, 
       1729, 729, 973, 1795, 975, 736, 987, 1799, 1072, 989, 1097, 1000, 1802,
        1076, 1002, 1079, 1006, 1014, 1803, 1008, 1080, 1016, 1027, 1806, 
       1018, 748, 865, 1738, 756, 871, 1740, 765, 881, 1743, 776, 893, 1745, 
       789, 906, 1746, 803}], 
      Line3DBox[{694, 819, 1708, 695, 1748, 830, 712, 1750, 839, 722, 969, 
       1067, 1793, 848, 731, 976, 1796, 977, 854, 738, 992, 1800, 993, 857, 
       741, 1755, 1005, 1009, 859, 743, 1758, 1010, 1019, 861, 1815, 745, 
       1020, 1029, 863, 750, 1760, 867, 758, 1762, 873, 767, 1767, 883, 778, 
       1774, 895, 791, 1784, 908, 805}], 
      Line3DBox[{696, 820, 1709, 697, 831, 1718, 713, 964, 1066, 840, 723, 
       970, 971, 1794, 849, 732, 925, 1797, 978, 855, 739, 1754, 929, 994, 
       1101, 1179, 1102, 1146, 1122, 1756, 1165, 932, 1135, 1103, 1104, 1147, 
       1823, 1125, 935, 1137, 1105, 1181, 1106, 1805, 1148, 1127, 1167, 938, 
       1030, 1174, 1827, 1175, 751, 1191, 1149, 1185, 868, 759, 1763, 874, 
       768, 1768, 884, 779, 1775, 896, 792, 1785, 909, 806}], 
      Line3DBox[{698, 821, 1710, 699, 956, 1063, 832, 1719, 714, 965, 966, 
       841, 1792, 724, 922, 1095, 850, 733, 1145, 1753, 926, 1162, 1203, 1223,
        1163, 1216}], 
      Line3DBox[{700, 949, 950, 1711, 701, 957, 1064, 958, 1720, 960, 919, 
       967, 920, 1826, 1161, 1160, 968, 1118, 1133, 923, 1096, 1822, 924}], 
      Line3DBox[{702, 913, 951, 914, 1712, 953, 917, 959, 918, 1721, 962, 
       1117, 1131, 1199, 1226, 1132, 1209}], 
      Line3DBox[{703, 915, 952, 916, 1713, 954, 1113, 1114, 1219, 961, 1210}],
       Line3DBox[{796, 899, 1058, 1808, 946, 782, 886, 1110, 1222, 1052, 
       1214}], Line3DBox[{797, 900, 1094, 947, 1778, 783, 887, 1053, 1807, 
       945, 770, 876, 1109, 1045, 1227, 1212}], 
      Line3DBox[{798, 901, 1059, 1779, 784, 888, 1092, 1047, 1770, 771, 877, 
       1046, 1824, 944, 1169, 1151, 1176, 1108, 1138, 1107, 1790, 1100, 1224, 
       1200, 1211}], 
      Line3DBox[{799, 902, 1780, 785, 889, 1054, 1771, 772, 878, 1089, 1040, 
       1764, 761, 869, 1085, 942, 752, 1821, 864, 1032, 939, 1168, 1218, 
       1204}], Line3DBox[{804, 907, 1783, 790, 894, 1773, 777, 882, 1766, 766,
        872, 1761, 757, 866, 1759, 749, 862, 1804, 1028, 1017, 744, 860, 1015,
        1007, 1757, 742, 858, 1078, 1814, 1001, 740, 856, 1074, 1811, 988, 
       737, 853, 1068, 1809, 974, 730, 847, 1751, 721, 838, 1749, 711, 829, 
       1747, 693, 818, 691}], 
      Line3DBox[{807, 910, 1786, 793, 897, 1776, 780, 885, 1193, 1192, 1769, 
       769, 875, 1152, 1150, 760, 1183, 1829, 1182, 1184, 1031, 1229, 1186, 
       1205}], Line3DBox[{808, 911, 1787, 794, 898, 1777, 781, 1044, 1194, 
       1043, 1195, 1088, 1158, 1170, 943, 1153, 1791, 1221, 1201, 1215}], 
      Line3DBox[{809, 912, 1788, 795, 1051, 1050, 1091, 1128, 1140, 1202, 
       1225, 1139, 1213}], 
      Line3DBox[{1060, 1057, 1056, 1093, 1129, 1130, 1055, 1208}], 
      Line3DBox[{1061, 948, 810, 677, 1111, 1112, 1062, 1206}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
LX9+UFlgoQ0bFrH9VcOO1EGKbhqNY973ai/m+bQCOzc7Rl2XCcx1+kyUlzzp
ucHH2wizj8dMy5/JgPvSz+j5S5LP4roXbwtsWqznJ7ang6gEubxEHJuXenGK
1fiv8M5y11XEkS1Ba4NQHvtA0iLCvQ0irK4wcy61kcI0DXqeinWHgXKbRhC6
56ktpJpOZk3e/wj1g34IqW281QldfwwPjzyi+P3+vRcQ92beEG+Y8bkdfiW5
X6D04cuZkAeov0R83VrUTxaodUO8465QNxSxPFSgB2R5L9I4K85dsxTnWKI/
PuEXrYRUm2FT95MbKE9jhpz7fo46vzxPyi6Ft4HZl1Buv3/qT0tqX8cXfeuk
/Id9OT0z0f/lZUu70P9jC1Kpz2sljQUeFvi58OjZ4lyrVogR3F23JbCTzCqI
5DtcqpjGWevguceVYzsVKoiybg7iNphNDBVc5t4F1X9zDuJ+jyUE0ftQ+/y5
Cff7bz9j9zVmv+SfXOAP25yyAzA0zRX1v+8zqvs/7PynD0HZ7pT/ELbtqRn+
/893KfLo/w9O/MGAE38ylRv/6TWMFmpfkP7tBfMQtS/OWgfjcozOYxxqv9fT
/Yj9fukStDPL074Fzz3Z6Q89bw4Ws35i3E4IXryEceh+sv4G6vtu6ebHOPzj
M0oFix1RXjXp67stXj3/9GGsflwYuYT5EPI5/wrm3c90/fWYD7mTFnjivgwe
nD+L+i3fFy5Ef0q/P7yH58pdiW0n/yHMh6zS+C4839aCTEn0s3G9Rif6WZ2l
eR3zPG7APgL1s8qy6TzvGBIJxL9/c9cQYQkztGPwQlmUqheyp/ccPYdaJh8K
wHr54P1pC+Z569GrdH2YhstuQD//7Vc4Xu06yodPCbnd7+kEvWghYyHVUsg0
NHmG8iPGLJcfTh0w0feGOebtjkCZEJSncPN2kZfiQ8zbUNnrF1C+92knnbf5
WqHuyE/6UljV2K+lmncY0rjh4h1N1TtZOGxP9/ECpahbWO+hHNwgjRzcIM+4
uHGNgzPkIgdnSB4XZ/TnDI+ncI8oy2WK4vyVvO65NeKexzIHDQrfSHfJXLrv
exhPtEF8m7s9sY/CYbK4feAo4voUpYvDiMNp49vqA5qKydf9D2h9jcCCiYiT
QWwXK8TZLfKnDqJ+wUMjRcT/1yMWkykcJl8+z0LeR9IbSQriMHP9vi/Y1y7v
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

    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-5, 5}, {-5, 5}, {0., 5.3851641439368745`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"eccbd826-484f-43fd-9ce7-35080aceb8d6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["AD2", "Title",ExpressionUUID->"40a7104d-6a5a-42c1-802e-51c663226d84"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  FractionBox["1", 
   RowBox[{"x", "+", "1"}]]}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"ba14b283-eae5-4f09-844e-929d15ff4265"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"a13f146c-0d43-4a8f-b750-e2af09eb5feb"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
        "]], LineBox[CompressedData["
1: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
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$3502#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1.140498047664812, 1.1370000558133775`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"163727bf-39d7-4534-89ce-97d9cd460c54"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"fad22", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", "\[GreaterEqual]", "2"}], ",", 
    RowBox[{"x", "-", "2"}], ",", 
    RowBox[{"x", "^", "2"}]}], "]"}]}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"82707a82-db30-472d-bc86-41ec0547aabe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"fad22", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"b7634445-1f28-472b-b531-4170df5189eb"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
RcRcBsudB38yoa5V2vPdDyL2P311O1k=
        "]], LineBox[CompressedData["
1:eJwd0mtM02cUx/F/C+0jUin0IQpGBkLjKoiIUyNBeX7ZXEeVVBEcXsALCGYE
pYkKlTFHtgjDNAgUL2gRlS6AEhVwXgAJYhHwggYwgrdAg1S0ItWOKZexv3tx
cs4n37dnbnzq+kQhx3HB/HzZqkK5qtCRAyf/csWzHwLTFjpM45232Ror1rDn
jQPef0l4X/+lnSUfYCLzLaHnTN7/H9lsoyKzrU/Be4F72E5NEfv3ykiURs0h
iwVOuBvK2OqO3uQjxRzQHrLlXXAt6+eqTjwIEsDVpelw70Qz658TZJCFCzHN
ou0vQifTdDaIHLQOyNIPBno0PWOPwubPatA7AuPG2BG1mVmFv9e9rBThsrPk
TUb5IDu+3XK76okYsb+VSGu3vmV0v//+72wEEd2V3TNa3rOv/LS6Q75OWKEc
8XD+/gMbyzGuyWfTYZeqjvv8amcFqxoNjjHO8M3NDHG6OMqunTRHybMl2LO0
pTxc8pldKn9VIzk7A1vX3kv0/HacLVN/TD/T5YIUw+B7lE+yFfPSLWrOFdqI
4Y4SjsMdbmCwWucKnaDtQYKnAB6KH4vfyN2waF3V4scqITrPXysltW4wbkhl
0iQHJPdKUzeFydBd4/2yJtMR7dG7bVmPZSisfGoWXBChIKCuVRdP4Ruz74hn
ixidQ/uKhIkUxq4hheiuGLKKoB3aXRTydduaRzrEKJT/OZaQwlu1+u/WHjGK
vPIDQ9MoFKE+W9KsYhyTJumHcikWeN+f10UJTn5026asplhi8WvUxRM8rb4f
0FBLcSWhOEa7i2C2JudT8FW+97nYElIITlknCrzqKZb1fvYLTSMwvLKY7CaK
5fce5g7lEpQ+uelf1kMRdunnDcpqgr6j2n88nlE0BdiGg68S+ER/Y8p7QYGK
pD+86gnOPKqIyzDzPhtZbzcRnGvX50daKVbpv55b1kNgzlHHtQ5TmKQldXkv
CHyVTv4rbXzXyaIzzARlzQdvK0YplIcmsyOtBANZIfmnP1G0Cfb6rOT/QM7s
se7jFOEHX99QjBLsnLw4//Ak38fiotzHCYz1P41OTfE9vcs6NUXwH/zcUW8=

        "]]},
      Annotation[#, 
       "Charting`Private`Tag$5136#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 5}, {0., 3.9999994285714493`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"3e662482-b287-4ff6-a9b1-1530ed0012ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"x", "+", "2"}], 
    RowBox[{
     SuperscriptBox["x", "2"], "-", "4"}]], ",", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", "2"}]}]}], "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"fb8cbee7-ce8f-47ff-9ce2-5bf3627d8fa7"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", "4"]}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"b3086d4d-ebe1-4fb8-b27f-087f0bc63428"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"2", "x"}], "+", "1"}], 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["x", "2"]}], "-", "x", "+", "2"}]], ",", 
   RowBox[{"x", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"e952cd58-a1b7-41a0-8a1a-f0053d7b7902"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[15]=",ExpressionUUID->"1e0dd998-ea07-4d7c-9b8b-43344b0d2d53"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["x", "2"], "-", "x", "-", "2"}], 
    RowBox[{
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"2", "x"}]}]], ",", 
   RowBox[{"x", "\[Rule]", "2"}]}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"f4ed87bf-6a73-4c42-9ef6-67fa1a9c4791"],

Cell[BoxData[
 FractionBox["3", "2"]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"f3c9e829-ceff-48ab-b8ef-51d0eb70ae51"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SqrtBox["x"], "-", "4"}], 
    RowBox[{"16", "-", "x"}]], ",", 
   RowBox[{"x", "\[Rule]", "16"}]}], "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"5e45636f-67d7-44d2-8d54-e0f1db0307a7"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", "8"]}]], "Output",
 CellLabel->"Out[17]=",ExpressionUUID->"2cf4a9b1-5006-4402-9347-221ebea45fa1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PolynomialQuotientRemainder", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"16", "-", "x"}], ")"}], 
     SqrtBox["x"]}], "-", 
    RowBox[{"4", "x"}], "+", "64"}], ",", 
   RowBox[{"x", "-", "16"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"008c685b-4ce8-480d-978f-d0b7acd3f9d6"],

Cell[BoxData[
 TemplateBox[{
  "PolynomialQuotientRemainder","poly",
   "\"\\!\\(\\*RowBox[{\\\"64\\\", \\\"+\\\", RowBox[{RowBox[{\\\"(\\\", \
RowBox[{\\\"16\\\", \\\"-\\\", \\\"x\\\"}], \\\")\\\"}], \\\" \\\", \
SqrtBox[\\\"x\\\"]}], \\\"-\\\", RowBox[{\\\"4\\\", \\\" \\\", \
\\\"x\\\"}]}]\\) is not a polynomial.\"",2,28,4,23001956185904658267,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[28]:=",ExpressionUUID->"b7062d4c-2e7f-44cc-9ecb-2ef8163fb50f"],

Cell[BoxData[
 RowBox[{"PolynomialQuotientRemainder", "[", 
  RowBox[{
   RowBox[{"64", "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"16", "-", "x"}], ")"}], " ", 
     SqrtBox["x"]}], "-", 
    RowBox[{"4", " ", "x"}]}], ",", 
   RowBox[{
    RowBox[{"-", "16"}], "+", "x"}], ",", "x"}], "]"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"540cef5f-3f23-49d5-b362-698f869dd63f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["x", "3"], "-", 
     SuperscriptBox["x", "2"], "-", "x", "-", "1"}], 
    RowBox[{"6", "-", "x", "-", 
     SuperscriptBox["x", "2"]}]], ",", 
   RowBox[{"x", "\[Rule]", "Infinity"}]}], "]"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"274a98cc-2edf-4764-99f0-efcc4beefb96"],

Cell[BoxData[
 RowBox[{"-", "\[Infinity]"}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"5aab1561-ec6a-4bc3-b20f-55b7b9d817f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"3", "x"}], "-", "1"}], 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"2", "x"}], "+", "2"}]], ",", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", "Infinity"}]}]}], "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"80c76394-18f1-4d89-a443-2b4736da6705"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"bceb2638-0f7e-48bb-9d59-10cf799454ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"5", "*", "35"}], "+", 
  RowBox[{"6", "*", "65"}]}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"96fad199-85d8-463d-bcc5-98d085cd5444"],

Cell[BoxData["565"], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"2ece3eb0-2b4e-4dbc-886a-445e5951cb87"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"fad24a", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["x", "2"], "-", 
    RowBox[{"2", "y"}], "+", "5"}], 
   RowBox[{
    SuperscriptBox["x", "3"], "-", 
    RowBox[{"6", "y"}], "+", "1"}]]}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"79fb2041-e08e-454b-a6ed-5108599f9161"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fad24a", "[", 
  RowBox[{
   RowBox[{"-", "1"}], ",", "4"}], "]"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"0cf86b6d-bc3a-4c88-91b1-7930083bb948"],

Cell[BoxData[
 FractionBox["1", "12"]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"c1f3c770-0cf7-4015-b079-600e5871cf8b"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"Clear", "[", "fad24b", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fad24b", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "y"}], "+", 
    RowBox[{"4", "x", "*", "y"}], "-", 
    RowBox[{"5", "y"}]}], 
   RowBox[{
    RowBox[{"x", "*", 
     SuperscriptBox["y", "2"]}], "+", 
    RowBox[{"5", "x", "*", "y"}], "-", 
    RowBox[{"5", "x"}]}]]}]}], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"4ebcd521-1bec-4b3e-bdfa-2162ce4872d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "fad24b"}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"3dee719b-969a-4098-9441-23a98840de16"],

Cell[CellGroupData[{

Cell["Global`fad24b", "Print", "PrintUsage",
 CellTags->
  "Info453749759291-6688781",ExpressionUUID->"79d4e8b4-b693-4c38-ae11-\
407d0f6ddf00"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"fad24b", "[", 
          RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
         FractionBox[
          RowBox[{
           RowBox[{
            SuperscriptBox["x", "2"], " ", "y"}], "+", 
           RowBox[{"4", " ", "x", " ", "y"}], "-", 
           RowBox[{"5", " ", "y"}]}], 
          RowBox[{
           RowBox[{"x", " ", 
            SuperscriptBox["y", "2"]}], "+", 
           RowBox[{"5", " ", "x", " ", "y"}], "-", 
           RowBox[{"5", " ", "x"}]}]]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`fad24b],
  Editable->False]], "Print",
 CellTags->
  "Info453749759291-6688781",ExpressionUUID->"a56c6165-93dd-46e6-b5ed-\
100acb09ca90"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fad24b", "[", 
  RowBox[{"2", ",", "4"}], "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"7a1e45c5-694d-49ad-a29b-851561cdf9b3"],

Cell[BoxData[
 FractionBox["14", "31"]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"4698ce04-a48e-42aa-9d69-5502a52fc104"]
}, Open  ]],

Cell[TextData[{
 "6) Exemplifique uma fun\[CCedilla]\[ATilde]o ",
 Cell[BoxData[
  FormBox[
   RowBox[{"z", "=", 
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "49e501fd-9b9a-4fc7-8786-40cf67434f54"],
 " que n\[ATilde]o \[EAcute] cont\[IAcute]nua no ponto ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "2"}], ")"}], TraditionalForm]],ExpressionUUID->
  "91892304-e3d6-41ff-9494-e09b28e97f2a"],
 ".\nLimite \[EAcute] ambos os limites laterais; continuidade \[EAcute] \
limite e limite igual \[AGrave] imagem. Logo, n\[ATilde]o cont\[IAcute]nua em \
duas vari\[AAcute]veis \[EAcute] ou sem limite, ou com limite diferente da \
imagem. Para duas vari\[AAcute]veis, sem limite significa um caminho \
diferente; limite diferente da imagem significa um \
\[OpenCurlyDoubleQuote]piecewise\[CloseCurlyDoubleQuote]? (Mas os infinitos \
limites laterais teriam que todos concordarem.)"
}], "Text",ExpressionUUID->"7333cf7b-89a6-4b33-bb6f-20fc173ba752"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "fad26", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fad26", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", ">", 
      RowBox[{"-", "1"}]}], "&&", 
     RowBox[{"y", "<", "2"}]}], ",", 
    RowBox[{"x", "+", 
     RowBox[{"y", "/", "2"}]}], ",", 
    RowBox[{
     RowBox[{"2", "x"}], "+", 
     RowBox[{"2", "y"}]}]}], "]"}]}]}], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"23984dfd-c0e1-4092-ae6d-bafca4279040"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"fad26", "[", 
    RowBox[{"x", ",", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"e45179e5-a028-41be-8c51-a338c022634c"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
aNOf/hgxut2lyJRr+tV7rNc/kdKDJ1Rqc3hXBLzGp9HND1e+rHfesOWXHXuO
R5oJf+HdPa0zlxdwKMfzgbv/mXX4+STn1eknq1ftlmD/36Hc4SKrGqc6Dz90
9rW4UkUc6qn48Jl5654s7tQde+n4od7pVv7dted6OXeUcPiud/32R0+837HD
T7+fse+9w+ctEqkxvkbNPQejHYXn+fxH+j2WO/lw9ooo/XjG6790d027Kx8c
f2+y9W+S109F3LuPNvyu7tAEl3qqnF039bqTCe7eEfVTFk0taHgzr5/i3D1d
unw99b1LUcbDEL9foimb2504UuNEFLnBfs2sZuVHJD5Z3cbtX3dk/lXiif3R
HO89J608+mazj6v+UaXRerObmEcnSk/qs6rjDtu3Ah9y8M22jRqVcqgHPfHD
oS3Kf3Y6zd2y6JpPD3982OS280HTmnWfnGPlWu736yn9W7OJjx+dF6E8dn2T
M/eu/Hl1stWj87GuO7ZzmW5HEwxn/WrT5J7LcibecNapzRvuWvBy8zjDOce+
ZO/0jLoLz0bBkX9bc6Z82S7ppOHIud/0Gxw5l9ziyr+aNvrTcOz61Vs+H1Mo
65foq4saJT8/N9O5/59lm3e1j3Oaya6HN/ieG22a92vLwib/0e+WnW/Y5dQb
8YZjN3z7eJfTV04/Z/2I3rf7ULtmg5vnW3sUb+QernnfpJebpxgP2PWDVnQ5
mnVfkuHoC21fmdrD3f2v1ROVndxz8aSCf9U+Zjh297GLV92Quf9vs9sZJ71u
2zja3f2n+YvAh11xonCp+05a/BX451sv7undO872R8HfHx9/w7UVYvso4C/d
l/xphQ2xuErwpiNfHTpoabqTLLsEfPaxYQ33fxyLNwLP7vDm7o6Dshy+i3a1
ONYtZcHpbdGmRT9cN2BWfvSn9sn3Zb2+Ojona9DEkS0K2Xo6uV+z5g+vnBAl
bpbyDx+atPa2x36PzK/yV968CUdNT7ixVcvE7EN/RVZr3DVR+eE/Vpi05IpF
kdenHR7Ur8iF6Lwh1xdsefzXSA+Nn2fU7jOtryyQtvFIhHHVXfb7xtpT3P/d
fc7wtrLTN265yznbI96hnvKyxxd+2PnjjWUK2/jE7p7atVvc3LVpTk/h2Nc/
v9Ow/rLrMqyeF2RH0/6VH/zU8fyI3dEPtg652O94YeMn7Zc9Z75duS86QfP4
o/f+uPD+j9ujvLei+g/+kRNjOnz6RuEnT0XX127+79yPv7LynOOuvqx2y459
9tj3HpK9ebDvR916TDpp+FbZm/c+3eGd4a/F2Xdhb97c/J78Ptck2ndtkr3Z
+MK9t193sojx00b2Zlq3BncX25RuOPYm8xF988fJla9Z0jHD1vHscd46G/3C
W/+Pmzzv5K/XkTe8dX6/4RH/GXnIe+60+Y7dOv6TlUmfph2LsL5cO/SLPfcm
ZLpZ7z5V7vm5KSY3sGebbC7z+7j3cw3Hnl30ZKl6tRdWMRx7dlyNWhefXVrB
8DTZs5/1qjrxo7TShmPP5ieV++a2pGrW77VfbDWi87XFFf9f1cpj5z43tXTS
7toxPfahyPCF238uqviHbCuP/Vr56bhKC17aZvrzqZq1fryp5ynbv2McNmt/
5MDX805Ev6l3w+8jL+vXzMfyS5qUqFbgTGTVw01fuvzbyk/ulHAu58N0d06F
2V9cWprrgnc+lvBev8FF3KvzZlwaub+K4Y/UK9Bk5IoE9815bT9qVbGi4a/2
O79xXvE4d9KxmyP9+5Q2ucq63Hbxfandjsbk8Jtaf0dta3jlqo67otXvOLvw
pdv+sXGOvGMdf8LXAyNxl/4bL1HTT3739bHoB54eetr0sdWVP2ucXzPdndzo
iYeKbUoyveKzF+4snDAhxa2z7tHvJ50t5N4hfNn3t8+oubeQ+42nLxe0cfvV
0bGjxne9GH3Z04svmrzq+mbi+m3JGW6/tp+9Nr9RNePh1/bJN27rlOaeOjhz
c6u7Y/370qDXusaVSrL4TPBxC4ZezO1WwM1RvBn4vYfOtRjd7l+L96P+BgUa
fn3LLccjW6Z9U/T3UxsijJNCsscfqbl+eedBF6x/41+7+okC316MfHDSua5q
mfOReZEmx2+ZmR+96p479+Vcdy6S3Oiav+c2OBlZlb7lf3/euTaKHMDeGJrY
dvG/3X4zecK52ieSJsw5sfSY4RXwA7819ZFZjS4aniw/8OjCd5eeu7aQyZln
5Qd+fnWXgcNfSzFc88X5ann9g40qxeRMT/mBXzxwILlm1ndWP/kWMl+vP6lh
xf2Gc56ry6pJ6WsHnTZ8pPy6paff2fe6kwWsfs5zFXio04qKs5NMTlp8whX3
1TjbI9UJ1l/N6Xe6wZL9w4s7QXle06lVs9H4SWcznO7Ct8m/uqb7FZWfm3o4
evV7y5vV6FrYHZnz8J4v7y7krhXedv3iLW2mxbvlFvdrfMPzBQxfVXnQ0d27
zkVvXbQh+YvrLtg43PtO/N6LnyS7Q96cXn37oMo238/+fPGVnEMF3awObY5s
u7ac4dlZJ1q/0+9stM7Im0ZcerOkm/L1Y20vHf8j2vPc+89UvTPO+XH82dat
5yQ5u64alDa/+yHDt2w9eeDhMwWcZ5r+csuJD/dEa+xtmt7urjhnTP3kczO6
Jjpdh3/7RubITAf8scEbRrXIq+3cfP+bJZ/rss7Kv3C8aOdXShZ1zn71wf77
Om2PgE9r8WbqxEWZzqaGc75re/0xw0dfGtH/mYFlnOnfLng24csLhg9aPObn
DvUqOZGPulfYOaKQvffrxauzSj+e7dTp0fv5BTemGF4r95dlr7St6mRVfei3
MReKGf7RK78+dbxmDSfuxDcVm23LMLzEvvXVuifUdl6aVHHmynNz7b2Ntw+7
t/7edGfr73fN21v2H8MrTnzrhyITspy8k1+XrXXu30hN4UndR1XY1768s+p/
9/V/5OsCVv+ZkT9d0z2hijMvrufPrR9KMnzA8Z8Pr9mV43z0Y98rqmenGr6n
w9qJLfKqOdf/OP/GF/sVN/zu+evazhxb07m5S/ad7bb+Yu89XOSNK/e1z3DS
r7wlZ3SLjZH71Y8J18bv/OZ8hhOd3Lnk4l8PW/u3rHn73cUppZ0ymTuGbc/L
j9Dv+YWSrxn9VWmnccdvVo3ddNbKLx45+uSERRWcI+P+ajWq1nkrv2N50YkD
HqzovDqg2w3Vs+OtnR1rrZ7ZIq+K03PE0y/nro53aE/PpcmXpqRnOw836PVp
wa3JVn71m2s6zRyb67RpN2jPpaGFHRuH1Yp8kXEw1+l04oGEnSPSrHzLQ2tT
Sj9e3WlS8sXrt19VzMrfOiz1viHLqzufdP7myy45sf79pu36715pW8tJP3ht
u84DM6z84n+KFTs8uZZT458xGxus+s3GbeKolFmlmhd2nN3bd9z07BabF80u
nj/37Zspzr2R9vc3O53p7P3pqqHdLpe/veojU/rm1HEKTGv3b5eWMfzE8Ieb
vdWvtjN9Tq+/B+9eGgHPr+YOGfZ1cWft03WeTe1w0PBt/yzZdf9DpZwfFlV6
/oexZwxfMnulE8mu4Kz6ZEzF74YWtPq3NO1z+1v9qjhf937/hXevSjb81vcf
iDt3U67zUc2JOx/JT3X2Cf/x7ENz+uZUd65/6o5KU9cXt/JNuwzotuliTefp
B95a/emh9+17R+6Kq3tLlXTn7JNJdxX//nvjJ79DsSLH89Ocbh9/fkdc0b02
HgZ9kvB21S0lnX3l291ZpOefNn569B/+V4d6JZ3ETbv+nv/4KSvfp3fK4bgR
5Zw2Y758MK/SSSvftv7IG+rvLescvuLJDfPz46y/ZoxJqn54cmUnPbXruwtu
jLP+HX9m1bpX2lZ2NuU/03jUtEQbb+VPFd7c+YUc59wvPU6OuZBg5TM6/zz0
eM0cx/3qhTH9uxa18qM6Fn1t5T3VnL2j+tz5yNdFrPxreb807J5QzWn/fctn
p6QUd3qofKEFaU2bXlnT2Vdr/rZP56Vb+XMV1u1es6uGM6u3W6rzhuVR+D/z
xnOTrvwy1blwNPu7u/busv7tNWxx/VMjSji/XixbYfeu44a3bb38nV9vLOvM
ejn3t3FtL0Wop0Xa6vzZFy7Lw4Sxa6p3TbD+Hd23b43rt2U7tVZ8WDe+ZBHr
3+RVD26ZO6+q8+YNt990pFe64S/U7j+s0sgaTv+z62f+0m5/FHlS/peE1i1e
inf69bj41/Qy+6KUf6/3EyMPVkpwnlk0+fCpGUei8Q/e16t39n/7U/3b//rw
ZV7/uu2FOwsuM//VNbu/e3rMA8cihwtN+71gl4Pm78rsu6Rp680XIrcm/1bv
2w/PWPkTp/aeGzK5kFPspuNPf/NyQfNr/bbgQOcu96Q45wqf3jzq6mTDe15z
+rdyyZe/Z/X5pgOOpZq/a9tHZ996/c8MZ9/yuNVTNhS38m0LXPjfvwtLmv2F
/3lWp27PXD29iNs3Y3DlLZ3+iFL+40eX7nzqyPZI0doVcw/dlmn1PN6z7HuR
5qWcKacLTOl8baa9t0jDiyU/r1PKKZjgfa/VM6fBf/7BbyK1fX+g+QlLjxu2
6+0VOyInvP9fbjxsm1V74LaPjkVqev8f421OgyubjUy9GPnn11vrX/w1xtvi
zpXOf/JDIed37+9ivH1WMbfL4CdSnFUD6m+Zd1eytXP1IyW6flYy3fnSqy/N
yjvrstLKHc1wbjtbvk2T3cWt/PxGZRYOW13S6eT3r7V/l9eOfyJ3+7xZO1d4
7zsdiSt289rscicMb+vVW8DZMKbdO1uHXTK82Q9VZhd/P8m5M7VujVbPJVh7
coZUK3rotlTHWdtwWE7DmJ/ztUklm/R8qbgzemW5JwY/EfNzni1Yeu+vXUs4
v0iPeqHDlKUbS26IPn31T61Obzxq/hz8TjNGflyr7sL8KHrXvO+eXP9DnanR
qcVWpv3R8Yjhmxa/2Dxh0tZI2aPDf73qmr+tHvxRz09o+u6naXujvDduzvbJ
kwb+Ffnl9WjbWvv/tHoeXeDVHyn09cgGJU8eMvzaPrfce7neSL26wx7t+tpu
88MMH9Rp+s5qByLDHh5w/Fx0S/Qnlf9x4QMdpq6/bCeUerL8Dc8XMX2vTF7S
rJFPZbrVB39+X/9J1U2fLOm3J3po/M+ne809Ye899cFjDeo8ftluvvjL9PXD
/zU988PKG0t9deFQ9OXxr3RtNbOY1dPeb2f0h1se2PdTj5NWfoLfzujLt6yo
tvOaNPPH2j5Dszun3FvoX3vvRZ/PaKt/ejft+lrMz4afsOLxyds+fP+4lW/v
92Pk+zZLPk+Y9I+Vx0/Yt1uLk0OWHoj+qvJ/+98VWffWk79N6L3D6jncc/7j
kxdmuD1+WHR1y74pZn+teHRTtya7M923f/romZGpNcxurSh7f8zIrlfOeKmw
iz7fsPG8Dw/cXtydOty9/42zMf8t9n7F+l1euXp6ortB5V/8tNfmc/uLuk1q
L/yqfKVEK4+9f3u9LjN/a7nR2rnx3qdHJtU6FTmV1K/CvtNrbVzt8vHolvvW
3d2y71kr/9SCzwdc7r9I30lnl07svTq6Tnibe/tMaXY63XXnPdZv86Rkl3pm
/7vy73evKure0uGRvAeWJRi+tPHSYd8NTXQ3Hetf9Pz+gtbv2x51a/z+U5zb
feRDXd4uFmf26ft9Slf4plymO7VW9NdRN1Z3u6i//X2gTLfV103LplxVxMq/
4o+rSLNo0kMdVq6y8bHe99tHHpw8qu9jT/1h/bjQt4Mi45LfeHJRnfnW7/iF
Trf7dMOt03+08mNPzUj7b543nv3Q2KuuOW3l8VMVnj+t+dO3nzHejif2fe2B
ZcXcw52jb64fHvMP40fa2u3ee4+VTDYeCl9/f/W3i6W4A8/mbe81t5CVx7/U
81Knz15unmDlK73Ydfl/9l6h97+rfXpjASuP3+nIhLsvZN1X0Ph/cNBXaz6/
bO+Vf/iRf0ucvGDtJ4/DiYGzP2iXdCnKOEx8u++gI70y3Gf3Pn79f+3ivdn3
rB4XX7KYm/DKo2MqN459F3EFM9bcs/Hn1fEuvL27u9vT/5WLrvw+/ovrYvsL
ynPhNurfsWq3o3E2/qdW6lLqP3v1xr4L2rfsG9t3IK7ghVIz9++pfd54fsEf
n9FpqQNumlbmnOFv+v0VeWNTYk7iZXkA3tXnIVK548RSSy/LY+ZpC38/N9LG
268+bf6xDukb5qxILO6WfXDCypyGVW1eL7z3kwLz7yrqTkn+sMz8u7IN3/TB
xEnbPkp0u7dtsP6dUxUNP7j5/ZaX/o5zn36zzuPzIjH/TIFanv8tOnxF9cxt
wzIN7+T7t6PXFbmx94VPihhe8UHPTx4Z8EqLqTc2iTP8/BrPPxzpdvGncZHs
P+272vn+n0h+6U59Phyz374rreXGYYOfyHA3eO2N+RsbRT+dm9OwmHvfVeOP
9lsS8zvdcv7jO1o9V9jd731HZcO7eeXi3QPe/nxsf/ygv1+v78syPPhMNzzp
FS8eIHq3990Jhrf24wciid7/n7C/7+vHG0Qcj48fzE+1z/f/R79asrB39V8L
mv+Tfag7vN9xtq595fvbI0+d2/DB4rcOmX+Y/an8O8fPuSnpL8PZ56pWpXm/
SIXLcvftk12nj/vT/F0ztO9OefZzWnS9smjP3on23nf9fY3o+Nd+XFZwWLK1
k32en+d0HNfp6Elbr5/1900i78Q/kTqu8VlrD/ssQzo/9G+Xaz8zPx7xqLd+
XC6n9sJq7pWqZ2eTUjfEfV7cPXDmhzPbt8T8yewbjn64bOsnbq9qcnXdzJq1
qn6a6j417vubB1yI+ZPZT6yQVvrDxCez7bvq+X7jyK5yd/QqXXOXtWeq9vX6
Lnr9ttFf/G04+1TDeq/pM2TpvxHTN3z/UmRJ5pfHrh163Mqzv5b8WKXeqfvT
rZ1X+/7M6Lev9v5xx9ni1s4U7dNtuabM4z/szon5rxKz+t/spLv1V+ZVqfpQ
zJ9fWXG59/+W9eNtSVWsfOebqz/7zcoU9/s+3z36zYiYn7+J4nV3/Fuj2pKO
5WP+7Vezy+7ISHDfLPrIS6P7xvz/xN0cb5y77O+Ps6z+dN+/Gp1y80M5384t
ZfXs25e76ubDSW6Bpgvej8uubPWwb9vuntqbGjSqZOXP5VZ+cEDTgm7WrP7r
q75V1sqzn9v3vWpP3TWojJWv6vvzo3X/7vv4LZtKWHnigF5YXyXruaWZJoeJ
b07q06nljJdi6xRxzKMS7h559fTYekSe7uatZi3+8P0LNm5ZLxJvyOr4xO2x
72JdqLy8etvU/bH2Z0v+Ny2Uc7hBo5J2TifxwdS7lnSMc6Z9kTk+UiHZmaB9
L/CFB9Na9Oxd0LnB3+eyeTr5yL9pWU8kOq+dPVh72thM89Ne9fDasWMX1XZ+
8/cNrfxbX54fcLRWUWegv+9m+4kNyr9UqsPqTOexAy9GJnSN+bHL//7a0/Ve
KuO0fvTNS+1XX4j5sScP35zSvJIz4rlV9yVMiPmxB365otzjA7OdZ675Jbqr
fYr5gQ9n/vTTrvZVna/j9hfrmpDu9BLe+8mfn2tbr4ZTq8fB6E+7MgzfsemX
2nkptZ0e/n6fvXfhd0P67M1Pd0r7+yOGz3j+leWLpmU53T9/9aOBJWP+7THO
G9UndC3vlC274ouxi/6Pf/vF5dflpVRxkn9bXezxgUn23iZ/rjxec2+Oc+Sj
Xx9uWy/m355x/epPxi6q5gxocGBficeLW/nKU9e0T5hQ0/nE3y+w9z7t8Zhh
5xrox2d+KpbYsFGmczbzUsX7Eo8Y/928dpe2fB2Uv//tEpflQ2lnS7HXb9ub
fzZC/97u9UcF5dc5b+Xb3lHm8nys6Gy4ZeVrbevFW/vLe98fy7dD+fIpxTJ3
18523NQ1+2ruTbbyo7x+zXXI50r5kQ8VvyxPqjoz1q67KWFCmpVP9His7pDv
hPKJP2dellfVnZ9XHmifXzPWv0O88VHL9rEpP6hu1mU5X8uZ7++z2P6X39+F
7fyLtb94VpvPTqc4TbQP03VUuof3Ol763B+1Y3HX4EmdS49IfDIWdw2e9WPx
us8tjcVdg8e9mvX2XYNicdfgB1qVuzx/Y3HXhiekT0t8MhZ3Dd6tT8Zl+RCL
uwbfuKJE0u7asbhr8Na1Sn1zW1Iti6/jewt5z3Qn+6C372P8FCrx33iKnZ+l
/OE6GfM/Sstycvz13cbbgTYvH0lpXtJhPaP81iNZl+VkOWef9/8nrfwmb/yV
tXNflO+xNfXq2gsrm9wJPmPnXim/uXn6gXHv5zitZ//UNC8l0cpv8cZrjsZz
USt/y/iMy+tyNedKT579n/137+9j51gpv+hCicvrfk0n8/39z12Vl+70Vvll
3viuYeeP4PnaHyueL7shFi8NPjy3xM6/P47FS4M/ta/0NUs6xuKlwetvTPvl
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
HMzT0q+tXyTflMfacN2z6Nb12hvDP9S69blv15j85zyv4uYNR04qL7XhuvfR
fdRr71nDu2vd+lH7kuDkV9c5DcORtwfktwbXPZRRXx85YfhwrWdbtd8HHroX
1HD0+TjZAeA8r/L9tPZ7u9a/37RfBs45MOWBMxy7oHaoXt3vEvH1092GPys9
z+fjd8M576JzDoZzrmWt/j+4Lxxv52qQV+BLtP8OXkLxXtwrAU6c5QD5kZBj
1HOH/B7gj4buZQMfLHyicOQe9Sie0PBstadPKM6Hdf9K5bdHTga/N6bHgj+v
eADKL1U9Q+Q/BKd+rS8mV4O81TD5CV5E8QPIGd1P46xRfeD7pA+THx6c98rv
av5S3fsVuV56GXhEfOAPoZ600D1o5m/RuFTch813fYfr3/sZk2/EA6zz91MM
Jz/kNMkV8DPaZ/fvv4nJsWnyb9zr708ZTh4JzneYHJCePdLf7zD8B/kx/vH9
KoZzfhO/OnhV6dN+nt6YXFovObvXa+8Fw7lfQOfxDH9KerMfR3fKcN13Gz3/
ibfuG05+AOl9hl8rfdr3p+Ybrnt2oxl+/IDh9Nf30tNN3upeKF8e/2W47nOK
tvXjMWLt1P4afntwi8PU34FnaN7782G94V9pH+qY4kPAg3Ig1ezWKpq/daW3
gP8iecK9PMgr4pWXh+xZ7pngvp5gvEcBBz8r8z1D7+X+HebvgNC9acxfzr28
HIr3+0nt3BLy//Pe23WvCvPxOa0LT8heBC9ws8/v0pDegp2lfLkx/VbynXvT
TM9RP47XvKP+rVovMlQPeHv1V9gfix03iv124dlaP7hPDVz3XUXeDu1/DUnx
1y/fDvrL1p1XNa6mhuwd3rtJ7zF7WfspQ0NxjPW078N6BE4cpvLW2Hj4QOP7
WfFKOzsFxul6a4//PJbnP+fkBfEN+r2pRRDn+bf97qHvmqzv4r0XP/G/K3if
2q4WwwPxnzGcvNdVtL8AzvfOFg/gxGF/FcK5j4R7rOhH9JPRoXGFfJgeGifo
GwtD44FzllND8g2c/X+T25ovfeTHYx1n/7SE9ivN3lF57tXiu74R/l1ovvdV
PeO03wd+d+j+KeTAV6qHexKZ1w+qfHX5qWx9Eb5AfFMP98Js171L1AOerXoY
D/eE7lFCL+L+Eu5Rgmf0VfbZzY7W+s5+Ijj2xZGQHY1d8EzIXkafLxyyl9HD
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
7BYWjnybPXDtyZF3XbR7jfmurfpd+Y6c91rNzrf6y+U/9G323P1R6kHu/dn7
4OFWtQtZ/RbPk7MiddRdJ6we8Kun1n6h1ewUF9zsixoVq+feVcqtJNzyoDww
9lzxWVXtfkzbr9G93uDw3Er3d4PDZ5Lum36h1r5mL+47ZOMzbu2GBoNf6Buh
PeD3djlw3YBpZw3ne6dfMzopY1bl0D25c/Ju1T254PTXdt1zCk77n51aOml3
7RzDaX/Lp+MqLXhpWyR4X+rx6KLJla9Z0jHDvpf6R+r+0LrqJ3hbprhZ8nfz
3h7K423rfeB5hfLG/mH7Zce0PjVU+8CvVn/K/xyL+1U+cO3PxOJ+lR/b/MKB
Zw2XdQG8kuzKgZL/4LW0jt+qfgKvIz2NPFjw4+9r1NE+VTHDKymvmvz2hstv
b7+DzxyX84Lg4wLnlY8anif/72jJMcPFr347wfqPa/8nw+JUB2lfWOuL4Una
F9Y+ieHkDda+iuHoLVHppeBHZZ8mK34cfFgRX88nPxZ4D+VR3yz/FniC8ooQ
Pw5+WPnldF9BLI5U+7zaxzGcfV7t+xj+nOKclZ/UcPx4H8tfDT5e9sko2Zfg
C/T9FaVPgSfq+7X/ZfuMfD/5vcA3B/zOqYajd+MvRe6x/6t9OsPJ86N9PcN1
b4j2jWPxotsUZ1tBegK4n2fud9MTwDfJP89+Nfgs+eG1H2q48oGYnmDlg3mq
DSfemPN/yMPGmi/RUDwn5+DYbzR7SuvaTNmv4DO1z8I6xLON/I3kdaP8NP2e
IX0WfLp+R0NxjPzWe53gexPt/o1gO4s60VD8Ib+Rt7b/KH/aQs17cORaME/x
8ZheLLnK7yOKo0augnNft/m7hZN/i/1t9Hnifvg7cPwG5AMGnyt7gHu7wf3v
3pM3NWSfzsDeD+136Dyj+Iztd2g8mP8o+MxxkIfMK2sf+WuEsy//vOQhOP60
0ZKH4NzDcofkFLjyPOgehSNmRyvvlrNZ8gBceekd5AG48nrZ7+CzhslD5Af7
7MhDcPbZkYfg+PuQh+D404vIb23xZqE4ePBG8odMlPwE13lbZ6TkJzh+wgqS
nxZXJj8h8hNccp54A8N1T4T9Dj6vIJ7B9o9+0DhTPJLhYzWekJPg7McrvsIN
7jdlOPlB/7n5W5pIroH7+k4FzY/5Fm+m9dQhbsjiwRTXhxwG13qtv4vFp2l9
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
z8zzoB8gNg//H3QJxFw=
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1: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
4hp7gJ/qZk11bXXsdbrsCF66kW/oxvo7Gkb9Dsj5qL+lG/v8l8i+fr/Uj1+E
L9jnafVz+byngBdopo17z8KUPes22qq0Wb2FLKjrUg5qZC93jXKt2pJ5vzN1
q9LmcK53r8/LMx4Gvsf30Mne7DruGr4h9ftRfxX1//H7r2b2iP2a2RPlN60i
vOUZ2q7LN7Kb40P/+zTDEyagbMSx/am/mn6aRd6l7+o75AeUJ30OrruHei/t
BvF7YuefNg76OhP5NnKrZjiG6+TlzfipXNN9b86J/9TNKAc4dzrRw55uZl3e
mvrjkXd2oqs7x/rV88QxbiCnpfgh3EPbcYuM9Q/giYuMtc+4dzNj77jP0ss8
fa3MOKxVj8W+9bM7HvoutPG7Lh/Si9/j6TL+J/1R7jXqycvW+/ShtNm4mT71
C2kv/6cbP9wG9bzag9/XIp/qZG6uWc//RTh3YuSkvejS2ubv5tiivazZk/Wi
x6rParPyXfpOfc5ejX236urL1Hv2rUXs/Vcjb6Zs14xNzPm4Rj0n9Z8Nqcfi
gF7sRpdz/wd6H8578GzNrHffNbKmil33DkYeQvm2kTXGNWGaZtZU1ynXqCmK
yBV53hu68SONRl7ejf1NO9xZtD2wOWYYG1/U65p6vvuG2CGWI8kZBhcZn33q
MXLPcS11X1mRY1OA35TvFBnfR8CL1vN+onqcHe/x6+/AeueonEd+shzy+W7m
fhs8aZHjP1O3SH1dj73cTX+dIj4Z/aq70u7+bnTba7WX9uIr1Gf4CvVHUX9r
J3ZK7dhPg/dvZj11LZ2pl2/nnTIcyTVPLqQNVbv0M534EdznPyrjz3WfXLQM
v9Ku4/MvVYSTuB9908z67touH/iwGS73UTOcUj75cjNjLQfQvuradid9Hs91
XwV/pw2Ovs7jeP8ic9E5eQNttqFu9mbmrn4Qr/Mx9RP3sv9M1Iv91nX0PuqH
9bKO7oKcUP25kfb6ROQyH5ax+95M/XNcd7UiNsXVkUu0Ymscze+VijzvykX2
pCPr53Svdu9zD5SDuH+5p11RxOY03P5asVF9S/2Mvey9vvMj6rE4qx5vx/1V
5OKt2MY+a+a7uql+h/qRvTc5mXZrfT3P1txA3uH3UlI/DnI97Thc+0LfV5E9
RJv2mHfdDO91vAe1Yiv9uJk15dZ6nBZrxQ70CXgezr/E84twWfnfMpR5e+EU
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
175lnkuf7wRl4rL0KRtDdb3zo0qMpO9qs07ejfNfG5/xUVdzbFvkCt3Y6C7p
JPZB3f90uSt4mkbigk4uYoc4CblnN8/4lgSqTPyVcURyE2N/XF+0nRir4rdq
rNSVnLMV8scicVwv9fLd9WizF3KfTmLVXO+M4V1WzkLdOGXioPSPGxv4LHg0
9eOWiXd6v9YttJ1pN/uhyP7+ci86pTYy7WP/FokN0x83YZnYNv3g65SJIdRn
fXiZ+E/94K6NT3H+OkXiCpzXh1exB2gXGEG7dYvomCO5n73LxG0a97tgbc/W
bnB2mVhQ/X1nlIkj1ad8Zpm4UH15Z5WJIzV+QL31AZ7zBHXWMrGmc9e6quuO
OorxJNpE3wNvUCY2Ut+6uvCftOlUsbc6pvrWjY/4jfrzi+g/rlvqzEPLxG0a
G/YvuJIz0McmZWy86tObgvdtJI5xB7/hRmKe1fvfAf/WiT6p3db3dVqZ2FH9
6QeVsV3ofz+4zH6qX/6EMjGW+vcPLGOD0o9/QJlvUP+78avagF03tEc7Z43V
1B6tXfo48JLwosk74RUnlYnVNDZgnzL7oLEKF5SxRRizdH4ZG76xTOeVib81
funcMvPKGKpzqsThadP4vAgPv0QbDuX2RuIiRhfhbJdSd3KZWFPjE9TT9W2o
q19YxqdgPJV6n34UdT/j/+R+l5XRfV9t1vbbek3cs4h+K2/RR++aoW3KvePS
IuvuL93Eqw2q7TljYubqOeec1L7tfq8dSnvUGDtdK/kTi9dz2rFyTzG2yTga
9wn38cXqvVyfzCKtzHP39MX/PzuVdmD3D9e0Jep1bUCtq7uG3eE+3Uo8qHF4
S7WyF+ovc22Qg2xd2yG8j2262UP0Ucs3tVG7TporoQ1LO7N2i23rc+SJcmHX
Sf0469W+HP3a69Y28zWL8NH9av45tOag2g8/4Hp9+8QHvU5t0/aYPly5q7xC
/bvok5hUdSP1JbmBOnq3T2Ka1bHUidRb1UnVA4fWPHnD+p43rN+tXF77jfac
bhEb8WRF4jJ2Yh6/6vpaxPexe83HtBGO3Sf81xgo46+MTdygfgfaOtQf1UW9
zkb1tdyf9TXLE5Yu4mNyXrl3D6n3b2MN1Ofv6oZLGF9W1FxiU9qMLPJNb9PK
PS1S64DqgtvUY+G1Nqmi2xurLAcxXsz4Mf3p+qMXKqJHbt6KLnl3EWx88sj6
WubAGMOiPqteqw1cf0m/IrqA+on63/JV9E7jER5Tt+Lc+4vMiW3rNUgfq/YL
bZn6kdXxtI9uW9u+vGf781x1HmMV1HkH1jrHDq3kXOhHVofUPr17K8esl5cZ
1+b70p6v72eSIrkHW9fzWc7m2vUk8vh24t6Mebu9/i78PuR6u9d9yv0epW6B
PtGbfH/aZO6q39Xd9XtSn9KWqo72Em026oUb6idzP9Anor6tXVA/iHqr+qs+
C+1H2u/1O+xfzz3vRR1QG6A6gLqA96Fu6Fwbu77+LvXYXV4kxvbKIr5jbVDa
ouS0+uneZ007vRe9Q3x/PUbqcY8XyS94iG965l5yboxx2qF+t+aFOb7aHjp9
Euek/cYY4wG1z0jfkbG3l7fiqzN/6/RW7BHmkJ3aCk83l+jsVmwTxuVoNzoX
eSH157bC48yzObMVW8mx7cTyGsdr7I62wLN7iZkd3orv0zjcq1uJvzAf7qpW
7N3GcumvuQR5aTsx0HIgbSDaH4b0kn+gHUu/aNWLj9FYLH2T+suMo9IGckE9
pttViT8YJHemz8ta4TjGRWn/O7OX3LuTW9lDzgef2Mo70ib3TjN+I59Ne9CY
mJUqelh/15MibYwJ8d1p05E7aa97oxmb3eYce6WZ2Iyvy9hItM1sW6SN8T/G
TbzVTCyFNiRtSZvL/YrUG6/i/qTfQZ5vvJTrnvFpA2s+rW/TuPLjW7Ffz97L
OxmOvL+dWGp9s8aT6dO8vJcYMv2tV/SyV+m/UE90f9Kfoi5mLJr+vCt7ibHT
PzfC+VO/f8fhsnbiquWpV/diP+jbS9yOMQzm3xlPN4x2rxeJeb+Itm8gT2on
l8w8suPAO7YTP2F8tzZVbav6aPXVarMyZk5f3FW9+JG1O49XxBeo38/4P3MT
r2yFtxqjp96q/mp+gd/7JkVsvPLAv7vxCerTly/e102OlzZh4+vN13uym1gC
7eTay41nN0/w6W74njbFXp/EAF7RCmc39nxEK1z+mF5iq41X/7cb37D3rE//
KO+pih9Z/69z1dgM7Xva+W7q5bku6kUPVfdUBzX2Vtvi7XLcdnL8jE+5pJ24
dmPaj2kn389cv+Ht5J3K4y9vJz9T3/LF7eRtyvu1UxnjfFuReB3jdrS5/dbN
OqO98adu7J/uKeZS+Cw+k/mT5lHql9msnvPOfXmwfFh/h/5l7Xja8/RDadPQ
trFN/S34TfzYja3VveDOWifR7/G/+lvwmxhWf3d+f/+rYvM1f22/bmxT2qj2
bSXHVf/Th64b4BeL2D9+aCZW4wbjM5BPcN4o76GdHMDtq8RX3azttJVcPn3h
N9L+8Ebmw/et5D36Xv4qEnd0qzpFGdv788g/i8Rx3aJNpUgMlX2aJ/pyO7mi
fxeJI7pNvwB4TscUvH8ruYvuazd10qfz7dsicXdX0WbDMj7rF5E7V4nVu0N9
pUrM1l1l9hr56/5FcmyMM7ymjH3Fejntd0ViDq8us79vU3OALarYW603n819
590yvqXNwFvwzjer4j+4ssx7/al+t9pARjWSryYvNQbDPOKNy8SevKQ+Qd0r
7die3mkl51Cb0YZV/D3qBeaXTNgO9zQHZdJ2OPKfZb5T49XNCf6inbzgjbQ7
daMXbF7FPu670k5lntp+yKFV/DrqIwe1kk9rLJT5LpO1w7XVEfSXmfNrvu9b
7eT87l3FH/lAmbyeqah/Afkv96KjSHuH+TETtMMTtQtp/1u1iD2n2UpOhPzG
dyy/MVembzucdO9WcrA/biSPZ4p29JLNaluruuQZ1G/ZiG3IXPBP29n3Ny8T
h/OyNnP93ODH1D2r+Gau0A5UJb7wbn0KreQPa8t+3j2xnfh2fb3q46+oz/H7
w3byjz7mepODXyqiO6lDae8yB/3VdvLQt+nFp7dVL3qy+rL+X791Y2GNcdL3
rK9Dn8sOVeJW/Ua0ufm96je+vZ08HP1OrnnGRmjnNSdj3HZ0lD25Rgu5B/K4
Mjlfn5Xx/9teHe3UMjlin5fJw1SnVm8xTst5urV7YDfvynf2dZG4St/VumW+
9+fU41vJ4/20kZz199vJW+/HsZXlY8h9Wsmld95PUsaH+2CZ3P132snfH1LG
r/oCUsfZOO3oT70yvnjH5Y52cpn0U/1WxO/8qnyKY4PkmNoYyvj070FuU8X/
cb22jTK+cr/9rav4wK5zXhSxH5ojV7QyX52r5xb5Zs0n1b9jDKo2L/NRxmtH
L/yiG7uicRE79WK/Wr2MnVY9z7Xl5yJxwl5LP47+weG13jrGftuI/KrG2kX1
q6xRxNepf9bc2C2rxGS4RuljGt2If187sPYJ7ajmB+q7M9ZFH5A+Jm1w5ijq
n/I9aB/9u55vx9bP7jt4qZVcbteOreq5+hTth1WJaXYNNy7Ic58Bb9eLnUes
b8uYEW1w5iLqCzVmYM8q8aCOi+/F92O+jOuUevxl2iWqxKc6XuZk6md3rd6x
Ssy36/9OVWLBXf/9z4Ov2vnfg32rxHA4x06pEm/nOnxElbyPZ52DtJ2pE9vB
UVXyR9yDjqySP+IcPrpKjolz78IqOZDOq8XK5Icaw79EmfxfcwGWBW8P1qk7
R5+8R30Ng9v5LwntIEuVyUE2X+OkXvQ3be8rOXc6sWvMSZt1GonDX7JMPrL5
BYuXyQ81N0EdQD6iX+CYKnku7mtTlMk3N59oLfqcoxOfyNrt5MwbPzd5mTx0
85L8T4Vv2vlfhVVcUzuxmxzZSd6ufMnYeNdqY5wGlVlLzWs4rko8pevngVVi
L/zPCmMXjRM2Xtj/DPBZjqa/Y6vkhLqX7VclFsf/Ezik/qb8thYsk59rzsKM
ZeI9HkYe4nfRjo9tPucc8lHk8tRN14lNajnwtJ3YpPar9y9tvAPK5DibZzG/
PKCRPI4VXEs6sT1dWeuYrtXLl8lxMN9q3Xb+X0DbkHZ+1wL9pLfV3E+ONLBM
3rF5Ihd3Euejz+jnVv5rQC6+UplY0CeQy1A3dSfr7YquzZ06JqtMfrQ5F3OX
ybM2R2Np2kzZCfcwb3Xidmxmy5Sxlz5WZp0xLtb/UpinTH63OSMzgYeCH0Eu
a25NJ/Y1c08naseet0KZmNjHkbP1yfquLXeBMnnT5hMdViWH90nqJi4Tn+Oe
vqb30glf+bGV/1yQB6sDG7/rvjUZ7RZrJK/t+Cpxse6V/o+E9sELa54u9p0c
UiXPy/vZr4zddVQZPc39zXXkmyK5G/Kog6vkxPkeDqoSJ+TcWLsMX/V736dK
/Jb7y3Puze3kDptz3K8dm+Jq8qZObIzGKasH6Ds8v0q+t7b9wzj/Eb+dMvl+
xkb6TrQLqEMYu6M+7F7kmrt6O/95Meb/LuQ4ncTrnVkl1tn99+wqORLuuWvQ
ZrZO7JL6LL2+Mbrq1OZpaPubvsx/s5g/eFqVGFzfz+lVOP0n4EOr5Aw632Yp
k19vPtE69D9XJ3bO6cr894W5fvtXibvyW5u0TN69uYcHVImvcv5MU8Y/Yi6h
edWTtGOjnbbM/8OYe6hebz6l9jLtwtpzR3Bs5jI5++ZGqbObQ6Z9s7/vsZH8
uPXob55O1v/zquTV6685tEz+iM/l/+K4/sjpZi3zvwTmTJ3WSb6/dsUzquQY
O0b/Bw6v2Bw=
           "]], Polygon3DBox[CompressedData["
1:eJw1nAW0HNXShWfuTHfPBA3BPQkBQpAQLHiwJLi7BXeHQHB3d3cJ7q6Bh7s/
3B7u7vB/X3b/a+WsW7vPaZnu03Wqdu1O3813WWPnnkajcVy70eBf4/RWo/Ep
G0Y1G42Z+PsGeB/+fkRfH/6+QhvKtmH0z4ndl50WAM+BvRjt/k6jcRd/J6Hd
hj01fSs6HjwvrT/jFwbPjb0E7QzaIeAZ+LshxxzGPifz91PO91nVaFzJ9kvp
78Xf7dn+Fv1z07cNx7m822g8TN/v9K1KW4H+m8E9tB2xp2XbVbTLwBP0ZNuN
2M1WjjUN267HbtC2AU8NPhX7E/4e2sw1nQn+jL+bgfvydxz4N/6uQluebf24
joVauReL0x7C/pW/K9NG0n8Z17safyekNbGvon9f+j7mtCex7Qrw/uAvfQbg
l7EXZNuSzdzTK2iXgLs9ucYnsH/BXslrAF/OMVfn78S0FvZ9tBZjdgYfjj2W
cZeDJ+zJtqux/8HeAvs52pfgg8A/N/KbrmKftdjeLrk/vRqNU8C7s/0T+k/E
fpLto8Hng9fCnoxncDb2A9yHd7B7cbytbIzZkvY8+/zayrM4Hfth9tkFe0XO
8UfRaJzAti3q462LPY7+nepn+Tv995U5zpPge7GHcJ75ON58Plf2eYRtu3k/
6P+T8fPTPz/9C/i76b+M/vmxl6X/F/pno38p+hdk29K0D+hfspUxV2L/l7/D
Whnvtt78prM4zv3s9zb2cVzjpu7Ltul9nmWO843PArsPY86h70HGv4s9Oe1c
8EPg97BnoF0DfgL8P+xPy/HTr/EveEPwLLQ7wS+Dv8SeiXYj+BnwJ9gz0m4A
Pw3+GPtj9vf9/Qe8AXgA7S7wK+CvsGem3QR+Fvwpdn/aHeCXwF9gz0q7G/wq
+GvsQbQHwW+Df8Cek/YQ+B3wj9iz0e4Bvwb+BvuzMn6jwb3dCLwP96Tggv7m
fuyAPS3brqL7UQZ9gD2Qdj/4TfB32HPQHgC/Bf7ePo63NftfwLbdsedi2zjs
d+n/CXv/KvvvxfkGMz8Hs31IK77lUrZfzT7DsS92btA3HfuMxX4M+0Psxdh/
d/BI9p+L/V9l7CLsv1QzPmkWxi0KHoy9JG0q7BVaseeh/YW9DG1h7Jlp/8H+
2flcz8HZOvELvbiObTnfUeAPOd85nG8qznddGd/wA9uuYdv1Zd47378bwK8z
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
c8+8d+aoL+s36tz1b577JUVqeh/XHMOr/D285h7k1B+j/6RGuPZZwBuVmQMb
d8IZvUL/GY1wSdez7XH23bOV+vO1tEfBu7dSX1+wE67B/O4I7FfZdmIj9aBD
jD1pT2PvY10A+xbaM+Ax8tKdXJPXtm8r/MWctCOdS+Bzsa+jPQbeA/wvx+7L
9b3je8451uok33+S/tGt1LOG0P98kRz6JvANtCfo36uV+vaQmu9apkh9470q
3P97zcwn+XR98dPN1JPv7qSW8xX7P90Jh+e64PpwKngoeE3XCWNEc48qfXv1
BFsTsDb3dCu1gts7qZ18b06AfVcntb+P5WY6qWd77u3q93ljrvEy11KOcVkV
jnKldjg2ucs7Oqmd/Eh7FvvWTrjylznfU51whGPa4VTlDncFX18kHrwTPLBK
/rdIkfx6LvAW4MXB95qvgv8G3wW+x3y6Cr+/aJF82xqHtQ5rMitUyVFcM62B
rNENB7hpO5ym3KCc5o7tcJhyndYs1ilzz733W4Kvci2i/9oqNdCby9wza6Pb
gK8uEv/fQP9J4B/BpxsjdpMjrNwOh2HucCL4B/pP0wdjD+R53V9kTdefjPad
4NiVc7CTmq61XWOKPTqJN+WC5YT36qRmbO24Dd67Ew7buKOn7pcDlgv2mPuB
u/ok45dW+Kpdab6c/3DMHbH7M379MjUZazPms7/U/m/lKk1bn2is24/x77pu
cpi1wat2wr16zN2wB9F/VBkft20nNYVP2+GwrTWcDf6lnZzB3OEc8Irt5IBf
1jXfW8rMKWvBcrCntVPDkpuVkz+yHY52xvp5H1rm+p6s/etf2H82c/5Vq9jW
gHbuJCc3N/+r9r/Hs/+DReKrV6rUtKzdPdhKrWvKKvzzoCL8t/mk/PTAIvz6
72X4/kmL1DOm7ib+0ofqS1fj7wPgL2lvM2aEfEkz79Ol4JVrX/s57U3wVN3E
d/p0fft6jJ+jmfl4Jf1Lsv068G+ucUV8lL7q5ZovnMicrRmfrm9fnP6dwHeA
W73qNdW1nft7vr/PnKSZNcO1o+W9B+9Ne459puiGq3ANcS1xjpwDHlBm7pxb
hMeVU5BbuLZMHX37nvANzpFxNRfg3HmijG9Sg2O9c1Xa/fIjdbyqT/V+ed/0
tep45CLH0F7iXGfTvx/Xfz77n4U9Kf270rcg7e52fKi+VG7GtVoeVT51d1of
7Ec4RqeZGGoG+/h9XeMJ18Re8fH6+q3lhDnWtxxzOP39mqnBlcbU2Lv2RK8z
YZlYfsee6H32LvMsv/AdMkco8+y/aka/8xNtcez9aFPTN5r2YTOc0J5lamDW
wqyR/eE9cI03lmG/Pr3iP+UYrKks0U0NTK7OnM/czxqYtTBraH+VyQe8t/fW
c3JmYwLXGtco50uZ+aGITj3TZOBTGtFkeb+cI86V/9Z89iLd/P5ryuhBLmaf
zZuJWY1dvWfeu1frtd/nc3Ij8V9v7CsYs1UzMf74WJ/xKzcTkxibfF/kWe5C
m9j5BN62mRzDXGORTvbv0De1z4ttvZqZAx7fmqG1Q2uKf9b8k7/d92xmxi/L
31vBt9Eebie+H93MnO+h7752fPXoOt5fxpyQ37M97cpOYghjiTfK6Mv6luER
5RP7lclP92xG4yLH7/txAvY/HPMe7OU5/sHgg4zpyuRT8pTylTOV4fFGNbKP
/Ny9jD+1kWOa705fhvs7izZLGX+gNuB62jBt7zH2lb4TjvUZYl9AmwN7UBnt
wIW0ObHnol2EfTFtbrmgMvW5S2iD5b7KcJ/n+cyw56Vdin0ZbQj2omVqM9fQ
FvPd5/5cjb0I9gy9Mp989xai3cNvWYH+q7CH+lvoX6UTf7YEeMZe8Sv6l3Np
s5bJd6xf3EBbqszzk0c3nl0Oe3Paq81ck9e2rXMeeyxtYexvzGMb2WY96lvX
Vuy3mqknuX7d2AwXOxPn/7iINsH1UH51hDEO9p3N6LH0k/pLt40s4xf1j7fW
1+P5N2ukBmYtzHz97mbi8+Xr413cSHzu/s5B56L1vK0Zu2IZrY/7mN/vUOZa
r6UtXiZHMHfYuUzusCl/X27mGfosxfM3kvNsVibn8P5sUSYXMedx/KgyuZD3
b5lGcpgty8Tg8t3y3sbmX5un0/96M/VEz+v5zR/GyakU4c7l0Deur1ftiDU7
a3dbldnXOblAjddopEZprVLO/PAyMYexx7Kd/Bav0Wu15mrt1TW4W0WzKT9i
vqmeUn2V/IQ8xfy9op/zWVn/sh4qX+96oCZPbV63jFZLrZNaNvlx16o9aA+4
L8fZDHtez1+EL1EfslWR+rg5sPyNPI65sePV8cgRyRUZMxs7P1omN5ZPV8/m
mujaqL/8uJH4xjhngjJ6OzV0aunUcFpbnbUdbedLZbj5f/A5H2G/WEYbOjH9
H2K/UKYW1QK/X6ZmJPczZTu1JGtY1j5nb6e2pZ7UtchzeC7XL7VSasXUyvXj
+hdpJmY1dnV9UPtkzn9j7Y/VXRkP31z7c3VXcgo3gfuz/6LNxMTGxgt3sj74
W43tRlXRG21URG/zLdsnAldF6vny6eoxehWp17um9QNPVWSt+6mM3mKCIvX6
r72H8mNF9CXf+Jtc9ovoIxbrZP3wWo3l5ffVq0xSRE9yVxldl5reO8usuepV
ehdZi11D1FtMVmRtcU1Vf9CnyFo7tsy7O8jaVJk56to7U5G526myFs1YRL8g
v/qwsTD4rJofNXfbs4jea7MquczGRfRp5tKfgWflN3yE/UERPmsA7cMifKq5
6L5F9FmHVInN9yui75HvHwievoie4o4yWjE1yrdjV1VijRmK6CHke9WfHVpE
b2JMbi7TUyRWN8ZVu+MxjX0vLaNdnIptb5fJOY3vjPPMTeUDrLVac/28zq/W
b+ceLtbNM1ab0beRZ79cJ75cn6Xv8hmrzXAO+OzNmdUGbttILq0GTy2ec2pk
FU5WbYacq1ytMbvaFTlZY3k1b2rfxoCHV9G8qX1TE7dslfzOmoWakMW7mZNq
TZwDzlXnlNob54hzzXuqtsOaivfaZ6xWRY7YZ+89VWtizuC9ds6pZZq9kblo
zWvVOl/0XptvW2NSc7RoN5ojtUfOebXKznG1VOYczn1zELU+IxvJTdQgqUXy
HVKbrQZJLZJz/qsyGidr3b1rfkaOWq2KnITctRy1tWBrNHLXZ5TJTc0nzSvN
qcyn1CaZ61n3tP75YzP6uPOL2PJpcq3bd1L/tA5qva/dTT57JHiOXsmB5daO
KJMbm9OY28iHqXc03lY7KEdhzGlMbWztnLsEfEEZrbU+8gp9XZHjmbPKtboG
uBYMbUcro4/X1+9e++j9ymjfrVmOqbG11vH6+/r3qGtQ36AW0BzbXPzkMrn3
aWVqu2rGTy+zfsvN65MvrP2xtXxznFVrf6y2wJjf2N86krm7+b55v9dvbVUO
8DznVyd91hnUb8opPQV+swzXJKd6BPitMlyr90NdtzVq9efmNOY2h3DMLaus
kTcW0SQfU/MB1rKNgczf5ajV7lsDkbuWw1eLb41Gbl8OWq29NR25aWssavGt
YVh72bqKntGcpd1JDcharjUKa0Ny+GrnrenI7VvDVEv3RCO1TWuUahvlzK1d
WsNUW/VYI7VNa1BqY/VR+qo3qnDvR8g3VOFI5UpvbeVbkhmqfOtgjmMuPAi8
eiM5zAKdaM7VnquJkQ9UH7NrKxyhXKF6lUt6wiHKJaqPubgnz8BnIecp9ylH
KVdpTvJrkRqxuYqcpdzlNq18SyMnLjeuz9Z3ywnKDW7byrcwcohyidu1opWf
ps6B1cyYe1hz81uGcY3U4qzRqc11TXFtsQbitwjW0KyNWBNSm31VI7Uia2xq
y62BWXuzxuW3BVc3UvuyBuW3DmMbqU1Zk1bLaQ3QWrU13k9qPkf+Rg5aLvrI
VrQ8cjRyNcbcv1Sp+fmtiGvcmJo/NseRw1+tm/hPHyJnuGY3emX1mcbov1XR
l53XE85X7teaoN+SqDm0VmgNT+2iGkZre9b4/FbEGoS1P2viaj+fbKRWbs3I
b0MeaqSWZE3Rb1H8RsVaozUxtcDGfMZ+1oBuBx/bSG3Ims9t7dTUrAVZM/Rb
GWtq1hJ36oRbU5Po9yPWRP22yJqStVJrlH6LYw3J2uWGRdYf1y9joxU7+e3m
UOZS5lDmMWNrbI5kHmA+YO7knHHuyFnLXZujmqtaQ7GWYn1F3bwxvbG9c8q5
ZQ3GWoxz0rmpD9GXWF9Q96Lm/MhO+HW/UzBnM3eTn7dOZr2s6qT+ohZLTcoG
nWiuduF4N/REi+X7ZyxtTd7afJv95yuTP/7g/a5yrMVos3Ty/dYOrdSgrEXJ
UZgDW++Vuzijnn9P1e+/MdQ37dSsnf+n1v7hnnq+vQ6+sh3NwEZVaqBX1eu9
tdGLaCOaiamsFXo9ZzbC0QzopKZkbencVrRnchQPF6kxyF3IycgZWB+Uq3mz
Su3CGNhYWP8kN2xMbWwtxyjXKF/yZ5Xx1gqPbKTe8T5thmY4MLmw3rTDenJP
vbdq+Kz7Wf/zW0Pv4WV1/jsc/HOV3N98a2QnOfZCZWokPr9VqnAFfh+pvt+c
9/UiHK658CJVcnlrbuqDfYY+S32ivlENvfzpdfX8s6ZkLm5OPGEnNRlrM9f3
5PqsKY6vLfbEl15RpXZgjq/+/64qXLw5n7nf1J1wQ3I8+k/rX373dzlthP6w
Ey7ImH7RTupT8nLyc1P4fDqx+5sDYX/A8WdshoOUi/ywijapL60P+IEqtQnv
n7HnTVVqBXIm4/VgnXCN1oCsBVkTtTbqGuBaYL1J3b8clvOhXefM1uxGdLPe
yP1Yw7CW4TP32ZsTDe2EP/Fd952Xm1i+m/zZd9x3fXgdD3uNP9b+QV+gj9U/
juyGb9BH6CvkVXxXzbHlf/weUW5y4zre93tDuUtzXPUMzhHnypq1v5aH87dY
YzS/N1+2tu965ro2SRmtr/U7+blpymg5nfPymc5H+QLvgffC7y/0Vfp0+Xc5
Mrkyc2Dr2/JRclPWY63LyknJTQ1ohK+SX7MWbr3EuokcmVyZOaf6APkquSvr
q9ZZ5azkruRA5LOsgerbdyzCb89fZi7JechfOX/9HnGHIvy2+jxjIXNm+Vg5
J7kn33f5YjkwuTBrzvJT5u9qI9Q4/VbkfsjtGk8YV/zVSX3+rHb0NX92ok84
sx09T083ep4LwM9ht7rR51wIft78sRt9zuXgV+Wqu9HzXAF+DbtXN/offZy+
7o9O6mdntKM/+rsTPcDZ7eh/ym70SZeCX8auutEXXQZ+Bbvo5vvCS8AvYU9V
hnvXh5nT/9OJXuucdvRGFm6258954Gewv6/Ch3xV1xvkK+U65dTk1qYsU1uQ
Y/2hnk9yvXK4/xSpQcs/b1rXL4xZ5Y83qfn5iTnH0Y2swa7FzW70WeeDn8X+
t5Pc0BxRfdgE3eR6+nx9/yTdrN2u6a7tk3aztrvmu/afVsdT4+r4TP5TLlKO
S67L73/lyjet+QI1en4rowZF7Z6aFr+VUbOi1kUNjd9+qJlSW2MOZlmiXSQ3
+wT8eSM5vvmx/tF7xc8YX1/VP/pu6JOsV+qfvBZ9qPVMNTV+66ImRq2NNVpr
S/pQfen9VbSIclZ+7+s3GOoS3fZ1lRqstVg5NL9P9OK+rtdTtSnWDK0d3twT
7XuvuqZifcDa02tVfIE1lb+rYLnBgxup7/s8D22k5tDTieZdXlx+XP2HNTx9
z1+1f/N5m6tYw/ImqNlxfX+pkfXZGr21emPCM2r/7bvvGmJ9WX2B3+5Z0/mn
yhx0Ls5bx/9y5nLndI3n363xWlv7zvtdpb7+eJn42HjyqSK5jDmN31T9t8rc
dc3vU2snvFav2W+8nijyW/3NftP1ehX+3hjGWMb1X72Vuitrj2t1Uz/Qt5n/
3l1krRjVyDdsxtjG2qcWqZ0O60ZPeEQ79fDbi8RWq9fbluxGb7pPO/pHa9TW
ql0zXTs/rXIvvafGTj5/9arWlKwtWb9Sh24M8mZdv1Kn7hpq/XK5buaG+/ts
9A/GOuYn1ueMgYyF/M3mf8Zsxm6+0z7/mTqpBfhO+3y9/zM2wgltWV+vvlQO
Ri7G+ezaIyciNzK8G/7WtchcS39ibKXe4rma83qvzofkwobWNUc1Fut0ogHe
teZj5EvUmPqt37BGtKdqNP02z3uodlON8S41v6P2WI2mz8Xno75IzbHfHqqZ
VYvsPffem3Ma7+ojz6n5KrWat9d8zfKN8CtqStXWq0lVa6qmU+27mlW1nvpw
fblrhtpS1wzXDtcUtaGuKa4t+ni1nGpK/bZRja5aUzWeau3VWKj9VFOq1l4N
hVpTNc/Daj5ILbQavDfa+UZdbZ6a2H3b0WCrlVUzPaodTbRaajXZO7WjqVar
rWbjqHY0tWo51MjKcbimrN3NnHWeOl+Nh6zJvVUkX7NWJ+f8bJGc3nhZDbff
eqpBVtvtem7txBr5RJ1onqytWHOfuBPO+cUiMbXx98l1fmh+Zj6n3mNcnS+u
0M35rQ063yfpRGPst1gjG9EeqyH0Wwc1wWoLXYNdi12D16uioZbPG9gI/6em
228TrMeq9VaDK78pfymXrYba//tDzbXaatdY11rX5DWqaK791mb2RrTYapb9
lkPNsFpm1zjXOmOGEVViBmMHY4blq8QMxg5qiFesopHx2xR9xhz185B7k4NT
W2IMYSxhDLFBFc2238739f2sooGXn5Q/lK9UI+639zM3oh1Xs+23JPKFarnV
HPqth5pttYhqsv22d0QjWm011X7LO7wRrbWaRb9NUcOtllFNtt/OqOFXq61m
UT5SflK+1xjGWMYYRG2zmnrr39bD1dobgxiLGBMsUyWmMbYxhlqnimbdb4XU
qKtlNwYyFjIGWquKBslvfdSgq00yhjCW2K4R7bn5krVCa34TdKL59tsTOdD/
18eodTDHmKwTvc6pZWJM/+8HNQlqE+TcetX5mTG7OdvynfA91pbNgc2FrbHL
e8p/+n8xyPnJ/VmTtjbtN8hqWM0fN6zyDYL8rvyvfLr8wu01X2G+qz7orDJ8
pd9LWqOSB5UPPZnjr16vv2sW4WfVI51QJqb0/56Qg5SLNJ6Xq5HTlduVj/Pb
DjUCagXUxKmNk5OUm1SzoXbDmpm1MzVt31ThI63dqVH7skpNaPy32I3wIXLM
R9fzdZtONCfWiI2/V+zmm2nXWdfbNatoRtSOuF5N2sk30K7brt9rV/kG23Xa
3+hvNR66uYi/d/5Y87T2aT1zw06+qVbTK7+4fpWazPj/O6CRWo3fZHzWjobZ
bzWsyVojNX9apZtvuNUIHw5et8qaP37tdz3A/j+9LA5U
           "]], Polygon3DBox[CompressedData["
1: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
+TtR/L3o/+ZTVGk=
           "]], 
          Polygon3DBox[{{1868, 1867, 2385, 1665, 1666, 2386}, {2162, 1676, 
           1171, 1172, 1677, 2163}, {2308, 1363, 1197, 1196, 1671, 2151}}]},
         Annotation[#, "Charting`Private`Tag$16635#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwV0D0vg2EUBuBDtAwGiURikkbE1s3SxKiWTl0NEqMm2sVglUYYG8Ro4hfw
Cwi7qq/6HiSmoigq4epwv9e58yTPc/Km5or5ha6IyMumoTOv+TzzKRkxwDeO
8I9p9vdGTHKYOY5zhhOc5xSzsmSe5SoL3GKJu1zkPss85FBfxKh3j6SqrzMr
jZ6IU/2FNb7yrLMTz9nkBd95yQ9e8ZMtqZu/eM1v3vCHt2zzjr+852MiYsyb
x/Kgb3Batu14old4wGXucdDOKecrsqNnuv0nd/0DAg00wA==
       "]], Line3DBox[{1089, 2, 1507, 294, 405}], Line3DBox[{1091, 3, 1089}], 
      Line3DBox[{1093, 4, 1091}], Line3DBox[{1095, 5, 1093}], 
      Line3DBox[{406, 6, 295, 1095}], Line3DBox[{1097, 7, 394, 877}], 
      Line3DBox[{1098, 8, 238, 384, 1097}], Line3DBox[{1102, 9, 1099, 1098}], 
      Line3DBox[{1104, 10, 1102}], Line3DBox[{1106, 11, 1104}], 
      Line3DBox[{1108, 12, 1106}], Line3DBox[{1110, 13, 1108}], 
      Line3DBox[{1112, 14, 1110}], Line3DBox[{408, 15, 402, 298, 1112}], 
      Line3DBox[{1789, 30, 2026, 240, 408}], Line3DBox[{1802, 45, 1789}], 
      Line3DBox[{1815, 60, 1802}], Line3DBox[{1829, 75, 1815}], 
      Line3DBox[{1843, 90, 1829}], Line3DBox[{1858, 105, 1843}], 
      Line3DBox[{1884, 120, 1858}], Line3DBox[{316, 135, 1885, 1884}], 
      Line3DBox[{452, 150, 2084, 316}], Line3DBox[{637, 236, 1571, 406}], 
      Line3DBox[{2065, 287, 452}], Line3DBox[{2065, 643}]}, {}, 
     {GrayLevel[0.2], 
      Line3DBox[{1766, 2025, 1277, 1765, 2394, 1952, 1767, 2395, 1953, 1768, 
       2396, 1954, 1769, 2363, 2397, 1955, 2072, 2106, 2584, 2374, 2086, 
       2243}], Line3DBox[{1778, 2257, 2458, 1777, 2258, 2459, 1779, 2405, 
       1964, 1780, 2406, 1965, 1781, 2365, 2407, 1966, 2073, 2107, 2108, 2408,
        2087, 2229, 2252}], 
      Line3DBox[{1789, 1973, 2414, 1788, 1972, 2413, 1787, 1971, 2412, 1786, 
       1970, 2411, 1785, 1969, 2410, 1784, 2461, 2260, 1783, 2460, 2259, 2409,
        1782, 1968, 2115, 2140, 2139, 2596, 2141, 1967, 2173, 2097, 2244}], 
      Line3DBox[{1791, 2261, 2462, 1790, 2262, 2463, 1792, 2263, 2464, 1793, 
       2415, 1974, 1794, 2366, 2416, 1975, 2074, 2185, 2612, 2027, 2186, 
       2249}], Line3DBox[{1802, 1980, 2421, 1801, 1979, 2420, 1800, 1978, 
       2419, 1799, 1977, 2418, 1798, 2467, 2266, 1797, 2466, 2265, 1796, 2465,
        2264, 2417, 1795, 1976, 2116, 2028, 2597, 2380, 2075, 2098, 2178, 
       2239}], Line3DBox[{1804, 2267, 2468, 1803, 2268, 2469, 1805, 2269, 
       2470, 1806, 2270, 2471, 1807, 2562, 2029, 1981, 2076, 2187, 2613, 2030,
        2188, 2233, 2251}], 
      Line3DBox[{1815, 1985, 2425, 1814, 1984, 2424, 1813, 1983, 2423, 1812, 
       2475, 2274, 1811, 2474, 2273, 1810, 2473, 2272, 1809, 2472, 2271, 2422,
        1808, 1982, 2117, 2031, 2598, 2381, 2077, 2099, 2179, 2196, 2255}], 
      Line3DBox[{1817, 2275, 2476, 1816, 2276, 2477, 1818, 2277, 2478, 1819, 
       2278, 2479, 1820, 2367, 2480, 2032, 1821, 2109, 2563, 2033, 2184, 
       2242}], Line3DBox[{1829, 1987, 2428, 1828, 1986, 2427, 1827, 2485, 
       2283, 1826, 2484, 2282, 1825, 2483, 2281, 1824, 2482, 2280, 1823, 2481,
        2279, 2426, 1822, 2035, 2118, 2034, 2564, 2375, 2119, 2110, 2180, 
       2236}], Line3DBox[{1831, 2284, 2486, 1830, 2285, 2487, 1832, 2286, 
       2488, 1833, 2287, 2489, 1834, 2368, 2490, 2036, 1835, 2101, 2362, 2583,
        2183, 2232, 2254}], 
      Line3DBox[{1843, 1988, 2430, 1842, 2496, 2293, 1841, 2495, 2292, 1840, 
       2494, 2291, 1839, 2493, 2290, 1838, 2492, 2289, 1837, 2491, 2288, 2429,
        1836, 2038, 2120, 2037, 2121, 2588, 2122, 2102, 2181, 2231, 2246}], 
      Line3DBox[{1845, 2294, 2497, 1844, 2295, 2498, 1846, 2296, 2499, 1847, 
       2297, 2500, 1848, 2383, 2501, 2145, 1849, 2146, 2565, 2384, 2039, 
       2241}], Line3DBox[{1858, 2507, 2303, 1857, 2506, 2302, 1856, 2505, 
       2301, 1855, 2504, 2300, 1854, 2503, 2299, 1853, 2502, 2298, 1852, 2605,
        2163, 2162, 2606, 1851, 2040, 2123, 2124, 2589, 2376, 1850, 2111, 
       2174, 2240}], 
      Line3DBox[{1862, 2431, 1989, 1860, 2432, 1990, 1864, 2433, 1991, 1866, 
       2434, 1992, 1868, 2386, 2435, 1993, 2148, 2150, 2601, 2388, 2042, 
       2238}], Line3DBox[{1884, 2519, 2314, 1882, 2518, 2313, 1880, 2517, 
       2312, 1878, 2516, 2311, 1876, 2515, 2310, 1874, 2514, 2309, 1872, 2389,
        2513, 2164, 2165, 2607, 2390, 1871, 2158, 2159, 2125, 2126, 2590, 
       2377, 1870, 2103, 2175, 2228, 2237}], 
      Line3DBox[{1887, 2315, 2520, 1886, 1371, 1888, 2442, 2002, 1889, 2443, 
       2003, 1890, 2369, 2444, 2004, 2043, 2104, 2105, 2445, 2089, 2230, 
       2253}], Line3DBox[{1899, 2318, 2521, 1898, 2319, 2522, 1900, 2320, 
       2523, 1901, 2448, 2012, 1902, 2378, 2449, 2013, 2135, 2189, 2191, 2614,
        2192, 2193, 2190, 2248}], 
      Line3DBox[{1904, 2321, 2524, 1903, 2322, 2525, 1905, 2323, 2526, 1906, 
       2324, 2527, 1907, 2615, 2194, 2014, 2195, 2616, 2134, 2015, 2144, 2600,
        2058, 2156, 2160, 2161, 2127, 2591, 2059, 2169, 2325, 2573, 2128, 
       2060, 2326, 2574, 2129, 2061, 2327, 2575, 2130, 2062, 2328, 2576, 2131,
        2592, 2063, 2016, 2132, 2593, 2064, 2017, 2133, 2594, 2066, 2018, 
       2067}], Line3DBox[{1909, 2329, 2528, 1908, 2330, 2529, 1910, 2331, 
       2530, 1911, 2332, 2531, 1912, 2333, 2532, 1913, 2450, 2019, 1914, 2604,
        2154, 2157, 2155, 2168, 1915, 2609, 2171, 2166, 2170, 2167, 2608, 
       1916, 2334, 2533, 1917, 2335, 2534, 1918, 2336, 2535, 1919, 2337, 2536,
        1920, 2451, 2020, 1921, 2452, 2021, 1922}], 
      Line3DBox[{1924, 2338, 2537, 1923, 2339, 2538, 1925, 2340, 2539, 1926, 
       2341, 2540, 1927, 2342, 2541, 1928, 2343, 2542, 1929, 2453, 2022, 1930,
        2454, 2344, 2543, 1931, 2345, 2544, 1932, 2346, 2545, 1933, 2347, 
       2546, 1934, 2348, 2547, 1935, 2349, 2548, 1936, 2455, 2023, 1937}], 
      Line3DBox[{1951, 2071, 2561, 2373, 1950, 2560, 2361, 1949, 2559, 2360, 
       1948, 2558, 2359, 1947, 2557, 2358, 1946, 2556, 2357, 1945, 2555, 2356,
        2456, 1944, 2554, 2355, 1943, 2553, 2354, 1942, 2552, 2353, 1941, 
       2551, 2352, 1940, 2550, 2351, 1939, 2549, 2350, 1938, 2577, 2069, 2068,
        2070}], 
      Line3DBox[{2026, 1963, 2404, 2364, 1776, 1962, 2403, 1775, 1961, 2402, 
       1774, 1960, 2401, 1773, 1959, 2400, 1772, 1958, 2399, 1771, 2457, 2256,
        2398, 1770, 1957, 2114, 2137, 2595, 2379, 2138, 1956, 2172, 2235}], 
      Line3DBox[{2065, 2217, 2113, 2216, 2226, 2056, 2586, 2392, 2096, 2209, 
       2208, 2225, 2054, 2585, 2215, 2095, 2207, 2206, 2224, 2610, 2371, 2214,
        2094, 2205, 2204, 2582, 2223, 2053, 2213, 2093, 2203, 2571, 2391, 
       2222, 2051, 2212, 2092, 2202, 2570, 2201, 2221, 2049, 2211, 2091, 2611,
        2200, 2199, 2220, 2047, 2210, 2581, 2090, 2198, 2197, 2219, 2024, 
       2112, 2587, 2393, 2057, 2218, 2136, 2247}], 
      Line3DBox[{2084, 2011, 2085, 2055, 2572, 1897, 2010, 2083, 2447, 2372, 
       1896, 2009, 2082, 2446, 2370, 1895, 2008, 2579, 2081, 2052, 1894, 2007,
        2578, 2080, 2050, 1893, 2569, 2317, 2079, 2048, 1892, 2567, 2316, 
       2078, 2046, 2568, 1891, 2006, 2045, 2044, 2580, 2088, 2005, 2177, 2100,
        2245}], 
      Line3DBox[{2234, 2176, 1994, 2182, 2382, 2599, 2143, 2142, 2153, 1995, 
       2152, 2603, 2151, 2308, 2602, 1873, 2436, 1996, 1875, 2437, 1997, 1877,
        2438, 1998, 1879, 2439, 1999, 1881, 2440, 2000, 1883, 2441, 2001, 
       1885}], Line3DBox[{2250, 2227, 2041, 2387, 2566, 2149, 1869, 2147, 
       2512, 2385, 1867, 2511, 2307, 1865, 2510, 2306, 1863, 2509, 2305, 1859,
        2508, 2304, 1861}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1089, 1278, 2394, 1090, 2459, 1289, 1115, 2463, 1301, 1128, 
       2469, 1313, 1141, 2477, 1325, 1154, 2487, 1337, 1167, 2498, 1349, 1180,
        2509, 1360, 2432, 1192, 1371, 1205, 2522, 1379, 1214, 2525, 1384, 
       1221, 2529, 1392, 1234, 2538, 1405, 1249, 2549, 1420, 1264}], 
      Line3DBox[{1091, 1279, 2395, 1092, 1290, 2405, 1116, 2464, 1302, 1129, 
       2470, 1314, 1142, 2478, 1326, 1155, 2488, 1338, 1168, 2499, 1350, 1181,
        2510, 1361, 2433, 1193, 1372, 2442, 1206, 2523, 1380, 1215, 2526, 
       1385, 1222, 2530, 1393, 1235, 2539, 1406, 1250, 2550, 1421, 1265}], 
      Line3DBox[{1093, 1280, 2396, 1094, 1291, 2406, 1117, 1303, 2415, 1130, 
       2471, 1315, 1143, 2479, 1327, 1156, 2489, 1339, 1169, 2500, 1351, 1182,
        2511, 1362, 2434, 1194, 1373, 2443, 1207, 1381, 2448, 1216, 2527, 
       1386, 1223, 2531, 1394, 1236, 2540, 1407, 1251, 2551, 1422, 1266}], 
      Line3DBox[{1095, 1442, 1443, 2397, 1096, 1448, 1449, 2407, 1118, 1452, 
       1453, 2416, 1131, 1456, 2562, 1457, 1144, 2480, 1460, 1461, 1157, 2490,
        1464, 1465, 1170, 2501, 1660, 1661, 1183, 2512, 1665, 1666, 2435, 
       1195, 1470, 1471, 2444, 1208, 1621, 1622, 2449, 1217, 1734, 2615, 1735,
        1224, 2532, 1395, 1237, 2541, 1408, 1252, 2552, 1423, 1267}], 
      Line3DBox[CompressedData["
1:eJwVz0lOAlEUBdBngg4cM0NIjIINYo+KPUOmDEzsFbEFwQWxGXUBTnQJxhiD
ugAHnhqc3Pf/u1WpGm10652BiNijlorIDEWMM8L7YMSBPGSfseGIvCwwyQQf
OsfyJHnO/khOMc0MRT518nZn5nNOKTHLPHN86RR0LsxNGiywyDJLpOz7elfm
ay4ps8Ja8s32q/Jb51becUOFrN263GSDH522vKfFFjmdbbnLDr86D7JHN/lf
+458dP9H2vlJPpN1X03ewZtzxu7F/Mo/HxkjMA==
       "]], 
      Line3DBox[{1098, 1281, 2398, 1100, 1292, 2409, 1119, 1304, 2417, 1132, 
       1316, 2422, 1145, 1328, 2426, 1158, 1340, 2429, 1171, 1676, 2606, 1678,
        1679, 2607, 1680, 1681, 1672, 2603, 1671, 1196, 1476, 2568, 1478, 
       1521, 1550, 1551, 1534, 1741, 2581, 1749}], 
      Line3DBox[{1102, 1283, 2399, 1103, 2461, 1294, 1121, 2466, 1306, 1134, 
       2473, 1318, 1147, 2482, 1330, 1160, 2492, 1342, 1173, 2502, 1353, 1185,
        2514, 1364, 2436, 1198, 1479, 2569, 1375, 1210, 1554, 1555, 1536, 
       2570, 1747}], 
      Line3DBox[{1104, 1284, 2400, 1105, 1295, 2410, 1122, 2467, 1307, 1135, 
       2474, 1319, 1148, 2483, 1331, 1161, 2493, 1343, 1174, 2503, 1354, 1186,
        2515, 1365, 2437, 1199, 1480, 1376, 2578, 1211, 1556, 1481, 1537, 
       2571, 1739, 1751}], 
      Line3DBox[{1106, 1285, 2401, 1107, 1296, 2411, 1123, 1308, 2418, 1136, 
       2475, 1320, 1149, 2484, 1332, 1162, 2494, 1344, 1175, 2504, 1355, 1187,
        2516, 1366, 2438, 1200, 1482, 1377, 2579, 1212, 1557, 1483, 1538, 
       1740, 2582, 1752}], 
      Line3DBox[{1108, 1286, 2402, 1109, 1297, 2412, 1124, 1309, 2419, 1137, 
       1321, 2423, 1150, 2485, 1333, 1163, 2495, 1345, 1176, 2505, 1356, 1188,
        2517, 1367, 2439, 1201, 1484, 1485, 2446, 1522, 1558, 1486, 1539, 
       1487, 2610, 1754}], 
      Line3DBox[{1110, 1287, 2403, 1111, 1298, 2413, 1125, 1310, 2420, 1138, 
       1322, 2424, 1151, 1334, 2427, 1164, 2496, 1346, 1177, 2506, 1357, 1189,
        2518, 1368, 2440, 1202, 1488, 1489, 2447, 1523, 1559, 1490, 1540, 
       2585, 1753}], 
      Line3DBox[{1112, 1446, 1447, 2404, 1113, 1299, 2414, 1126, 1311, 2421, 
       1139, 1323, 2425, 1152, 1335, 2428, 1165, 1347, 2430, 1178, 2507, 1358,
        1190, 2519, 1369, 2441, 1203, 1491, 2572, 1492, 1524, 1560, 1561, 
       1541, 2586, 1742, 1750}], 
      Line3DBox[{1263, 1419, 2577, 1503, 1248, 1404, 2537, 1233, 1391, 2528, 
       1220, 1383, 2524, 1213, 1378, 2521, 1204, 1370, 2520, 1191, 2431, 1359,
        2508, 1179, 1348, 2497, 1166, 1336, 2486, 1153, 1324, 2476, 1140, 
       1312, 2468, 1127, 1300, 2462, 1114, 1288, 2458, 1088, 1277, 1441, 
       1507}], Line3DBox[CompressedData["
1:eJwV0Dsvg1EABuAjri1mYqFMdsTvKAmzyYTB7BKMEjFpXQeWuhNFW9Qt0T/g
FyAiYpJQIvF8w5P3fb9zeoYmhkaTIxUhhDE+q0JYqA6hHAvhWZ/WP/RHfVGO
2yW9ryaE3ngIDzJJiX7yFLijx/m9vKTIFdsM8OedWjnvzSO5YRdZp91OcKF3
emNOX2bNnpGrMi1nqXFesKf0FCv6RHRfLslJqt3J2236IGk9R4omZ5noHX7t
W3lOjlP7nUp3snLft0Z+9JvonDOO7W533uQRe741UNav5QlZ9u0u916jO+z6
Vs+3HpfD/ovD6D+yX8iwY8f40pv9tk4/YMt+YpNWu4UO/gHAhEPY
       "]], 
      Line3DBox[{1269, 1425, 2554, 1254, 2453, 1410, 1239, 1674, 2604, 1673, 
       1675, 1494, 2600, 1649, 1651, 1725, 1650, 1693, 1701, 1746, 1763}], 
      Line3DBox[{1271, 1427, 2555, 1256, 1412, 2543, 1241, 1397, 2608, 1682, 
       1226, 1387, 2573, 1603, 1605, 1604, 1218, 1382, 1704, 1757}], 
      Line3DBox[{1272, 1428, 2556, 1257, 1413, 2544, 1242, 1398, 2533, 1227, 
       1388, 2574, 1606, 1608, 1607, 1219, 1705, 1715, 1764}], 
      Line3DBox[{1273, 1429, 2557, 1258, 1414, 2545, 1243, 1399, 2534, 1228, 
       1389, 2575, 1609, 1496, 1610, 1611, 1694, 1716, 1744, 1760}], 
      Line3DBox[{1274, 1430, 2558, 1259, 1415, 2546, 1244, 1400, 2535, 1229, 
       1390, 2576, 1612, 1497, 1614, 1615, 1695, 1758}], 
      Line3DBox[{1275, 1431, 2559, 1260, 1416, 2547, 1245, 1401, 2536, 1230, 
       1499, 2592, 1613, 1498, 1655, 1525, 1697, 1698, 1756}], 
      Line3DBox[{1276, 1432, 2560, 1261, 1417, 2548, 1246, 2451, 1402, 1231, 
       1501, 2593, 1616, 1500, 1656, 1526, 1699, 1702, 1761}], 
      Line3DBox[{1506, 1505, 1504, 2561, 1262, 2455, 1418, 1247, 2452, 1403, 
       1232, 1502, 2594, 1617, 1658, 1657, 1659, 1700, 1703, 1745, 1762}], 
      Line3DBox[{1755, 2611, 1738, 1535, 1553, 1552, 1209, 1374, 2567, 1477, 
       1197, 1363, 2602, 1670, 2513, 1184, 1352, 2605, 1677, 1172, 1341, 2491,
        1159, 1329, 2481, 1146, 1317, 2472, 1133, 1305, 2465, 1120, 1293, 
       2460, 1101, 1282, 2457, 1099}], 
      Line3DBox[{1759, 1696, 1654, 1652, 1653, 1602, 2591, 1495, 1685, 1686, 
       2609, 1687, 1684, 1683, 1240, 1411, 2454, 1255, 1426, 2456, 
       1270}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
qfEfX6rsosK7lZ7PXL64KzX+X4epc8gtSsTRPHuu11mKD5wt8NuV56RsSs9/
NWYn4ZW+qE34RA0PAL7m28qER89R9ouiZXwK8jmOfCogn8nATwCvmE5cL6dU
X6f6m9R/9hoqbn/PGDUOFl+8QfjTbb8g/TZvWhKNg0+Kqnkqy1wVp8rpN9ny
ulJr3+kxHxBfxXf9qH9+8V0A9c/c2ca2NOmX/zWJ4lEXfz6V4o39X2qk9NLY
Xkov/fhkqvnvDlHrrBmxfSkdkaukKy3tPlVo96lCO44d0pHwdUNHUZqzRM+o
1NpXwqX2lcqZI+YC4VdGJxC/ov/7HIrVPZBO4dJ9Vk7hVue/fIWf/EbNK+rc
4c37qyU8re9EpPedFKfwIzb5rd4H0e8Tk3D9PjH9fQodt3tOzen2Si/utNy8
lWda5RYgyM1X76RIuNU7Kfr7JhJu9R6Kjl/T1hH6PR46znKrKMjNV++eSLh+
L5wuH+kdE2/fN5Hwa9o6S5ebjrPcygty2y/U11fvm1i9+6CfN5dw6dy6hLvo
z3s/f52LqvyVzGWK6bek1PfvOHj3vsPtl9td+fxv9CtfvwMi4Tw/Rmrzo913
PSTc7j35Eq6fl9Rxb+/Pl86NOnXPv91ybj6k+meBDq1VuUp2TLX8bvDnA/+H
4Pf1ff5pfU8ho8jNLn5Xzv+fcnbKz2DXDxAHOTwMOayDHJx6n2Ib8vdH/muQ
P/cDX71P4Wt5OuX38LUfw9f+BLv3CGU0P88/JZ+7/oG/xyU5/FN+AEme3srZ
V34Ab/0kdtf7dtfv6fWTZO2r4uIO/KnibWOrqTgNvhf3i48iKB1I/B5jQY8W
RH/6qtonfa5iO8IHdFX12tU0jNJ85dqnkI8uh3GTXLeMU48btPEB8r9CfB73
rG1q/XW4oirnZeC9k5TcsqP8Zi4mPp/Kf9aotUrhq5F/wosK731J4XlovvO4
71+v8PnlVH37Uj087jrXFO7rdSsV25Xx16F35aDw020DCY+bqvapXy4WQ+Vn
+4ntKbaj6pvX4/9F73xAjYOzT3UgvD/Gy26Ml4cwXtK67uZ3NKze63F63e3t
+trX6xSrdb30zp2374PcKeusjLZuulPk9v+6Pl2v4Xp76ffFsZxDNDnnT6ec
vV2ffqitT9doctDHu/QujxXu1DuJvsal+/2k/iC9nyjh0jsd0vsv0n66hNvd
B5felymGd2RC8Y7M/VXUOzJ285fendmF+/qW4b6+arivT3pX0e57ixIuvSNm
9x1GCdfXO4yzXmP/0waMO6txcQT984jWb73FH8R3d2h2lPTeovQO6Rb8/mHY
+aCT7asoYb2v210ul8pHpTftUqv89XzuwzqF7wF7D+uUF7AeKYB8cmA9Ir37
Y/cdRil/6b3FHodrBZl4wLMHO5l49pktTNrY5ZpD8VdNr/2bzsssuhBn0kY2
1Av3ESSvv/T33azeLZp3RfWHKY3Cib/Wpjap5sNyjtDknN57gJ1+J06ar+2+
TyHZUVL+up+H+WfPup/aMWZ7GMXXZX6tO53X21dQ3VOc/Vpz+v/CuOjgv5v3
rd7P1fWYlR/JLr8uBz3uwqX5GSS9Z+W3Se993ZIesPt+ooQnzoumcdSl6GnV
juevUjsew3sHe/DeQWe8d2D1zqAuf+neVF3+VvMLy6GNJgfJbpHGtYTr71p6
+46tjketbUnyjK1Rk/Re0tD2pJcOGe+SfK99s9yc7929s34Ycms++vtWdu9h
tvuOnmTnSHaL3fuBpX5r1S7e8kvv30m41Tyoj4susRNIfwVvCqD7AbL0fI/m
KWne6Qx+l8bfRcP/BVyyh3fVmqL6VQFzvvS4QSfjCRpuJTcdl77r1DpCejdN
qpe0r9TnhZyEDxszyTz/4wadjA/1Epf0f+LmlYRXLjzE1Gtu0LZxq30NfR5J
K+5t/GRacSnO0Nv31+6Ud9ns4tI4csr/YzeOyOpdNrv+SW/tVbt2rFP5SLh0
P3lacf29M6v30bx9B61NWF6iH63difQS6GT8MQHX+SdWVeeAutXbSvoHtCXe
XcP3RF1R524KdDLPI7lB28YlfWV3H9wpPSaN3+KBIYSzvwh0htMzEu5rPWMX
T+/61Apf9fRCspODR9WjfnepoYvWj3bjda38Rel9N83X381o/cep8mS0ejmF
+9o/b1cOdudfKZ/SeGfqIbwzlQ3vTEm45DeQ3pmSviu9u2Q3H8mOsru+ltbR
Tq2XpfW7tE6Xymn3fV5pP0LC75T3g6zy0eVm990fu/4ru/WS9qMl3K7d+3p+
pU/W1lRxUKCNnK+rfZMCrys//zJ/itsS/V2SfybzfT8RPnlaEN0blpD7OuHS
d6X+aXe8t/7gGaKz0n0UHveK7p0o/xeLqTibBocpLs09SNHiuzxNPFcJ3x8T
SuUf1fpnwvH/5PvJcb+p+M5CzVLqPbaLbvPpmb/s528mkN/v0S+/I/5DSe0o
/17f/JGinI1QTtDGb8c2E96n7J+kb1sezEv69rft9Qnvm1Pdu9ZsR32Sg3S/
hHTvQd5LKm6v9GjVnvdXrUj5SPcweMolkV5uu7op6ftqL16gduHz+Fu08/jS
/QDS/jLvH/B+Au8j3K64bvYPH9L6/+2OW84o8cxplU968XhNbgPuULkdFOTm
qzhwSW5WceDexofrctblJsU/e+sXZbkdEOTmVBy4jsdr8nRabuk9d6/vY3rr
P2F57rcpz/Ti8ZqcWZ4Pa3EjfF5JwvU4Eyv8IeAcf7Fei7vT41je2q/8SJOG
NqZyghbxPoiXyK3FS0hx407hvYDnBZ5zvXfx574+T637Q1wuJXeVpt0PUB35
4x1QpP90HLuH5ZdmOfuqXXx9Lt7X7Wu33W9Xf8gY/e0mLp0jsIvntcC3A+d4
3TehD2dAH4IWcdZjHP/mtz5lPFt+TX86hetx4Pp9CDpuN55c2j+yimN3Kr5d
9w/cru9K7ws7vU8q7Xv6Kn4+rfK8K+d/Rs535fn3OMdrcvwmx206ff+AHh/4
VoOZRE84VCyI7GRFi/6W44vV+c3MFBfscb+PeGBf+1t4PRIv+BO89QPo8mF8
0/C1JPeyeYIp/hm06B/wtf9EP0/B9XXqXkFfl1M6HyH5Deyu949YlFNfzx4R
cGm9dqesv2rjHHRmevnJg/T22b3e2qWM6/ssVvdTSec7rM7J6rh07kDCPcC/
1PqPt/OUt/Oavh9kN/5K1288v7hxPrkxzivzOWW78SHe7mszv7f7SiwHSc/X
qjSK9jMqlhsWZKaN+vrRveVSHJTd81mSXrJ7Dsuuf0/ya9mN57Qbn+DUOUSr
81bensOS+sl3OI/P69MA3A9QPlz14xvZ1L0BB87QOftk/c9x43yO/ou9tQlf
daIb4WM3q3fHJP3w3fd1Ce82sTPhz/RW7+wMKVKG9juHtSz+nIkvbNw49Fa9
oZ+3Ku36lvBFkZG0n3jhkHpXaHZDte72/0jxz1G0bXtVPyfbyiKuwKk4z5Lj
lT6vO17Nm5/mVvvRkv6R7Hzdbknres0qH93ulexACZfsKP27VvpEGhfs5+dz
EH28vP/BV/Oa3p8Zl84ZSbhUX0mfzNPGBcZJ8nh5WMMD0A/roB9uRT+sDPxJ
4B8BLw68CfDdwCsBL6XxS7i0XihcV8UD/HytGMX3grbsD7o+lOKg7MbzW8XV
6PjrRe6heKagBscojmBSu3E0z0rxTlbnsr3d/5LKz/2hANp9Jtqd2/dptMs2
tIvd+9DSek7Eblx0Rj+v4dQ5CKfml/SeL+D+rM+zc9F/OJ7/ES2eX+o/5Z9I
Inz4H1VoHgct4lI+TrWLtH6U4pwlfru4lP/t6oe+jpfOaPHYGS2+WvIfSvOj
U3KQ5k27869T58Sl+VpaJ9bW1rMNsZ7V9630+0C8je+1G9fqFG7Xby+1S0wj
pbd3xim93VPR4jqxM/g/Bn93C/4ciKd9APG0qxBP2+6Gep86/nxPwpd8ot7J
bVOzDuELLqj3r4d+2olwf+RzL/JZinw+KKHeb8o8herpTuhL76AbF/epd8av
tX7VtJPckyPz0rhYcuZ9wt/4ugeNl8tFthNe5ll6l9v9zLZCFKe68/N5tH4c
fe4byv/TVWpdmbM0vdebXN91Wn0lOQzbpu6nu9IimPDdT9F62/j3RBXvmm+B
4v9+tOJ/77WNVJ5ff9lG/pZ21fOZ/dcIvabiijcmBlJ5bgSqeXDbUvV+aKdT
Kt74gwgVb/zM7liq70vR3am+Z+a5g1Mr5wzM43kwj7+vrQvyaeuCGrAPA2Af
boZ9yOuF+sDjgFcBXhq4G/jkUzmonBcSXqL2Kt/Fn8rpqTyV5BBjFKV2Cdw0
l+T/DPJ5RP+uTf+MtJ6S7HZJX0l6SdIbEShPU5QnCOU5kf1Jwo9u+Jbe7b2g
aGNGkPI/b+wwm/g3KNoIQT4xyCcQ+fy4SPXbRQ9+TXKdR6nHaAn+luBvC36W
T03gbYDP3DCV8ELVn6C0JKUeY2Sh49QuVeZ1pfzLPXiO4p97jJhJdOXuHxH/
2PAxtL9mtV7Q5xdJzgtyq3jvQ0O+Inyhoo0u49R8dLqv8lMe81Nx4KF+aryX
Kfwx/f+H1pFUHun9WfFdVMjnu2CVLqDUYwSm6Fdn3Z2V/IwioF9J2T7iPCjJ
x268rt37qJ2KB5a+e6aIGqcdBzUhPAv2TaT9Jm/jRa3iSO2+x/Qt/J8T4f/k
+1HtxnN6Gwfr9D3JF2Yovh30/qHH3alBRIpypvc+ZF/Fo3LcqRRHOjZMzY98
D3aZPcr/7Ov4Ul/HJQYWUPVS57FvnsvOGPGcztfX5VLtrdKMG9eq76vyPZl2
7xN26n7g23Xfr1P7Hbfr3to9uFd9Ie5Br4f71Z2KL7pdcVl27+P9HPfO8z5G
f9w/7+v4K1/JIdkOwb3h5zBvv4L7w+36Vfi+fr5/cT7u7fe1fKz8GHpcmVP3
vkr7BdL+uL4O4vJL+1zS/ZYSvxjPIOyP2N3XkHApbkS6f8buPTDSd63uzXDq
/g1f3bMhnY+2e97Z1+89ZbT3iaTxazeuUsKl/cHbFVcp4RktrlLCrb6b3nOU
kh6zu97kddNEbd10u+MtdTyjvT+S1vhJfR6U/IR240PsxjdKdqBdO8SuvWQ3
n/9Vv5bd98t8fQ7a1++I+dqvZTeOhetVQaiXr/1d+rlpya+VT+C3e856EN45
6oN3tXpuUX5U1vMP+ug89d35wjv/2P/7u+SS3+xO8YPdLj+VG/Ly1ftHd8q7
Ub6Wg5V8MoocnJaP9E6TU3LTz33YPa9h5a/Q49+243zN9VENKR/Qyefrp2vn
6yX//LodDQjvV4P8oe4VvToQLvk33se7lkO0dy2ditu06z+3G68uxYfPFeLA
pTgNyW8p+eu6jn+b4gQKTq6l4jda0DsQtv1FTsXrSu3lVNys1f3V3t5Hbdev
KNXLKb+fr+Mw7epDyc8s9R/9XBvHAUrv4KQ17k6Pl/4PgDQ69Q==
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{343.8403199990457, 252.37096580776893`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-5, 5}, {-5, 5}, {-19.999997142857143`, 19.999997142857143`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-1.1015198433024431`, -2.7578963460140122`, 1.6219314965353877`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"a412f9e3-87f6-48c0-ba99-f35765f2999c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"fad26", "[", 
    RowBox[{"x", ",", "y"}], "]"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "2"}], "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"eb515441-ec41-4857-a761-381eff69a8f9"],

Cell[BoxData["Indeterminate"], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"36478904-5139-4daf-bcba-6faaef19a4dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanConvert", "[", 
  RowBox[{
   RowBox[{"x", ">", 
    RowBox[{"-", "1"}]}], "&&", 
   RowBox[{"y", "<", "2"}]}], "]"}]], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"9dbd9875-c2a4-422d-a884-003c0a0c0772"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", ">", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{"y", "<", "2"}]}]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"e514f7c7-9547-4711-b902-cd18c485dcc9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanConvert", "[", 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", ">", 
      RowBox[{"-", "1"}]}], "&&", 
     RowBox[{"y", "<", "2"}]}], ")"}]}], "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"324fc693-9aef-4149-bc7d-ca2fa5cd8c51"],

Cell[BoxData[
 RowBox[{
  RowBox[{"y", "\[GreaterEqual]", "2"}], "||", 
  RowBox[{"x", "\[LessEqual]", 
   RowBox[{"-", "1"}]}]}]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"a72ee390-3d25-45cb-acdb-ae6b3681a19e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "fad26b", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fad26b", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"x", ">", 
         RowBox[{"-", "1"}]}], "&&", 
        RowBox[{"y", "<", "2"}]}], ",", 
       RowBox[{"x", "+", 
        RowBox[{"y", "/", "2"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"x", ">", 
           RowBox[{"-", "1"}]}], "&&", 
          RowBox[{"y", "<", "2"}]}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"2", "x"}], "+", 
        RowBox[{"2", "y"}]}]}], "}"}]}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"?", "fad26b"}]}], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"d25ffaf8-ce22-4d7f-b5c9-be0bf23a1c69"],

Cell[CellGroupData[{

Cell["Global`fad26b", "Print", "PrintUsage",
 CellTags->
  "Info503749838866-8646852",ExpressionUUID->"aeb785de-0246-45ba-afa7-\
c1af78bdbbc6"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"fad26b", "[", 
          RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
         RowBox[{"Piecewise", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"x", ">", 
                RowBox[{"-", "1"}]}], "&&", 
               RowBox[{"y", "<", "2"}]}], ",", 
              RowBox[{"x", "+", 
               FractionBox["y", "2"]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"x", ">", 
                  RowBox[{"-", "1"}]}], "&&", 
                 RowBox[{"y", "<", "2"}]}], ")"}]}], ",", 
              RowBox[{
               RowBox[{"2", " ", "x"}], "+", 
               RowBox[{"2", " ", "y"}]}]}], "}"}]}], "}"}], "]"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`fad26b],
  Editable->False]], "Print",
 CellTags->
  "Info503749838866-8646852",ExpressionUUID->"8225d689-0347-47c7-a64a-\
022daff66558"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{"fad26b", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"c74ebcf1-7be3-474a-922b-aadb3099372e"],

Cell[BoxData[
 Graphics3DBox[{},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-5, 5}, {-5, 5}, {0., 0.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"3e031998-1dbb-496f-af6e-f0d41e9d6206"]
}, Open  ]],

Cell["\<\
7) Investigue uma situa\[CCedilla]\[ATilde]o do dia a dia em que a palavra \
limite \[EAcute] adequada para ser usada. Analise se o conceito adotado na \
situa\[CCedilla]\[ATilde]o apresentada tem similaridade com o conceito de \
limite do contexto da matem\[AAcute]tica. Apresente um resumo com o resultado \
da sua investiga\[CCedilla]\[ATilde]o no F\[OAcute]rum da AD2 e troque ideias \
com seus colegas. (1,0).\
\>", "Text",ExpressionUUID->"b96bc061-3022-4b61-88ff-ea5d8153ed7d"],

Cell["\<\
Na pr\[AAcute]tica do alpinismo em uma montanha, a corda permite ao escalador \
ultrapassar sobre uma fenda em uma trajet\[OAcute]ria que equivaleria ao \
terreno que a rodeia. Neste ponto o escalador ocupa a \
posi\[CCedilla]\[ATilde]o que ocuparia se houvesse terreno, sem precisar \
acompanhar exatamente o perfil do relevo.
Ao escalar um barranco, o escalador estaria mudando de n\[IAcute]vel, sem uma \
transi\[CCedilla]\[ATilde]o suave de um ponto ao outro, de forma que a corda \
n\[ATilde]o ajudaria. Neste ponto, o escalador pode ser dito estar \
ultrapassando um ponto com limites lateriais mas sem limite \[UAcute]nico.\
\>", "Text",ExpressionUUID->"dfaf2693-7608-4f61-88f1-95899721f02d"]
}, Open  ]]
},
WindowSize->{675, 692},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->{
 "PresenterSettings" -> {
   "ShowToolbar" -> True, "SlideBreakStyles" -> {}, "ShowSlideBreaks" -> 
    True}},
ShowCellTags->True,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default Pedro 1.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "LogZeroNaoExiste"->{
  Cell[32257, 609, 2242, 58, 312, "Text",ExpressionUUID->"6a49e7b2-a652-4265-9836-f7dac9cfc3f5",
   CellTags->"LogZeroNaoExiste"]},
 "Info453749759291-6688781"->{
  Cell[1232648, 23475, 143, 3, 59, "Print",ExpressionUUID->"79d4e8b4-b693-4c38-ae11-407d0f6ddf00",
   CellTags->"Info453749759291-6688781"],
  Cell[1232794, 23480, 1231, 35, 51, "Print",ExpressionUUID->"a56c6165-93dd-46e6-b5ed-100acb09ca90",
   CellTags->"Info453749759291-6688781"]},
 "Info503749838866-8646852"->{
  Cell[1326324, 25107, 143, 3, 59, "Print",ExpressionUUID->"aeb785de-0246-45ba-afa7-c1af78bdbbc6",
   CellTags->"Info503749838866-8646852"],
  Cell[1326470, 25112, 1611, 46, 43, "Print",ExpressionUUID->"8225d689-0347-47c7-a64a-022daff66558",
   CellTags->"Info503749838866-8646852"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"LogZeroNaoExiste", 1330749, 25232},
 {"Info453749759291-6688781", 1330912, 25235},
 {"Info503749838866-8646852", 1331228, 25240}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 302, 4, 53, "Subsection",ExpressionUUID->"2f38b3b2-ae57-472a-b69f-a0ccf8fcae77"],
Cell[885, 28, 770, 18, 100, "Text",ExpressionUUID->"81ba8f0c-8540-4908-8cd0-94db3768057a"],
Cell[CellGroupData[{
Cell[1680, 50, 477, 11, 50, "Code",ExpressionUUID->"7917d6e1-dff8-476c-ba26-dfd16f7a2bf6"],
Cell[2160, 63, 7192, 135, 240, "Output",ExpressionUUID->"0a344512-339b-431e-b9dc-39d01df5dc00"]
}, Open  ]],
Cell[9367, 201, 518, 14, 56, "Text",ExpressionUUID->"44924518-5dfc-4e35-97f3-2eef7fbc26de"],
Cell[CellGroupData[{
Cell[9910, 219, 503, 10, 50, "Code",ExpressionUUID->"0c83d337-691e-4192-a351-dbe819aa7ef8"],
Cell[10416, 231, 21826, 375, 239, "Output",ExpressionUUID->"04e1e6b7-4087-4fd2-a8c1-4bf3c4baa6d4"]
}, Open  ]],
Cell[32257, 609, 2242, 58, 312, "Text",ExpressionUUID->"6a49e7b2-a652-4265-9836-f7dac9cfc3f5",
 CellTags->"LogZeroNaoExiste"],
Cell[CellGroupData[{
Cell[34524, 671, 533, 14, 48, "Input",ExpressionUUID->"8f04e017-4ac9-4a4c-8e01-1a31849d8d41"],
Cell[35060, 687, 4283, 86, 244, "Output",ExpressionUUID->"2d0e4105-6027-470a-b2a5-25ae63244d23"]
}, Open  ]],
Cell[39358, 776, 1423, 47, 44, "Text",ExpressionUUID->"e289eecc-c0d3-406b-b1ed-de58d135bf8b"],
Cell[CellGroupData[{
Cell[40806, 827, 307, 6, 50, "Code",ExpressionUUID->"7eae3423-b628-481b-85cd-8037722b58b8"],
Cell[41116, 835, 124, 1, 32, "Output",ExpressionUUID->"0f9b57a5-31b9-4682-a7b6-f9252ec2277c"]
}, Open  ]],
Cell[41255, 839, 425, 13, 39, "Text",ExpressionUUID->"62b755e5-f5bb-41bc-b0a0-bc3fe71ed42f"],
Cell[CellGroupData[{
Cell[41705, 856, 284, 6, 44, "Input",ExpressionUUID->"e91a4c24-f71c-4fd0-b3cf-e7feb45b2884",
 InitializationCell->True],
Cell[41992, 864, 124, 1, 32, "Output",ExpressionUUID->"eb806a57-2331-45c8-820c-3676f405d48c"]
}, Open  ]],
Cell[42131, 868, 578, 14, 56, "Text",ExpressionUUID->"79c28b42-e546-4bc0-9c09-f3737d088336"],
Cell[CellGroupData[{
Cell[42734, 886, 113984, 2189, 84, "WolframAlphaShortInput",ExpressionUUID->"96698c25-8a53-462a-8238-32c903caf486"],
Cell[156721, 3077, 175, 4, 32, "Output",ExpressionUUID->"84755e08-6f36-4a1a-bea7-888af39b8129"]
}, Open  ]],
Cell[156911, 3084, 876, 25, 56, "Text",ExpressionUUID->"f67ad11e-40b7-4e2f-8e32-ca340bea431a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[157812, 3113, 338, 8, 50, "Code",ExpressionUUID->"e0bb3c35-fca2-4801-b741-cb765b53a257"],
Cell[158153, 3123, 3839, 80, 239, "Output",ExpressionUUID->"dfe401c2-b0af-4900-9fd9-2f583605a579"]
}, Open  ]],
Cell[162007, 3206, 1928, 51, 173, "Text",ExpressionUUID->"67379076-9dbb-4c83-b229-f13a4fa9f031"],
Cell[CellGroupData[{
Cell[163960, 3261, 111771, 2141, 84, "WolframAlphaShortInput",ExpressionUUID->"7789feaa-e88e-4e25-a45a-e9aab093f5c4"],
Cell[275734, 5404, 222, 6, 32, "Output",ExpressionUUID->"955c41b3-5b56-47b1-9007-33a19118c07f"]
}, Open  ]],
Cell[275971, 5413, 260, 5, 34, "Text",ExpressionUUID->"e540f471-9fe9-4957-8d08-7eb26dd76a8c"],
Cell[CellGroupData[{
Cell[276256, 5422, 362, 10, 51, "Input",ExpressionUUID->"255048dc-a4e6-4de4-9fc3-7c8a9749a9a9"],
Cell[276621, 5434, 7914, 149, 239, "Output",ExpressionUUID->"0e08f9d9-6125-49e6-8636-c5ed7837d53e"]
}, Open  ]],
Cell[284550, 5586, 1116, 28, 56, "Text",ExpressionUUID->"9bea0c54-7d61-4071-8d1a-9238ab2a6780"],
Cell[CellGroupData[{
Cell[285691, 5618, 980, 22, 28, "Input",ExpressionUUID->"d7933b45-11fc-4c87-86e6-642ef1896b96"],
Cell[286674, 5642, 1756, 35, 335, "Output",ExpressionUUID->"6d734efc-e7eb-42b9-82a5-9fdc709608be"]
}, Open  ]],
Cell[288445, 5680, 1794, 36, 337, "Text",ExpressionUUID->"19ac677e-3070-4d9c-bcdf-ec4d8896bfb1"],
Cell[290242, 5718, 212, 4, 34, "Text",ExpressionUUID->"c1eee9a9-d23a-4030-9790-0244a70e00ba"],
Cell[CellGroupData[{
Cell[290479, 5726, 1221, 31, 28, "Input",ExpressionUUID->"1401e1d3-b3b6-4783-ae88-a84a9b56beec"],
Cell[291703, 5759, 2130, 43, 363, "Output",ExpressionUUID->"0de1d437-4ae2-433b-8a27-0a2483923afd"]
}, Open  ]],
Cell[293848, 5805, 1348, 27, 144, "Text",ExpressionUUID->"ff51b773-c64d-42dc-aa93-63c7ed82d99b"],
Cell[CellGroupData[{
Cell[295221, 5836, 201, 4, 28, "Input",ExpressionUUID->"b3e20dc1-030f-4396-96c4-2be4fbd361c4"],
Cell[295425, 5842, 155, 3, 32, "Output",ExpressionUUID->"610ee2df-ef54-4165-8103-ac7ce0c1a49f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295617, 5850, 217, 5, 28, "Input",ExpressionUUID->"ae78a65a-7919-40b5-88a7-8b7ab130ebc2"],
Cell[295837, 5857, 424, 11, 48, "Message",ExpressionUUID->"0a3f3f35-c63d-47dd-b227-b678c52bf3ec"],
Cell[296264, 5870, 167, 3, 32, "Output",ExpressionUUID->"09b8f876-660e-4735-9fe6-786eafc73385"]
}, Open  ]],
Cell[296446, 5876, 431, 8, 56, "Text",ExpressionUUID->"d61672a4-98cf-452e-b109-61e3aa844a00"],
Cell[296880, 5886, 386, 6, 24, "ItemParagraph",ExpressionUUID->"5ee4ae4e-c0bf-4d3f-a2b9-12a97baa487a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297303, 5897, 196, 3, 53, "Subsection",ExpressionUUID->"71c66ef9-701c-4fb0-a3c1-c98052fa5734"],
Cell[297502, 5902, 1617, 44, 97, "Text",ExpressionUUID->"fe4200f3-fd91-4be1-b2a0-a1a280c86c54"],
Cell[CellGroupData[{
Cell[299144, 5950, 238, 5, 28, "Input",ExpressionUUID->"132cdab4-dad4-410a-b951-4ab21753ca2b"],
Cell[299385, 5957, 216, 4, 32, "Output",ExpressionUUID->"753fa48e-fac7-4cc4-83a7-395eb94b9d4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299638, 5966, 209, 5, 28, "Input",ExpressionUUID->"7abd18db-a8e1-482d-b863-4909dff248b9"],
Cell[299850, 5973, 188, 4, 32, "Output",ExpressionUUID->"4d332012-acc7-4799-a471-86241833c890"]
}, Open  ]],
Cell[300053, 5980, 199, 3, 34, "Text",ExpressionUUID->"57032424-1b43-4ffc-ad2d-3e3cfb67388b"],
Cell[CellGroupData[{
Cell[300277, 5987, 109500, 2096, 84, "WolframAlphaShortInput",ExpressionUUID->"43cb4de2-a2ef-4707-870a-db5344c768cb"],
Cell[409780, 8085, 206, 4, 32, "Output",ExpressionUUID->"79852129-8082-428d-98ae-8bbd023ee2df"]
}, Open  ]],
Cell[410001, 8092, 1418, 36, 56, "Text",ExpressionUUID->"f15fcc3a-83cf-45b3-814a-70c5f9df92e2"],
Cell[CellGroupData[{
Cell[411444, 8132, 287, 6, 28, "Input",ExpressionUUID->"59a82ace-416a-4b51-96ce-a9de63de3aee"],
Cell[411734, 8140, 232, 4, 32, "Output",ExpressionUUID->"4d75e39a-fcb5-4cce-af00-d7f6b07f06c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[412003, 8149, 342, 9, 28, "Input",ExpressionUUID->"e4079e0d-d7f7-4a56-a003-f6f92e521808"],
Cell[412348, 8160, 15164, 267, 240, "Output",ExpressionUUID->"22f1a29c-b408-474c-9440-a2213cee0af4"]
}, Open  ]],
Cell[427527, 8430, 1085, 31, 41, "Text",ExpressionUUID->"149d6063-8c7c-45ed-aad1-7edc3cbd4fac"],
Cell[CellGroupData[{
Cell[428637, 8465, 232, 5, 49, "Input",ExpressionUUID->"e56b299a-e83c-4cb7-bb1a-f31fbc63317f"],
Cell[428872, 8472, 153, 3, 32, "Output",ExpressionUUID->"e70d19c6-f81f-4935-a93f-074e6ce0b29f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[429062, 8480, 304, 7, 49, "Input",ExpressionUUID->"e234e3a0-2c5d-4184-bf42-87b8f2e974a4"],
Cell[429369, 8489, 223, 5, 32, "Output",ExpressionUUID->"c1b94f38-51c2-4842-ac99-a6cdfeef9abc"]
}, Open  ]],
Cell[429607, 8497, 345, 11, 41, "Text",ExpressionUUID->"461e90f8-c97a-496d-b868-eb8d2aad8bf6"],
Cell[429955, 8510, 863, 26, 41, "Text",ExpressionUUID->"3238d520-cbef-4a26-9a3e-3957abeaaf50"],
Cell[CellGroupData[{
Cell[430843, 8540, 261, 6, 28, "Input",ExpressionUUID->"6e30e9fd-8956-4901-ad34-902f7c977894"],
Cell[431107, 8548, 193, 4, 55, "Output",ExpressionUUID->"44a8b4b6-eac5-418f-a0bc-4250195c21bb"]
}, Open  ]],
Cell[431315, 8555, 298, 6, 56, "Text",ExpressionUUID->"53fa8112-1c55-41aa-887c-6aef57704127"],
Cell[CellGroupData[{
Cell[431638, 8565, 1082, 23, 28, "Input",ExpressionUUID->"3790f37e-0a29-4b62-bbd1-28a87b1de063"],
Cell[432723, 8590, 1838, 36, 341, "Output",ExpressionUUID->"b168e522-26a9-4918-aaa4-14bb859a8c34"]
}, Open  ]],
Cell[434576, 8629, 6084, 186, 224, "Text",ExpressionUUID->"e74c3d84-2aa0-41ae-a149-0f3e978a3b89"],
Cell[CellGroupData[{
Cell[440685, 8819, 306, 8, 28, "Input",ExpressionUUID->"f4799a76-7218-4aba-9459-36d5647c8a09"],
Cell[440994, 8829, 258, 7, 32, "Output",ExpressionUUID->"8f4ff3b6-5a3f-428e-ab85-3456675eec2c"]
}, Open  ]],
Cell[441267, 8839, 1257, 38, 41, "Text",ExpressionUUID->"034d9237-f01f-4510-9b2c-a9d18a213910"],
Cell[CellGroupData[{
Cell[442549, 8881, 109818, 2102, 84, "WolframAlphaShortInput",ExpressionUUID->"8408680b-a43d-416f-a844-24f6812553d0"],
Cell[552370, 10985, 220, 5, 32, "Output",ExpressionUUID->"3855bfd7-4c60-4f2f-8132-c46f482a57c3"]
}, Open  ]],
Cell[552605, 10993, 1597, 46, 85, "Text",ExpressionUUID->"5cf919c8-cd88-42e6-9c36-4291d5da92cd"],
Cell[CellGroupData[{
Cell[554227, 11043, 714, 18, 51, "Input",ExpressionUUID->"f6b65b7b-06d8-44db-b9cc-edd76c28d25b"],
Cell[554944, 11063, 1406, 37, 230, "Output",ExpressionUUID->"8c9e6bf1-9af5-41fd-9b2a-d0486d3a77a1"]
}, Open  ]],
Cell[556365, 11103, 626, 19, 41, "Text",ExpressionUUID->"5c6ac70c-b78d-4c6b-bfdc-1936f92e69c8"],
Cell[CellGroupData[{
Cell[557016, 11126, 358, 9, 51, "Input",ExpressionUUID->"ea35696e-cadf-4f32-a6d0-eb23a1a7f3ca"],
Cell[557377, 11137, 7450, 140, 239, "Output",ExpressionUUID->"25970243-275a-4107-bed4-98b5cdd5a0e4"]
}, Open  ]],
Cell[564842, 11280, 869, 25, 34, "Text",ExpressionUUID->"8f69b890-d471-4935-86e7-b6f669b80cfe"],
Cell[CellGroupData[{
Cell[565736, 11309, 111594, 2136, 84, "WolframAlphaShortInput",ExpressionUUID->"38f4484f-91af-4f81-a11c-ccda78de1240"],
Cell[677333, 13447, 220, 5, 32, "Output",ExpressionUUID->"683533fa-7645-4f27-a688-6c42d7b207bf"]
}, Open  ]],
Cell[677568, 13455, 1099, 34, 65, "Text",ExpressionUUID->"3dbd361a-b53f-4e83-ae5a-543af0850d12"],
Cell[678670, 13491, 862, 17, 78, "Text",ExpressionUUID->"c6fd78b8-ef0b-4f7f-b9b5-336ede4211ea"],
Cell[CellGroupData[{
Cell[679557, 13512, 111458, 2134, 84, "WolframAlphaShortInput",ExpressionUUID->"e40d666b-b5c1-4ea7-b5e5-89657692d8b9"],
Cell[791018, 15648, 220, 5, 32, "Output",ExpressionUUID->"8372e60a-aca0-4f2a-a954-eb47933ea672"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[791287, 15659, 238, 4, 52, "Subsection",ExpressionUUID->"57f1c289-60cf-4511-ac43-04b48460d6e2"],
Cell[791528, 15665, 469, 16, 34, "Text",ExpressionUUID->"4ff99d7d-902e-4214-b7cc-b785ef3547e8"],
Cell[792000, 15683, 343, 7, 56, "Text",ExpressionUUID->"00e6508c-d8ab-4e89-bdfe-ac8ce26082fd"],
Cell[CellGroupData[{
Cell[792368, 15694, 630, 16, 28, "Input",ExpressionUUID->"68c38ecc-7ec8-4c64-b94c-3131a90251fa"],
Cell[793001, 15712, 304, 4, 32, "Output",ExpressionUUID->"db4de3dc-008b-4a38-9d22-e736b20ad4cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[793342, 15721, 541, 15, 28, "Input",ExpressionUUID->"0a0adf64-16c7-4eda-984a-740707ecfbc7"],
Cell[793886, 15738, 184270, 3040, 208, "Output",ExpressionUUID->"3f9b6fcf-6557-4f89-8f42-19625a7d4a7b"]
}, Open  ]],
Cell[978171, 18781, 800, 25, 65, "Text",ExpressionUUID->"cab69ee0-7abf-4f98-95f7-f38b4f63fb77"],
Cell[CellGroupData[{
Cell[978996, 18810, 375, 10, 54, "Input",ExpressionUUID->"9e14e526-8f12-4fac-8ee7-89943352fe57"],
Cell[979374, 18822, 181, 3, 32, "Output",ExpressionUUID->"a4b32310-d14a-4a3d-9549-7d96552f024f"]
}, Open  ]],
Cell[979570, 18828, 709, 23, 56, "Text",ExpressionUUID->"29a10027-47fd-46ab-9796-7ac08785dddf"],
Cell[CellGroupData[{
Cell[980304, 18855, 359, 9, 32, "Input",ExpressionUUID->"9ad7bcbc-341a-47be-861e-10cc49b145a4"],
Cell[980666, 18866, 180, 2, 32, "Output",ExpressionUUID->"81bbdfe7-7ae8-4856-9bbe-cfdc7b2440c2"]
}, Open  ]],
Cell[980861, 18871, 649, 22, 56, "Text",ExpressionUUID->"2d3af849-d837-4d65-86a1-f147ba940217"],
Cell[CellGroupData[{
Cell[981535, 18897, 350, 9, 28, "Input",ExpressionUUID->"253e3ab1-6c48-4c58-a7d2-95041d8e3683"],
Cell[981888, 18908, 154, 2, 32, "Output",ExpressionUUID->"c200eedf-487e-48c2-be7a-911760664563"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[982091, 18916, 228, 4, 53, "Subsection",ExpressionUUID->"59854d7b-ac22-406f-8859-708631d2e61b"],
Cell[982322, 18922, 564, 18, 56, "Text",ExpressionUUID->"251ef111-5239-41eb-be05-43230647d70e"],
Cell[982889, 18942, 355, 9, 28, "Input",ExpressionUUID->"96507328-a38e-44e7-b343-4b63a4631038"],
Cell[CellGroupData[{
Cell[983269, 18955, 334, 8, 28, "Input",ExpressionUUID->"6a4936c6-60e2-426a-8549-4077393ec811"],
Cell[983606, 18965, 203, 3, 32, "Output",ExpressionUUID->"c468047e-6acb-433b-accf-60ddfc133678"]
}, Open  ]],
Cell[983824, 18971, 1282, 33, 56, "Text",ExpressionUUID->"a26dd62e-5bf2-4798-89e5-ae83e7d64266"],
Cell[CellGroupData[{
Cell[985131, 19008, 540, 14, 31, "Input",ExpressionUUID->"9c0f3b9d-b945-4399-aab0-778486acb403"],
Cell[985674, 19024, 93306, 1527, 212, "Output",ExpressionUUID->"ae4073ee-6c3e-47b4-bfe2-c5d5d37677f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1079017, 20556, 17852, 361, 104, "WolframAlphaShortInput",ExpressionUUID->"c63e4972-9501-4541-a799-71b7d463fadf"],
Cell[1096872, 20919, 205, 4, 32, "Output",ExpressionUUID->"795ab4a2-d8f0-4d32-b2c7-fda2bdb48f24"]
}, Open  ]],
Cell[1097092, 20926, 1081, 32, 63, "Text",ExpressionUUID->"4d708f19-26cf-4761-9893-121172c06547"],
Cell[CellGroupData[{
Cell[1098198, 20962, 388, 10, 42, "Input",ExpressionUUID->"f522dcc5-9962-4962-9a47-a948a2e66bff"],
Cell[1098589, 20974, 257, 6, 32, "Output",ExpressionUUID->"dcf9bffd-08c8-46a3-b481-7e71dbb8c1d9"]
}, Open  ]],
Cell[1098861, 20983, 868, 21, 61, "Text",ExpressionUUID->"36df387a-41ae-4641-b496-fe45f82f187f"],
Cell[CellGroupData[{
Cell[1099754, 21008, 410, 10, 42, "Input",ExpressionUUID->"5cecc045-cd28-44ee-ba59-d25aad1d2be5"],
Cell[1100167, 21020, 3601, 76, 244, "Output",ExpressionUUID->"d6bbefe2-8688-4a86-af09-a8ad965c8393"]
}, Open  ]],
Cell[1103783, 21099, 1060, 29, 61, "Text",ExpressionUUID->"595d6a79-3c72-4afd-b160-5bdac16c85b6"],
Cell[CellGroupData[{
Cell[1104868, 21132, 399, 10, 42, "Input",ExpressionUUID->"f531c31c-7663-418b-8348-3b1fbaae1032"],
Cell[1105270, 21144, 241, 4, 32, "Output",ExpressionUUID->"64d1ef3f-f148-49ab-ab72-e7f7f0ad1842"]
}, Open  ]],
Cell[1105526, 21151, 501, 12, 34, "Text",ExpressionUUID->"e49aa3bd-1a80-4706-bff0-5fd74035b613"],
Cell[CellGroupData[{
Cell[1106052, 21167, 742, 18, 31, "Input",ExpressionUUID->"210eab33-fa1a-44d0-b666-acd7ed1bb8bc"],
Cell[1106797, 21187, 1949, 37, 336, "Output",ExpressionUUID->"d2a13800-4836-4bfc-8aa8-a4b538c9a61e"]
}, Open  ]],
Cell[1108761, 21227, 1348, 39, 78, "Text",ExpressionUUID->"2c497bb9-ee6f-4dbf-b982-86e48b75f096"],
Cell[CellGroupData[{
Cell[1110134, 21270, 529, 15, 58, "Input",ExpressionUUID->"f4aef164-9d68-401d-9d1d-4f38c4aa8dec",
 InitializationCell->True],
Cell[1110666, 21287, 98877, 1622, 319, "Output",ExpressionUUID->"eccbd826-484f-43fd-9ce7-35080aceb8d6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1209592, 22915, 75, 0, 96, "Title",ExpressionUUID->"40a7104d-6a5a-42c1-802e-51c663226d84"],
Cell[1209670, 22917, 202, 5, 44, "Input",ExpressionUUID->"ba14b283-eae5-4f09-844e-929d15ff4265"],
Cell[CellGroupData[{
Cell[1209897, 22926, 269, 7, 28, "Input",ExpressionUUID->"a13f146c-0d43-4a8f-b750-e2af09eb5feb"],
Cell[1210169, 22935, 7403, 139, 239, "Output",ExpressionUUID->"163727bf-39d7-4534-89ce-97d9cd460c54"]
}, Open  ]],
Cell[1217587, 23077, 314, 8, 28, "Input",ExpressionUUID->"82707a82-db30-472d-bc86-41ec0547aabe"],
Cell[CellGroupData[{
Cell[1217926, 23089, 272, 7, 28, "Input",ExpressionUUID->"b7634445-1f28-472b-b531-4170df5189eb"],
Cell[1218201, 23098, 8225, 154, 245, "Output",ExpressionUUID->"3e662482-b287-4ff6-a9b1-1530ed0012ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1226463, 23257, 309, 9, 46, "Input",ExpressionUUID->"fb8cbee7-ce8f-47ff-9ce2-5bf3627d8fa7"],
Cell[1226775, 23268, 145, 3, 48, "Output",ExpressionUUID->"b3086d4d-ebe1-4fb8-b27f-087f0bc63428"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1226957, 23276, 379, 11, 49, "Input",ExpressionUUID->"e952cd58-a1b7-41a0-8a1a-f0053d7b7902"],
Cell[1227339, 23289, 107, 1, 32, "Output",ExpressionUUID->"1e0dd998-ea07-4d7c-9b8b-43344b0d2d53"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1227483, 23295, 347, 10, 50, "Input",ExpressionUUID->"f4ed87bf-6a73-4c42-9ef6-67fa1a9c4791"],
Cell[1227833, 23307, 127, 2, 48, "Output",ExpressionUUID->"f3c9e829-ceff-48ab-b8ef-51d0eb70ae51"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1227997, 23314, 279, 8, 50, "Input",ExpressionUUID->"5e45636f-67d7-44d2-8d54-e0f1db0307a7"],
Cell[1228279, 23324, 145, 3, 48, "Output",ExpressionUUID->"2cf4a9b1-5006-4402-9347-221ebea45fa1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1228461, 23332, 361, 10, 37, "Input",ExpressionUUID->"008c685b-4ce8-480d-978f-d0b7acd3f9d6"],
Cell[1228825, 23344, 503, 10, 25, "Message",ExpressionUUID->"b7062d4c-2e7f-44cc-9ecb-2ef8163fb50f"],
Cell[1229331, 23356, 392, 11, 37, "Output",ExpressionUUID->"540cef5f-3f23-49d5-b362-698f869dd63f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1229760, 23372, 380, 10, 49, "Input",ExpressionUUID->"274a98cc-2edf-4764-99f0-efcc4beefb96"],
Cell[1230143, 23384, 134, 2, 32, "Output",ExpressionUUID->"5aab1561-ec6a-4bc3-b20f-55b7b9d817f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1230314, 23391, 427, 13, 50, "Input",ExpressionUUID->"80c76394-18f1-4d89-a443-2b4736da6705"],
Cell[1230744, 23406, 124, 2, 32, "Output",ExpressionUUID->"bceb2638-0f7e-48bb-9d59-10cf799454ee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1230905, 23413, 176, 4, 28, "Input",ExpressionUUID->"96fad199-85d8-463d-bcc5-98d085cd5444"],
Cell[1231084, 23419, 109, 1, 32, "Output",ExpressionUUID->"2ece3eb0-2b4e-4dbc-886a-445e5951cb87"]
}, Open  ]],
Cell[1231208, 23423, 369, 11, 52, "Input",ExpressionUUID->"79fb2041-e08e-454b-a6ed-5108599f9161"],
Cell[CellGroupData[{
Cell[1231602, 23438, 180, 4, 28, "Input",ExpressionUUID->"0cf86b6d-bc3a-4c88-91b1-7930083bb948"],
Cell[1231785, 23444, 128, 2, 48, "Output",ExpressionUUID->"c1f3c770-0cf7-4015-b079-600e5871cf8b"]
}, Open  ]],
Cell[1231928, 23449, 542, 16, 71, "Input",ExpressionUUID->"4ebcd521-1bec-4b3e-bdfa-2162ce4872d9"],
Cell[CellGroupData[{
Cell[1232495, 23469, 128, 2, 28, "Input",ExpressionUUID->"3dee719b-969a-4098-9441-23a98840de16"],
Cell[CellGroupData[{
Cell[1232648, 23475, 143, 3, 59, "Print",ExpressionUUID->"79d4e8b4-b693-4c38-ae11-407d0f6ddf00",
 CellTags->"Info453749759291-6688781"],
Cell[1232794, 23480, 1231, 35, 51, "Print",ExpressionUUID->"a56c6165-93dd-46e6-b5ed-100acb09ca90",
 CellTags->"Info453749759291-6688781"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1234074, 23521, 161, 3, 28, "Input",ExpressionUUID->"7a1e45c5-694d-49ad-a29b-851561cdf9b3"],
Cell[1234238, 23526, 129, 2, 48, "Output",ExpressionUUID->"4698ce04-a48e-42aa-9d69-5502a52fc104"]
}, Open  ]],
Cell[1234382, 23531, 1038, 22, 122, "Text",ExpressionUUID->"7333cf7b-89a6-4b33-bb6f-20fc173ba752"],
Cell[1235423, 23555, 533, 16, 48, "Input",ExpressionUUID->"23984dfd-c0e1-4092-ae6d-bafca4279040"],
Cell[CellGroupData[{
Cell[1235981, 23575, 389, 11, 28, "Input",ExpressionUUID->"e45179e5-a028-41be-8c51-a338c022634c"],
Cell[1236373, 23588, 87421, 1424, 269, "Output",ExpressionUUID->"a412f9e3-87f6-48c0-ba99-f35765f2999c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1323831, 25017, 372, 11, 28, "Input",ExpressionUUID->"eb515441-ec41-4857-a761-381eff69a8f9"],
Cell[1324206, 25030, 119, 1, 65, "Output",ExpressionUUID->"36478904-5139-4daf-bcba-6faaef19a4dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1324362, 25036, 238, 6, 28, "Input",ExpressionUUID->"9dbd9875-c2a4-422d-a884-003c0a0c0772"],
Cell[1324603, 25044, 195, 5, 32, "Output",ExpressionUUID->"e514f7c7-9547-4711-b902-cd18c485dcc9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1324835, 25054, 288, 8, 28, "Input",ExpressionUUID->"324fc693-9aef-4149-bc7d-ca2fa5cd8c51"],
Cell[1325126, 25064, 220, 5, 32, "Output",ExpressionUUID->"a72ee390-3d25-45cb-acdb-ae6b3681a19e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1325383, 25074, 916, 29, 86, "Input",ExpressionUUID->"d25ffaf8-ce22-4d7f-b5c9-be0bf23a1c69"],
Cell[CellGroupData[{
Cell[1326324, 25107, 143, 3, 59, "Print",ExpressionUUID->"aeb785de-0246-45ba-afa7-c1af78bdbbc6",
 CellTags->"Info503749838866-8646852"],
Cell[1326470, 25112, 1611, 46, 43, "Print",ExpressionUUID->"8225d689-0347-47c7-a64a-022daff66558",
 CellTags->"Info503749838866-8646852"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1328130, 25164, 336, 9, 28, "Input",ExpressionUUID->"c74ebcf1-7be3-474a-922b-aadb3099372e"],
Cell[1328469, 25175, 590, 17, 309, "Output",ExpressionUUID->"3e031998-1dbb-496f-af6e-f0d41e9d6206"]
}, Open  ]],
Cell[1329074, 25195, 493, 7, 100, "Text",ExpressionUUID->"b96bc061-3022-4b61-88ff-ea5d8153ed7d"],
Cell[1329570, 25204, 709, 10, 166, "Text",ExpressionUUID->"dfaf2693-7608-4f61-88f1-95899721f02d"]
}, Open  ]]
}
]
*)

