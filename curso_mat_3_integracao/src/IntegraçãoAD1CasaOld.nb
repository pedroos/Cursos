(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    839363,      17537]
NotebookOptionsPosition[    825228,      17327]
NotebookOutlinePosition[    825801,      17349]
CellTagsIndexPosition[    825758,      17346]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "Mostre que ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        FractionBox["2", 
         SuperscriptBox["x", "3"]], "+", 
        FractionBox["3", 
         SuperscriptBox["x", "2"]], "+", 
        FractionBox["5", "x"]}], ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{"-", "1"}], 
      SuperscriptBox["x", "2"]], "-", 
     FractionBox["3", "x"], "+", 
     RowBox[{"5", " ", "ln", 
      RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+", 
     "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"d4cfb6dd-b43a-4ad6-9ebb-423b7a186571"],
 "."
}], "ItemNumbered",ExpressionUUID->"c947992e-5b51-42ac-9e23-1284b6e23c6c"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["2", 
        SuperscriptBox["x", "3"]], "+", 
       FractionBox["3", 
        SuperscriptBox["x", "2"]], "+", 
       FractionBox["5", "x"]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      FractionBox["2", 
       SuperscriptBox["x", "3"]]}], "+", 
     RowBox[{"\[Integral]", 
      FractionBox["3", 
       SuperscriptBox["x", "2"]]}], "+", 
     RowBox[{"\[Integral]", 
      FractionBox["5", "x"]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{"2", "\[CenterDot]", 
        FractionBox["1", 
         SuperscriptBox["x", "3"]]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{"3", "\[CenterDot]", 
        FractionBox["1", 
         SuperscriptBox["x", "2"]]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{"5", "\[CenterDot]", 
        FractionBox["1", "x"]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"2", 
        RowBox[{"\[Integral]", 
         FractionBox["1", 
          SuperscriptBox["x", "3"]]}]}], "+", 
       RowBox[{"3", 
        RowBox[{"\[Integral]", 
         FractionBox["1", 
          SuperscriptBox["x", "2"]]}]}], "+", 
       RowBox[{"5", 
        RowBox[{"\[Integral]", 
         FractionBox["1", "x"]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"2", 
         RowBox[{"\[Integral]", 
          SuperscriptBox["x", 
           RowBox[{"-", "3"}]]}]}], "+", 
        RowBox[{"3", 
         RowBox[{"\[Integral]", 
          SuperscriptBox["x", 
           RowBox[{"-", "2"}]]}]}], "+", 
        RowBox[{"5", " ", "ln", 
         RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
        "+", "C"}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"2", " ", 
          FractionBox[
           SuperscriptBox["x", 
            RowBox[{"-", "2"}]], 
           RowBox[{"-", "2"}]]}], "+", "C", "+", 
         RowBox[{"3", " ", 
          FractionBox[
           SuperscriptBox["x", 
            RowBox[{"-", "1"}]], 
           RowBox[{"-", "1"}]]}], "+", "C", "+", 
         RowBox[{"5", "ln", 
          RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
         "+", "C"}], "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"2", " ", 
           FractionBox["1", 
            SuperscriptBox["x", "2"]], " ", 
           FractionBox["1", 
            RowBox[{"-", "2"}]]}], "+", 
          RowBox[{"3", " ", 
           FractionBox[
            RowBox[{"-", "1"}], "x"]}], "+", 
          RowBox[{"5", " ", "ln", 
           RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
          "+", "C"}], "=", "\[IndentingNewLine]", 
         RowBox[{
          FractionBox["1", 
           RowBox[{"-", 
            SuperscriptBox["x", "2"]}]], "-", 
          FractionBox["3", "x"], "+", 
          RowBox[{"5", "ln", 
           RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
          "+", 
          RowBox[{"C", 
           StyleBox[".",
            FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"4f8cda60-f343-4dd3-b45f-cec2810479e7"]], "Text",\
ExpressionUUID->"702f76f4-d5ac-4f55-8ddb-582e9054190f"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"ln", " ", "x"}], ")"}], "'"}], "=", 
    FractionBox["1", "x"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"f6bbf9fe-2de6-4c7a-9711-e3468fb05766"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      SuperscriptBox["x", "n"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["x", 
       RowBox[{"n", "+", "1"}]], 
      RowBox[{"n", "+", "1"}]], "+", "C"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"ec98b256-8be8-483f-a87e-bfe0bcf9f87d"],
 "."
}], "Text",ExpressionUUID->"5d04507a-650e-4e47-8c4a-ae9dcdc7822f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", 
       RowBox[{"2", 
        SuperscriptBox["x", "2"]}]]}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Log", "[", "x", "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Log", "[", 
      SuperscriptBox["x", "3"], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"2", " ", 
    FractionBox[
     SuperscriptBox["x", 
      RowBox[{"-", "2"}]], 
     RowBox[{"-", "2"}]]}], ",", 
   RowBox[{"2", " ", 
    FractionBox[
     RowBox[{"-", "2"}], 
     SuperscriptBox["x", "2"]]}]}], "}"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"b624652e-314d-4cf8-b9f0-ae3acd9a5a72"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", 
    SuperscriptBox["x", "3"]], ",", 
   FractionBox["1", "x"], ",", 
   FractionBox["3", "x"], ",", 
   RowBox[{"-", 
    FractionBox["1", 
     SuperscriptBox["x", "2"]]}], ",", 
   RowBox[{"-", 
    FractionBox["4", 
     SuperscriptBox["x", "2"]]}]}], "}"}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"f50faa5d-ab6b-40f6-a838-24bef14b601c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Resolva as integrais e assinale V ou F.", "ItemNumbered",ExpressionUUID->"6152c1b5-d8c4-4739-9872-709355530649"],

Cell[TextData[{
 "Uma fun\[CCedilla]\[ATilde]o primitiva de ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    SuperscriptBox["\[ExponentialE]", 
     FractionBox["x", "2"]]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"dfe57fc7-3af5-4e39-82d0-f7b3f8d3787c"],
 " \[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"F", 
     RowBox[{"(", "x", ")"}]}], "=", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox["x", "2"]]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"57109ec5-fed1-431d-afa3-ea834f136237"],
 "."
}], "SubitemNumbered",ExpressionUUID->"d06a3251-4cf5-4dab-8131-6e075c4e1b23"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     FractionBox["x", "2"]], "2"], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"b41dbf56-39f8-464c-b81f-707d6c4ce5bb"],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"x", "/", "2"}]], "4"]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"65d19d0a-e52b-4340-9be7-648809a55ae3"]
}, Open  ]],

Cell[TextData[{
 "Verdadeiro. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]]}], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{
       RowBox[{"(", 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox["x", "2"]], ")"}], "'"}]}], "=", 
     RowBox[{
      FractionBox["1", "2"], 
      SuperscriptBox["\[ExponentialE]", 
       FractionBox["x", "2"]]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"632dcc73-0e0f-4197-95b3-12d4523a6d76"],
 "."
}], "Text",ExpressionUUID->"2293720a-f4e3-467d-9c34-fd23917e81c7"],

Cell[TextData[{
 StyleBox["Falso. ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]]}], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{
       RowBox[{"(", 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox["x", "2"]], ")"}], "'"}]}], "=", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]], " ", 
       RowBox[{
        RowBox[{"(", 
         FractionBox["x", "2"], ")"}], "'"}]}], "=", 
      RowBox[{
       RowBox[{
        FractionBox["1", "2"], 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox["x", "2"]], 
        FractionBox["1", "2"]}], "=", 
       RowBox[{
        FractionBox[
         StyleBox[
          SuperscriptBox["\[ExponentialE]", 
           FractionBox["x", "2"]],
          FontSize->18], "4"], "\[NotEqual]", 
        SuperscriptBox["e", 
         FractionBox["x", "2"]]}]}]}]}]}], TraditionalForm]],
  FontSize->24,
  FontColor->GrayLevel[0.5],
  Background->None,ExpressionUUID->"01f15a96-eabb-4243-a5eb-c556cd883d0f"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"b18733c3-8740-434d-9dfe-16e48650e4d8"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sin", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"3", " ", "cos", " ", 
      FractionBox["x", "3"]}], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"ce9db6ce-66d1-4e59-b1c2-561ce2dd6c55"],
 "."
}], "SubitemNumbered",ExpressionUUID->"c6f746c9-d4ef-4fde-8c69-943a444fd79d"],

Cell[TextData[{
 StyleBox["Falso. ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"-", "cos"}], " ", 
     FractionBox["x", "3"]}]}], TraditionalForm]],
  FontSize->24,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "8bf3ceb6-c74c-418f-9a3f-5c1f20f4884c"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"0e2230d3-55a5-467d-8330-4b27a7f66eb4"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"cos", "(", 
       FractionBox["x", "3"], ")"}]}], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"02902446-3475-47e4-93b9-f330312eb031"],
 ". S\[OAcute] se for a chain rule..."
}], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"11035450-1985-4099-8e0c-0127d66eee81"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"\[Integral]", 
      RowBox[{"sen", " ", 
       FractionBox["x", "3"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}],
     FontColor->GrayLevel[0.5]], 
    StyleBox["=",
     FontColor->GrayLevel[0.5]], 
    RowBox[{
     StyleBox[
      RowBox[{
       RowBox[{
        RowBox[{
         FractionBox["x", "3"], " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"sen", " ", "x"}], ")"}], "'"}]}], "+", 
        RowBox[{"sen", " ", "x", " ", 
         RowBox[{
          RowBox[{"(", 
           FractionBox["x", "3"], ")"}], "'"}]}]}], "=", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          FractionBox["x", "3"], "cos", " ", "x"}], "+", 
         RowBox[{"sen", " ", "x", " ", 
          FractionBox["1", "3"], " ", "1"}]}], "=", 
        RowBox[{
         RowBox[{
          FractionBox[
           RowBox[{
            RowBox[{"x", " ", "cos", " ", "x"}], "+", 
            RowBox[{"sen", " ", "x"}]}], "3"], 
          StyleBox[".",
           FontSize->14], 
          StyleBox[" ",
           FontSize->14], 
          StyleBox["N\[ATilde]o",
           FontSize->14]}], 
         StyleBox[" ",
          FontSize->14], 
         StyleBox[
          RowBox[{"\[EAcute]", "."}],
          FontSize->14]}]}]}],
      FontColor->GrayLevel[0.5]], 
     StyleBox[" ",
      FontSize->14], 
     StyleBox["Estou",
      FontSize->14], 
     StyleBox[" ",
      FontSize->14], 
     StyleBox["viajando",
      FontSize->14]}]}], 
   StyleBox[",",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox[
    RowBox[{
    "usando", " ", "regra", " ", "de", " ", "deriva\[CCedilla]\[ATilde]o", 
     " ", "na", " ", 
     RowBox[{"integra\[CCedilla]\[ATilde]o", "."}]}],
    FontSize->14]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"7804cc7b-b31e-4bed-bd7d-3ee3df8767ed"]], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"9a491549-c409-455d-a7d0-76faae6a53a7"],

Cell[TextData[{
 StyleBox["\[CapitalEAcute] por substitui\[CCedilla]\[ATilde]o. Em ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{"sen", " ", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"f9713b2b-484e-4b05-bd01-9ea8ff8d658d"],
 StyleBox[", \n",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "x", ")"}], "=", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b04a06bc-edbb-4da2-892d-f6e67b965d18"],
 StyleBox[" e ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{"sen", " ", "x"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"817f67e0-0749-4833-be34-5875efea7661"],
 StyleBox[".\n",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"g", "(", "x", ")"}], ")"}], "=", 
    RowBox[{"sen", " ", 
     FractionBox["x", "3"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"e78cc65d-eb0d-422e-89d8-f7ae90c468e7"],
 StyleBox[". Est\[AAcute] errado. Isto \[EAcute] a regra da cadeia, mas \
devemos identificar o ",
  FontColor->GrayLevel[0.5]],
 StyleBox["resultado",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox[" de uma regra da cadeia. Que \[EAcute] ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "'"}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"g", "(", "x", ")"}], ")"}], "\[CenterDot]", 
     RowBox[{"g", "'"}]}], 
    RowBox[{"(", "x", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "2e90224e-b6ff-449d-8a1d-262d7d65045c"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"232f2eb2-30b6-47f3-acea-d54f71671ff3"],

Cell[TextData[{
 StyleBox["N\[ATilde]o \[EAcute] substitui\[CCedilla]\[ATilde]o. \
\[CapitalEAcute] \[OpenCurlyDoubleQuote]por diferencial\
\[CloseCurlyDoubleQuote] (por partes). ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"v", "\[CenterDot]", 
      RowBox[{"\[DifferentialD]", "u"}]}]}], "=", 
    RowBox[{"\[Integral]", 
     RowBox[{
      RowBox[{
       RowBox[{"g", "(", "x", ")"}], "\[CenterDot]", 
       RowBox[{"f", "'"}]}], 
      RowBox[{"(", "x", ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}]}]}], TraditionalForm]],
  FontSize->18,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "728d004e-31d4-450b-85db-eccea1300e35"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"1e58e1b1-0d82-4451-9b3f-2f3ff00c65fd"],

Cell[TextData[{
 "N\[ATilde]o \[EAcute]. \[CapitalEAcute] por substitui\[CCedilla]\[ATilde]o, \
\[OpenCurlyDoubleQuote]com diferencial\[CloseCurlyDoubleQuote] (",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"6c8712ac-22ef-49fe-bfbc-7296e906f496"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[DifferentialD]", "u"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b146dcba-c12a-4258-a182-60c8ccd8ec5d"],
 ")."
}], "Text",ExpressionUUID->"152ab94d-ec99-41be-a5ac-23ca864b439f"],

Cell[TextData[{
 "Em ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sen", " ", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"84634859-2917-4076-85cb-b1933638d6fa"],
 ", procurar uma fun\[CCedilla]\[ATilde]o que multiplique sua derivada... \
Resolvido em ",
 StyleBox["Integra\[CCedilla]\[ATilde]o", "Input"],
 "."
}], "Text",ExpressionUUID->"2c4adf54-1456-40b2-9805-1e065974431f"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"u", "=", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"1e8c94b8-0b18-4996-9fe4-e6a39edc093b"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[DifferentialD]", "u"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{"\[DifferentialD]", 
        FractionBox["x", "3"]}], 
       RowBox[{"\[DifferentialD]", "x"}]], 
      RowBox[{"\[DifferentialD]", "x"}]}], "=", 
     RowBox[{
      FractionBox["1", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"86b52ed1-1d87-4b58-9250-2d6fc425fd6a"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"3", " ", "sen", " ", "u", 
       RowBox[{"\[DifferentialD]", "u"}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"3", 
       RowBox[{"\[Integral]", 
        RowBox[{"sen", " ", "u", 
         RowBox[{"\[DifferentialD]", "u"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"3", "\[CenterDot]", 
          RowBox[{"-", "cos"}]}], " ", "u"}], "+", "C"}], "=", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "3"}], "\[CenterDot]", "cos"}], " ", 
          FractionBox["x", "3"]}], "+", "C"}], "\[NotEqual]", 
        RowBox[{
         RowBox[{
          RowBox[{"3", "\[CenterDot]", "cos"}], " ", 
          FractionBox["x", "3"]}], "+", 
         RowBox[{"C", "."}]}]}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"62049318-68c4-468c-a1d1-6895602fd049"]
}], "Text",ExpressionUUID->"e4bb1c93-95b7-4bbd-9433-9bf92b3918c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cos", "[", 
       FractionBox["x", "3"], "]"}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"3", " ", 
      RowBox[{"Cos", "[", 
       FractionBox["x", "3"], "]"}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Cos", "[", 
      FractionBox["x", "3"], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", 
      RowBox[{"Cos", "[", 
       FractionBox["x", "3"], "]"}]}], ",", "x"}], "]"}]}], "}"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"5b60e978-c786-4a88-999c-8932d9c745f4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"Sin", "[", 
     FractionBox["x", "3"], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", 
     FractionBox["x", "3"], "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "3"]}], " ", 
    RowBox[{"Sin", "[", 
     FractionBox["x", "3"], "]"}]}], ",", 
   RowBox[{"Sin", "[", 
    FractionBox["x", "3"], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"4a8e705f-8fd9-44c7-98a4-94df68203593"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integral of sen x/3 with respect to x", "WolframAlphaLong",
 CellLabel->"In[2]:=",ExpressionUUID->"4b393681-e82e-49db-81b2-e1dac6329db6"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integral of sen x/3 with respect to x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x/3], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"sin", "(", 
                    FractionBox["x", "3"], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"-", "3"}], " ", 
                    RowBox[{"cos", "(", 
                    FractionBox["x", "3"], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    FractionBox["x", "3"], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{"sin", "(", 
                    FractionBox["x", "3"], ")"}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    FractionBox["x", "3"]}], "\" \""}, "RowDefault"], 
                    "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    FractionBox["1", "3"]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"3", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"sin", "(", "u", ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    RowBox[{"sin", "(", "u", ")"}], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{
                    RowBox[{"-", 
                    RowBox[{"cos", "(", "u", ")"}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", 
                    RowBox[{"cos", "(", "u", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    FractionBox["x", "3"]}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", 
                    RowBox[{"cos", "(", 
                    FractionBox["x", "3"], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-3 Cos[x/3], {x, -20, 20}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2335$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2334$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2334$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2335$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1508823$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2334$\
1508828$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2335$1508829$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2335$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2334$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1508823$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2334$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2334$\
1508828$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2335$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2335$\
1508829$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1508801[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][(-3) 
                    Cos[Rational[1, 3] $CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2334$$], 
                    (
                    Piecewise[{{
                    0. + 21.158574045370194` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 21.158574045370194` Tan[1.5040801783846716` #]]& )\
[CalculateUtilities`GraphicsUtilities`Private`min2334$$], -19.7920337176157], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2334$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2335$$]], 
                    (
                    Piecewise[{{
                    0. + 21.158574045370194` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    21.158574045370194` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2334$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2335$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2334$$ + 
                    0.0395840674352314, 
                    CalculateUtilities`GraphicsUtilities`Private`max2335$$]], 
                    19.7920337176157]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-6) Pi, (-6) Pi}, {(-3) Pi, (-3) Pi}, {0, 
                    0}, {3 Pi, 3 Pi}, {6 Pi, 6 Pi}}, Automatic}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2334$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2335$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1508801]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1508801[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1508801[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEWUg7QsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+Gr1/\
s7Ay3HQzGMgatieRquy1knklQJOkh0A1j3jHg39zxcXn8VDAWku8F4RFRD413IiE2MIIDw3y8b73aT\
N3DxDTwGGR86TRZeY7aXqC0pDydkFmOb1xM1rAtMMhUOW7ul9ysU5AL/xY+\
EKGNyXls0vZsCfQL44rRd15W/5y7AZ7ftoWX4nQ1cZjfLkPeQNMTopbpfN66To6Rqmtt9HOuLmu+\
bDTIi6dM/b90RJVeDuNl2zDI7NjUeLX2luFftYUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH\
26KjcOh3G34jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb2q7uG4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-3 Cos[x/3], {x, -79, 79}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2337$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2336$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2337$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1508914$$ = 
                 False, 
                 CalculateUtilities`GraphicsUtilities`Private`min2336$1508915$\
$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2337$1508916$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2337$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2336$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1508914$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2336$\
1508915$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2337$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2337$\
1508916$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1508894[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][(-3) 
                    Cos[Rational[1, 3] $CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$], 
                    (
                    Piecewise[{{
                    0. + 84.63429618148078 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    84.63429618148078 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$], \
-79.1681348704628], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2337$$]], 
                    (
                    Piecewise[{{
                    0. + 84.63429618148078 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 84.63429618148078 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2337$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$ + 
                    0.1583362697409256, 
                    CalculateUtilities`GraphicsUtilities`Private`max2337$$]], 
                    79.1681348704628]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2336$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2337$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1508894]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1508894[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1508894[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNhgSfEACOhiTBpSkfO8tdhoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcpNfw9NCaoZzlshDk3UmuqNZMivQSPrtpTUzNLuXwgxLvu2rNe6lm\
YPz5Fb4PPCk4GPrVMM4Mo3qypyDPWKJrz0ixI/uTCZcJcPaTPt5+vvXi5daOh8FYRmAMVUI/\
awuZZwo0TXsIdMWatxzEN398UB4/FZzH9HtBRUL1PesdKyAWRgrgmE/\
wrRebqduYmAFBQJFzp8nJc9j2Am0UE9MxneX4xtlkbbcFBjXVnps7JTfrFOTDv44PZOxi8h6XtDs7A\
sPCuGD0nZbVP+dugOfXbeGVPF5NHOb3hiNvYNgR1ct0PmldJ89I1bUu+jlX5zVfNhrk2VOm/\
l86YNosh/G0bRh0dmhrvFp7y/A7beFljl0/F/\
ddaz57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMimlPrIo7bXTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyh2U8X6g4myb78UXEruZxqMuR9Xxg6pWqt6G9gfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0pVJfyLA5caU7Ck+\
iXBT6gYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DeSGuHY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[-3 Cos[x/3]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["3", "2"]}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}], ")"}], "/", 
                    "3"}]}]]}]}], "-", 
                   RowBox[{
                    FractionBox["3", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}], ")"}], "/", 
                    "3"}]]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-3 Cos[x/3], {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "6"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "648"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "3"}], ",", "0", ",", 
                    FractionBox["1", "6"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "648"]}]}], "}"}], ",", "0", ",", "6", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a half-period", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralOverAHalfPeriod", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x/3], {x, 0, 3 Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"3", " ", "\[Pi]"}]], 
                 RowBox[{
                   RowBox[{"sin", "(", 
                    FractionBox["x", "3"], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", "6"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralMeanSquare", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[Sin[x/3]^2/(6 Pi), {x, 0, 6 Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"6", " ", "\[Pi]"}]], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", 
                    FractionBox["x", "3"], ")"}], 
                    RowBox[{"6", " ", "\[Pi]"}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.107", 
    "parsetiming" -> "0.47700000000000004", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSPa384721gb25fge0d9a9cg000028c6fe7iaa49167h", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "39", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa384821gb25fge0d9a9cg0000150d597632a9ehd78033132334757625844", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 10, 5, 50.6276119`9.456962295020945}, "Line" -> 2,
     "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "Integral of sen x/3 with respect to x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {681., 688.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"b1a546a4-e279-48b7-83d0-\
cd045f72d37a"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       SuperscriptBox["x", "7"]}]}], " ", "-", 
     RowBox[{
      FractionBox["1", "3"], 
      SuperscriptBox["x", 
       FractionBox["1", "3"]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["x", "8"], "4"], "-", 
     FractionBox[
      SuperscriptBox["x", 
       FractionBox["4", "3"]], "4"], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"e768a3b2-4fb0-4d5b-ad34-831bdb6fe7d9"],
 "."
}], "SubitemNumbered",ExpressionUUID->"4fe30b17-d295-4784-84eb-ef9426846ee8"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"2", 
      SuperscriptBox["x", "7"]}]}], "-", 
    RowBox[{
     FractionBox["1", "3"], 
     SuperscriptBox["x", 
      FractionBox["1", "3"]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       SuperscriptBox["x", "7"]}]}], "-", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", "3"], 
       SuperscriptBox["x", 
        FractionBox["1", "3"]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"2", 
       RowBox[{"\[Integral]", 
        SuperscriptBox["x", "7"]}]}], "-", 
      RowBox[{
       FractionBox["1", "3"], 
       RowBox[{"\[Integral]", 
        RowBox[{
         SuperscriptBox["x", 
          FractionBox["1", "3"]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "8"], "8"]}], "-", 
       RowBox[{
        FractionBox["1", "3"], "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", 
          FractionBox["4", "3"]], 
         FractionBox["4", "3"]]}], "+", "C"}], "=", "\[IndentingNewLine]", 
      RowBox[{
       FractionBox[
        SuperscriptBox["x", "8"], "4"], "-", 
       FractionBox[
        SuperscriptBox["x", 
         FractionBox["4", "3"]], "4"], "+", 
       RowBox[{"C", 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"fe58dd65-9bc2-48ae-9c92-efa439bf2244"]], "Text",\
ExpressionUUID->"6498a802-7011-49ac-9da2-4080cde41c78"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      FractionBox["2", 
       RadicalBox["x", "3"]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["x", 
       FractionBox["2", "3"]], "3"], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"9c557cc9-8cf8-4b2c-b9f8-87a94c564f5e"],
 "."
}], "SubitemNumbered",ExpressionUUID->"2f5586da-f412-479c-833d-871040f48063"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      FractionBox["2", 
       RadicalBox["x", "3"]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       RowBox[{"2", "\[CenterDot]", 
        FractionBox["1", 
         SuperscriptBox["x", 
          FractionBox["1", "3"]]]}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"2", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["1", 
          SuperscriptBox["x", 
           FractionBox["1", "3"]]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"2", 
        RowBox[{"\[Integral]", 
         RowBox[{
          SuperscriptBox["x", 
           RowBox[{"-", 
            FractionBox["1", "3"]}]], 
          RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"2", "\[CenterDot]", 
          FractionBox[
           SuperscriptBox["x", 
            FractionBox["2", "3"]], 
           FractionBox["2", "3"]]}], "+", "C"}], "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"2", "\[CenterDot]", 
           SuperscriptBox["x", 
            FractionBox["2", "3"]], "\[CenterDot]", 
           FractionBox["3", "2"]}], "+", "C"}], "=", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"3", 
            SuperscriptBox["x", 
             FractionBox["2", "3"]]}], "+", "C"}], "\[NotEqual]", 
          RowBox[{
           FractionBox[
            SuperscriptBox["x", 
             FractionBox["2", "3"]], "3"], "+", 
           RowBox[{"C", 
            StyleBox[".",
             FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"e02afe1f-d8bf-4bd3-b62c-068e145cba85"],
 "."
}], "Text",ExpressionUUID->"12ee0428-3a39-48c8-b517-7bd647fd47da"],

Cell[CellGroupData[{

Cell[TextData[{
 "integral of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "/", 
    RadicalBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "e962bbf4-2e1b-4714-b8a8-7c59db0784cb"],
 " with respect to x"
}], "WolframAlphaLong",
 CellLabel->"In[3]:=",ExpressionUUID->"a9ed221c-ca90-4e11-88db-7fe9086473fd"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "integral of 2/Power[x, (3)^-1] with respect to x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[2/x^3^(-1), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox["2", 
                    RadicalBox["x", "3"]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"3", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", "/", "3"}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["2", 
                    RadicalBox["x", "3"]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Factor \"", "\"out \"", "\"constants:\""},
                     "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"2", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RadicalBox["x", "3"]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RadicalBox["x", "3"]], "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", "/", "3"}]]}], "2"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", "/", "3"}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[3 x^(2/3), {x, -0.69, 0.69}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max15936$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min15935$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5810421$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min15935$\
5810426$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max15936$\
5810427$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max15936$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min15935$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5810421$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15935$\
5810426$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max15936$\
5810427$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399[
                    Plot[{
                    Re[3 $CellContext`x^Rational[2, 3]], 
                    Im[3 $CellContext`x^Rational[2, 3]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][3 $CellContext`x^Rational[2, 3], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], 
                    (
                    Piecewise[{{
                    0. + 0.74120451090379 Tan[1.5040801783846716` #], # < 0}},
                     0. + 0.74120451090379 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], \
-0.6933333333333332], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$]], 
                    (
                    Piecewise[{{
                    0. + 0.74120451090379 Tan[1.5040801783846716` #], # < 0}},
                     0. + 0.74120451090379 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$ + 
                    0.0013866666666666665`, 
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$]],
                     0.6933333333333332]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMKAyJL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozkvNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoT48+\
v8H3Ck4ITA18N48ww0NM9RfIZS3TtGSt2ZH8y5TIhnP2Exy9eDp/uDIceBmMZE2NACf28LWQ+\
U0RD2kOgK9a85UR888cH5fFTwXkM3wsQCeh71jtRhFoYKQjHfIJvvdhM3cbEDBGUKHruNDl5jtpeoI\
1iIpvAPMc3ziZr2BaYqEx7bu6U3GxSkA//Oj6QsYvJe1zS7uwIDAvjgtF3Wlb/nLsBnl+\
3hVfyeD1xmN8bjrwRw45Ar9L5pHWdPCNV17roF1yd13zZapBnT5n6f+\
mAabMaxrO2YcD80NZ4vfZW4Xfawsscu34h7rvWfPaOEnDdcKgE91HSgi+\
iaKY88BJtn67OrcNj3Kr4jtEZUsEKJ7Jxlv3i+uN+BV5vCjHWbroF6Yh6BkSQg3VRx+\
0uy5gZzYgiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUKzny7VnZhk9uWPilvJ5VSTIe/\
7wkAGaqPob2B9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRStadQXcqzOHClOQlPol8W+ABEZmbNHTtwdAW3LWYTyeNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/QbkFS4Pg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[3 x^(2/3), {x, -4.9, 4.9}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max15938$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min15937$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5810512$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min15937$\
5810513$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max15938$\
5810514$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max15938$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min15937$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5810512$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15937$\
5810513$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max15938$\
5810514$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492[
                    Plot[{
                    Re[3 $CellContext`x^Rational[2, 3]], 
                    Im[3 $CellContext`x^Rational[2, 3]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][3 $CellContext`x^Rational[2, 3], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], 
                    (
                    Piecewise[{{
                    0. + 5.18843157632653 Tan[1.5040801783846716` #], # < 0}},
                     0. + 5.18843157632653 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], \
-4.853333333333333], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$]], 
                    (
                    Piecewise[{{
                    0. + 5.18843157632653 Tan[1.5040801783846716` #], # < 0}},
                     0. + 5.18843157632653 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$ + 
                    0.009706666666666666, 
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$]],
                     4.853333333333333]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[CalculateUtilities`GraphicsUtilities`Private`lines, 
                    Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === L\
ength[CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtsEkviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn+6+3N7a3drxMBjLCIyhSujnbSHzTIGmaQ+\
BrlnzloP45o+PyuOngvOYfi+oSKh+YL1jBcTCSAEc8wm+\
9XIzdRcTMyAIKHLhNDl5DtteoI1iYjqmsxzfOJ+s7bbAoKbac3Ov5Gadgnz4N/\
GBjF1M3uOSdmdHYFgYl4y+s7L659wN8Py6LbySJ6uJw/zecOQNDDumepnOZ63r5BmputZFP+\
fqoubLRoM8f8rU/0uHTJvlMHbahkFnR7bGq7W3DP+\
iLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AQouuEY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.1380000000000001", "parsetiming" -> "0.642", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa95414f26hdgeg0c95ga0000541ib3fiid5fi1f6", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "30", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa95514f26hdgeg0c95ga0000508780ca2c5dc9af4363898531936319487", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 19, 0, 6.7466439`8.581662760711097}, "Line" -> 3, 
    "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "integral of 2/Power[x, (3)^-1] with respect to x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {452., 459.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"7ad1327b-d985-4332-adc0-\
0bddfe2fb675"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", "x", " ", "cos", " ", "x", " ", 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox["sen", "2"], " ", "x"}], "2"], "+", "C"}]}], 
   TraditionalForm]],
  FontSize->24,ExpressionUUID->"5cd78637-8626-481a-9f9e-385b7723ccca"],
 "."
}], "SubitemNumbered",ExpressionUUID->"5d0a10ea-870f-43f2-8345-1b62196bb28e"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"u", "=", 
     RowBox[{"sen", " ", "x"}]}], ",", " ", 
    RowBox[{
     RowBox[{"\[DifferentialD]", "u"}], "=", 
     RowBox[{"cos", " ", "x", 
      RowBox[{"\[DifferentialD]", "x"}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"3a6a754c-d702-4486-8ff6-095aed42f9b8"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", "x", " ", "cos", " ", "x", 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"u", 
       RowBox[{"\[DifferentialD]", "u"}]}]}], "=", 
     RowBox[{
      RowBox[{
       FractionBox[
        SuperscriptBox["u", "2"], "2"], "+", "C"}], "=", 
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox["sen", "2"], "x"}], "2"], "+", "C"}]}]}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"dfbd6636-e375-4d82-921a-19dfb5082edb"],
 "."
}], "Text",ExpressionUUID->"0887d663-99d2-4d06-b6fd-e68487ebb8fb"],

Cell[TextData[{
 StyleBox["A integral de ",
  Background->RGBColor[0.87, 0.94, 1]],
 Cell[BoxData[
  FormBox[
   RowBox[{"u", 
    RowBox[{"\[DifferentialD]", "u"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  Background->RGBColor[0.87, 0.94, 1],ExpressionUUID->
  "a43a4bd8-f13e-44f9-bbdf-40f533f2fbb5"],
 StyleBox[" n\[ATilde]o \[EAcute] ",
  Background->RGBColor[0.87, 0.94, 1]],
 Cell[BoxData[
  FormBox["u", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  Background->RGBColor[0.87, 0.94, 1],ExpressionUUID->
  "c8fc7c39-c9f7-4682-8854-d39fa661059c"],
 StyleBox[". \[CapitalEAcute] ",
  Background->RGBColor[0.87, 0.94, 1]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      SuperscriptBox["u", "n"], 
      RowBox[{"\[DifferentialD]", "u"}]}]}], "=", 
    FractionBox[
     SuperscriptBox["u", 
      RowBox[{"n", "+", "1"}]], 
     RowBox[{"n", "+", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  Background->RGBColor[0.87, 0.94, 1],ExpressionUUID->
  "bd69e377-aab8-4aea-b298-547030c2a64c"],
 StyleBox[".",
  Background->RGBColor[0.87, 0.94, 1]]
}], "Text",ExpressionUUID->"e8333cc7-71ee-4842-bb2e-d271de325a2e"],

Cell[TextData[{
 "N\[ATilde]o concordo com o Alpha abaixo. Porqu\[EHat] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"u", "=", 
    RowBox[{"cos", " ", "x"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"9ed1b6ae-4990-434f-9a99-48bab76fc7c8"],
 " e n\[ATilde]o ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sen", " ", "x"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"23ad0fe9-f70c-4ac3-bc67-a7c5611849a9"],
 "?"
}], "Text",ExpressionUUID->"94e751f7-165b-48fc-bfe8-92baf6ebac9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], " ", 
   RowBox[{"Cos", "[", "x", "]"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"ea20b09c-9d03-4798-a290-6619c0c42d51"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", "2"]}], " ", 
  SuperscriptBox[
   RowBox[{"Cos", "[", "x", "]"}], "2"]}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"0875b676-7795-449b-8bce-c209f0594059"]
}, Open  ]],

Cell[CellGroupData[{

Cell["integral of sen(x)*cos(x) with respect to x", "WolframAlphaLong",
 CellLabel->"In[5]:=",ExpressionUUID->"69b9f31a-fd60-454d-a53d-7f3dfe9d1eb1"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "integral of sen(x)*cos(x) with respect to x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x] Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\" \""}, "RowDefault"],
                     "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    RowBox[{"-", 
                    RowBox[{"sin", "(", "x", ")"}]}]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{"u", 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{"u", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FractionBox[
                    SuperscriptBox["u", "2"], "2"], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox["u", "2"], "2"]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-Cos[x]^2/2, {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4176$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4175$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1956957$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4175$\
1956962$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4176$1956963$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4176$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4175$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1956957$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4175$\
1956962$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4176$\
1956963$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[-1, 2] Cos[$CellContext`x]^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, 
                    PlotRange -> {0.005, -0.505}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNBigfUACOhiTBpSkfK8XXxoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJnLNG1Z6TYkf3JhMuEcPYTHm/tPH+xs/\
3Sw2AsI2IMKKGftYXMM0U0pD0EumLNW07EN398UB4/FZzH8L0AkYC+\
Z71jRaiFkYJwzCf41ovN1G1MzBBBiaLnTpOT57DtBdooJqZjmOX4xtlkbbUFJmqqPTd3Sm7WKciHfx\
0fyNjF5D0uaXd2BIaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+\
bDTIs6dM/b90wLRZDuNp2zBgdmhrvFp7y/DbbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l02ZGWZEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5Mkn35o+JWcjnVZMj7vjAwBbVW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DY7JuOY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-Cos[x]^2/2, {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4178$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4177$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1957048$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4177$\
1957049$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4178$1957050$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4178$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4177$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1957048$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4177$\
1957049$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4178$\
1957050$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[-1, 2] Cos[$CellContext`x]^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {0.005, -0.505}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMGAMBH5CADsakASUp3+\
vFl9TCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z04kFHa7/V6+\
qI1HySn6RU83bdmKGe5LAR9d5wr0JpJkV7AZ9eticHsACc/\
gHrfZWveSzUjxp9f4fuEJwUnBr4axplhoCe7iuRTlujaM1Ls0P5kwmVCOPsJD7dePnv+\
ePuFh8FYRsQYUEJvt4XMp4poSHsIdMmat5yIb/54rzx+KjiP4XsBIgF9x3rHilALIwXhmE/\
wreebqZuYmCGCEkXPnCYnz2HbC7RRTGRjmOX4xulkbbUFJirTnptbJTfrFOTDv4oPZOxi8h6XtDs7A\
sPCOGf0nZTVP+dugOfXbeGVPFpNHOb3hiNvxLBD0Mt0PmpdJ89I1bUu+jlXZzVfNhrk6VOm/l/\
aZ9osh/GkbRgwO7A1Xq29ZfinbeFljl0/F/\
dtaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5UfMfoDKlghRPZOMt+\
cf1xtwKvN4UYazfZgHREPQMiyMG6qON2h2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2UsX6k5MMv3yR8Wt5HKiyZD3PWEgA7VW9NewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpVqC7lWRy40hyHJ9EvC7wPIjPT5o4dOLqC2xazieRRrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6Db/1uKY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigReduce[-Cos[x]^2/2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   FractionBox["1", "4"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}]}], "-", "1"}], ")"}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[-Cos[x]^2/2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "x"}]]}]}],
                    "-", 
                   RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "x"}]]}], "-", 
                   RowBox[{
                    FractionBox["1", "4"]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-Cos[x]^2/2, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "2"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "6"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "5"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0", ",", 
                    FractionBox["1", "2"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "6"]}]}], "}"}], ",", "0", ",", "5", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a half-period", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralOverAHalfPeriod", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[x] Sin[x], {x, 0, Pi/2}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["\[Pi]", "2"]], 
                 RowBox[{
                   RowBox[{
                    RowBox[{"cos", "(", "x", ")"}], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralMeanSquare", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[(Cos[x]^2 Sin[x]^2)/Pi, {x, 0, Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}]}], "\[Pi]"], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "8"], Identity], "\[LongEqual]", 
              TagBox["0.125`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.8880000000000001", "parsetiming" -> "0.855", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa27951c898h120ce1ih3000001ch98728c54a9hbi", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "41", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa27961c898h120ce1ih3000005g757bd3f391f0081770361261367161273", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 19, 18, 41.7634193`9.373370925810365}, "Line" -> 
    5, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "integral of sen(x)*cos(x) with respect to x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {709., 716.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"7684dbce-54c6-4a60-a1f7-\
ba5fc0e2d529"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calcule as integrais.", "ItemNumbered",ExpressionUUID->"95e34129-4a89-49a7-90aa-802286cebc82"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"4", 
        SuperscriptBox["x", "3"]}], "-", 
       RowBox[{"6", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"10", "x"}], "+", "2"}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"603e1cb7-f777-4ff3-adc7-3eb7cf42d48e"],
 "."
}], "SubitemNumbered",ExpressionUUID->"47aa9785-5318-4711-beb3-d69da05fe754"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"4", 
      SuperscriptBox["x", "3"]}]}], "-", 
    RowBox[{"6", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"10", "x"}], "+", 
    RowBox[{"2", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"4", 
       SuperscriptBox["x", "3"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "-", 
     RowBox[{"\[Integral]", 
      RowBox[{"6", 
       SuperscriptBox["x", "2"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"10", "x", 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"4", 
       RowBox[{"\[Integral]", 
        RowBox[{
         SuperscriptBox["x", "3"], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
      RowBox[{"6", 
       RowBox[{"\[Integral]", 
        RowBox[{
         SuperscriptBox["x", "2"], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
      RowBox[{"10", 
       RowBox[{"\[Integral]", 
        RowBox[{"x", 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
      RowBox[{"2", "x"}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"4", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "4"], "4"]}], "+", "C", "-", 
       RowBox[{"6", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "3"], "3"]}], "+", "C", "+", 
       RowBox[{"10", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "2"], "2"]}], "+", "C", "+", 
       RowBox[{"2", "x"}], "+", "C"}], "=", "\[IndentingNewLine]", 
      RowBox[{
       SuperscriptBox["x", "4"], "-", 
       RowBox[{"2", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"5", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"2", "x"}], "+", 
       RowBox[{"C", 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"e0a5074b-7851-456a-8139-49bbc8ba2f9f"]], "Text",\
ExpressionUUID->"c5888815-9886-4453-ae17-9778430b5d0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"4", 
      SuperscriptBox["x", "3"]}], "-", 
     RowBox[{"6", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"10", "x"}], "+", "2"}], ")"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"6e17b4e1-c17f-43b4-85de-dbc76bfed323"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "x"}], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["x", "2"]}], "-", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "3"]}], "+", 
  SuperscriptBox["x", "4"]}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"df4a7c56-2f4b-45cc-851d-0d5ddc31abf7"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       FractionBox["1", "x"], "+", 
       FractionBox["1", 
        SuperscriptBox["x", "2"]]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"fdfdc288-7387-4caf-ac8f-6d1e4d33701f"],
 "."
}], "SubitemNumbered",ExpressionUUID->"5689158e-d0af-484c-b135-9e811571df4c"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     SuperscriptBox["x", "2"]}], "+", 
    FractionBox["1", "x"], "+", 
    RowBox[{
     FractionBox["1", 
      SuperscriptBox["x", "2"]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       SuperscriptBox["x", "2"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", "x"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", 
        SuperscriptBox["x", "2"]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      FractionBox[
       SuperscriptBox["x", "3"], "3"], "+", "C", "+", 
      RowBox[{"ln", 
       RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+", 
      "C", "+", 
      RowBox[{"\[Integral]", 
       RowBox[{
        SuperscriptBox["x", 
         RowBox[{"-", "2"}]], 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       FractionBox[
        SuperscriptBox["x", "3"], "3"], "+", 
       RowBox[{"ln", 
        RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+",
        "C", "+", 
       FractionBox[
        SuperscriptBox["x", 
         RowBox[{"-", "1"}]], 
        RowBox[{"-", "1"}]], "+", "C"}], "=", "\[IndentingNewLine]", 
      RowBox[{
       FractionBox[
        SuperscriptBox["x", "3"], "3"], "+", 
       RowBox[{"ln", 
        RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "-", 
       FractionBox["1", "x"], "+", 
       RowBox[{"C", 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"5e36d6d3-5542-4c0a-a0e8-f2cca3eaca42"]], "Text",\
ExpressionUUID->"26b34f26-eaa0-4d1d-ab43-fe4b81602bc5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   SuperscriptBox["x", 
    RowBox[{"-", "1"}]], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"326ae6cb-9fa9-437f-bb51-2f366ef0fe5e"],

Cell[BoxData[
 RowBox[{"Log", "[", "x", "]"}]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"970a4a9d-6c20-404e-979b-33860b6814c5"]
}, Open  ]],

Cell[TextData[{
 "Cai no ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     FractionBox[
      RowBox[{"\[DifferentialD]", "x"}], "x"]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", "x"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
     RowBox[{
      RowBox[{"ln", 
       RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+", 
      "C"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"f9b1a418-991f-4744-b906-44ec1a7b2d59"],
 "."
}], "Text",ExpressionUUID->"5e31ed44-25c9-49b7-868d-459850a1363a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     FractionBox["1", "x"], "+", 
     FractionBox["1", 
      SuperscriptBox["x", "2"]]}], ")"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"1320fccd-02e7-410f-a8ad-9910b7833674"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", "x"]}], "+", 
  FractionBox[
   SuperscriptBox["x", "3"], "3"], "+", 
  RowBox[{"Log", "[", "x", "]"}]}]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"94abe28e-b2b4-4245-9ce5-5d0c6a0602c7"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    FractionBox[
     RowBox[{"x", " ", 
      RowBox[{"\[DifferentialD]", "x"}]}], 
     RadicalBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", "1"}], "3"]]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"e4aab273-0e46-4ab5-ba7e-cba278ea365a"],
 "."
}], "SubitemNumbered",ExpressionUUID->"ae318266-bcf0-431c-addb-b9e0520a620f"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"\[Integral]", 
    FractionBox[
     RowBox[{"x", 
      RowBox[{"\[DifferentialD]", "x"}]}], 
     RadicalBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", "1"}], "3"]]}], "=", 
   RowBox[{"\[Integral]", 
    RowBox[{
     FractionBox["x", 
      RadicalBox[
       RowBox[{
        SuperscriptBox["x", "2"], "+", "1"}], "3"]], 
     RowBox[{
      RowBox[{"\[DifferentialD]", "x"}], 
      StyleBox[".",
       FontSize->14]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"1a560a0a-bd77-468c-bcbe-c9d4ee1248fd"]], "Text",\
ExpressionUUID->"e6ebf761-470c-4756-825d-a74b447e1ca6"],

Cell["\<\
O denominador n\[ATilde]o \[EAcute] um polin\[OHat]mio. N\[ATilde]o \[EAcute] \
por fra\[CCedilla]\[OTilde]es parciais. Pulando.\
\>", "Text",ExpressionUUID->"2a813ab6-89ca-4204-a432-3c5b88646eb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Expand", "@", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"a", "+", "b"}], ")"}], "2"]}], ",", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"Expand", "@", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", "b"}], ")"}]}], ")"}], 
    FractionBox["1", "3"]]}], "}"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"5f8e8f29-2bb8-4f87-919f-1c9022180b61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SuperscriptBox["a", "2"], "+", 
    RowBox[{"2", " ", "a", " ", "b"}], "+", 
    SuperscriptBox["b", "2"]}], ",", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["a", "2"], "+", "b"}], ")"}], 
    RowBox[{"1", "/", "3"}]]}], "}"}]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"8a0ea3ca-2aa0-4c29-a39d-b4dca8245768"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RadicalBox[
     RowBox[{
      SuperscriptBox["x", "2"], "+", "1"}], "3"], "\[Equal]", "0"}], ",", 
   "x"}], "]"}]], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"3b8fdd37-d3ae-4a47-b18c-467bc032c267"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "\[ImaginaryI]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "\[ImaginaryI]"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"64de91bf-ae7c-425c-b284-650f3d7e9ba2"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{"x", " ", "sen", " ", "5", "x", " ", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"2a7e7084-d826-47a5-b60c-8500cb71f39f"],
 "."
}], "SubitemNumbered",ExpressionUUID->"cc131665-69b9-4696-b6e5-b03c60b85081"],

Cell[TextData[{
 "Como ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"f", "(", 
       RowBox[{"g", "(", "x", ")"}], ")"}], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{"f", "'"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"g", "(", "x", ")"}], ")"}], "\[CenterDot]", 
      RowBox[{"g", "'"}]}], 
     RowBox[{"(", "x", ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"73d30d47-7bd6-4ce4-9c7a-12e73b15b7b9"],
 ", \nou ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{"f", "'"}], 
     RowBox[{"(", 
      RowBox[{"g", "(", "x", ")"}], ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"5e78df8d-386a-4ffc-827a-ad84c3ec5fce"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"sen", " ", "5", "x"}], "=", 
    RowBox[{
     RowBox[{"g", "'"}], 
     RowBox[{"(", "x", ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"af0a99a6-64b5-4c21-be21-c53127f1afbb"],
 " \nou ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{"g", "'"}], 
     RowBox[{"(", "x", ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"0d80923e-0554-47b4-aaa4-1f8a72ff8bde"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"sen", " ", "5", "x"}], "=", 
    RowBox[{
     RowBox[{"f", "'"}], 
     RowBox[{"(", 
      RowBox[{"g", "(", "x", ")"}], ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"3692b208-1021-4d1e-a90a-c9e435947dc2"],
 ".\nNo primeiro caso, (...)"
}], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"efcbdf10-bafb-46b4-a94f-ef85a1986e96"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"u", "=", "x"}], ",", " ", 
   RowBox[{
    RowBox[{"\[DifferentialD]", "v"}], "=", 
    RowBox[{
     RowBox[{"sen", " ", "5", "x", 
      RowBox[{
       RowBox[{"\[DifferentialD]", "x"}], 
       StyleBox[".",
        FontSize->14], "\[IndentingNewLine]", 
       RowBox[{"\[Integral]", 
        RowBox[{"u", " ", 
         RowBox[{"\[DifferentialD]", "v"}]}]}]}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"u", " ", "v"}], "-", 
        RowBox[{"\[Integral]", 
         RowBox[{"v", " ", 
          RowBox[{"\[DifferentialD]", "u"}]}]}]}], "\[Implies]", 
       "\[IndentingNewLine]", 
       RowBox[{"\[Integral]", 
        RowBox[{"x", " ", "sen", " ", "5", "x", 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"x", "\[CenterDot]", "sen"}], " ", "5", "x"}], "-", 
        RowBox[{"\[Integral]", 
         RowBox[{
          FractionBox[
           RowBox[{
            RowBox[{"\[DifferentialD]", " ", "sen"}], " ", "5", "x"}], 
           RowBox[{"\[DifferentialD]", "x"}]], " ", 
          RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"x", "\[CenterDot]", "sen"}], " ", "5", "x"}], "-", 
         RowBox[{"\[Integral]", 
          RowBox[{"cos", " ", "5", "x", 
           RowBox[{
            RowBox[{"\[DifferentialD]", "x"}], 
            StyleBox[".",
             FontSize->14], "\[IndentingNewLine]", "u"}]}]}]}], "=", 
        RowBox[{"5", "x"}]}]}]}]}]}], 
   StyleBox[",",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   RowBox[{
    RowBox[{"\[DifferentialD]", "u"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"5", "x"}], ")"}], "'"}], 
      RowBox[{"\[DifferentialD]", "x"}]}], "=", 
     RowBox[{
      RowBox[{"5", 
       RowBox[{
        RowBox[{"\[DifferentialD]", "x"}], 
        StyleBox[".",
         FontSize->14], "\[IndentingNewLine]", 
        RowBox[{"\[Integral]", 
         RowBox[{"cos", " ", "5", "x", 
          RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
      RowBox[{
       RowBox[{"\[Integral]", 
        FractionBox[
         RowBox[{"cos", " ", "u", 
          RowBox[{"\[DifferentialD]", "u"}]}], "5"]}], "=", 
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{"sen", " ", "5", "x"}], "5"], "+", 
         RowBox[{
          RowBox[{
           RowBox[{"C", 
            StyleBox[".",
             FontSize->14], "\[IndentingNewLine]", "x"}], "\[CenterDot]", 
           "sen"}], " ", "5", "x"}], "-", 
         RowBox[{"\[Integral]", 
          RowBox[{"cos", " ", "5", "x", 
           RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"x", "\[CenterDot]", "sen"}], " ", "5", "x"}], "-", 
         FractionBox[
          RowBox[{"sen", " ", "5", "x"}], "5"], "+", 
         RowBox[{"C", 
          StyleBox[".",
           FontSize->14]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"919aa9da-2153-41e3-9d6c-6b36b5394902"]], "Text",\
ExpressionUUID->"2cfad53a-a9cf-44e6-bf8f-36405c82c194"],

Cell["Esta estou deixando incorreta, a resposta n\[ATilde]o est\[AAcute] \
batendo.", "Text",ExpressionUUID->"3218ade7-e20e-4cd1-81c2-73554452d399"],

Cell[TextData[Cell[BoxData[
 FormBox[
  StyleBox[
   RowBox[{
    StyleBox[
     RowBox[{
      FractionBox["1", "25"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"sin", "(", 
         RowBox[{"5", " ", "x"}], ")"}], "-", 
        RowBox[{"5", " ", "x", " ", 
         RowBox[{"cos", "(", 
          RowBox[{"5", " ", "x"}], ")"}]}]}], ")"}]}],
     StripOnInput->False,
     LineIndent->0,
     LinebreakAdjustments->{1, 100, 1, 0, 100},
     LineColor->GrayLevel[0],
     FrontFaceColor->GrayLevel[0],
     BackFaceColor->GrayLevel[0],
     GraphicsColor->GrayLevel[0],
     FontColor->GrayLevel[0]], "+", 
    StyleBox["\"\<constant\>\"",
     StripOnInput->False,
     LineIndent->0,
     LinebreakAdjustments->{1, 100, 1, 0, 100},
     FontFamily->"Helvetica",
     Magnification->0.9 Inherited]}],
   StripOnInput->False,
   LineIndent->0,
   LinebreakAdjustments->{1, 100, 1, 0, 100},
   LineColor->GrayLevel[0.6],
   FrontFaceColor->GrayLevel[0.6],
   BackFaceColor->GrayLevel[0.6],
   GraphicsColor->GrayLevel[0.6],
   FontColor->GrayLevel[0.6]], 
  TraditionalForm]], \
"WolframAlphaFullOutput",ExpressionUUID->"4621e546-b06c-4066-b19d-\
4ec87933e9dd"]], "Text",ExpressionUUID->"b2f9d0e6-68ee-48d1-9b36-\
b0c011f02667"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   FractionBox[
    RowBox[{"Cos", "[", "x", "]"}], "5"], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"3df803a0-032f-4fd7-9739-0d2fb74c356b"],

Cell[BoxData[
 FractionBox[
  RowBox[{"Sin", "[", "x", "]"}], "5"]], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"bdea9db6-9f44-46a8-af96-f13f86cf5bc3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{"5", "x"}], "]"}], 
   RowBox[{
   "\[DifferentialD]", 
    "x"}]}]}]],ExpressionUUID->"5cfa758f-57c7-4a72-bfbc-8692dec1a727"]], \
"WolframAlphaLong",
 CellLabel->"In[39]:=",ExpressionUUID->"e87d6422-b34d-46d1-8e89-b38ee572b197"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "\[Integral]Cos[5 x] \[DifferentialD]x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[5 x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "5"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"5", " ", "x"}]}], "\" \""}, "RowDefault"], 
                    "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", "5"}], 
                    "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox["1", "5"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", "u", ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    RowBox[{"cos", "(", "u", ")"}], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{
                    RowBox[{"sin", "(", "u", ")"}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    FractionBox[
                    RowBox[{"sin", "(", "u", ")"}], "5"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"5", " ", "x"}]}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "5"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {
    "title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[5 x]/5, {x, -1.3, 1.3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6768$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6767$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6768$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2331465$$ = 
                 False, 
                 CalculateUtilities`GraphicsUtilities`Private`min6767$2331466$\
$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6768$2331467$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6768$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6767$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2331465$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6767$\
2331466$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6768$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6768$\
2331467$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2331445[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 5] Sin[5 $CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$], 
                    (
                    Piecewise[{{
                    0. + 1.4105716030246795` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.4105716030246795` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$], \
-1.3194689145077132`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6768$$]], 
                    (
                    Piecewise[{{
                    0. + 1.4105716030246795` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.4105716030246795` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6768$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$ + 
                    0.0026389378290154262`, 
                    CalculateUtilities`GraphicsUtilities`Private`max6768$$]], 
                    1.3194689145077132`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{Rational[-2, 5] Pi, Rational[-2, 5] Pi}, {
                    Rational[-1, 5] Pi, Rational[-1, 5] Pi}, {0, 0}, {
                    Rational[1, 5] Pi, Rational[1, 5] Pi}, {
                    Rational[2, 5] Pi, Rational[2, 5] Pi}}, Automatic}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6767$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6768$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2331445]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2331445[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2331445[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbikw3t/+ARKfkbZuH5GADsakASUp3+\
sll8TCtTPb2Qt/Hnx2kzRrVymmAzSlH071pXl899xz13t5LIKk3+\
v11G1jPgkWJ1t4emHMSMxyUfD4w3kuQSkqeHILnz0wJgS9D4xcQOx8d435KOSMaHd+g+\
8TFhWMaPiuKaOagpoeSJJnNFK1ZyzpqfnJlImIMPoTXu0Mh9u7e3sOBmMZE61BcjVsC5lnkihIegh0\
x5j3jPAf7vi8PH4pGAvhpAAegXpqvBNJYgMjOGGYj/\
etN5upR5iYJjwmMr52mqw8R20vUFpSnk5gluMbV5O13RaYyFQ5bh6X3KxTkAv/\
Hj4QoY3JeWzS9mwJ9AvjhtF3WVb/nLsBnt+\
2hZfibDVxmN87hrwRTU9BLdP5unWdHCNV19ro51xd13zZaJBXT5n6f+\
mIKr0cxk7bMGB2bGq8WnvL8Ltt4UWOXT8X9xNjvjpHCbhqOFSC+\
yzigs2jaKY8cBJtn67KjcNhPKz4DtHpU8EKJzBxlv1i++\
NZBV5vCiHWbroB6fB6BgSQg3HFltt9mlI9yogkkQGeX9cvm2wi6lA87mxfe8pjagaYI2Td8oTmMFmo\
O9FR9u2PilvJ5VKTIe+HXEMKcq3o72N9pCGXxxPhGUmIFzT16s1hldSYSG/\
ZD0qQMCecIiT9ZT72m3u4WAmk6kCiuqRjcWBLc+\
6fRL8s8BHwVGfNHdtzdHm3LWYTiLNadQFNksVpszmm+02mGzc0B7ovCb4l8R/o3abQbQp/\
dVNY2oO7NaFbE7o1oVsTujXh/10TbMT4r/Qb/My4Vg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[5 x]/5, {x, -5.3, 5.3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6770$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6769$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6770$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2331551$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6769$\
2331552$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6770$2331553$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6770$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6769$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2331551$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6769$\
2331552$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6770$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6770$\
2331553$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2331531[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 5] Sin[5 $CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$], 
                    (
                    Piecewise[{{
                    0. + 5.642286412098718 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    5.642286412098718 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$], \
-5.277875658030853], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6770$$]], 
                    (
                    Piecewise[{{
                    0. + 5.642286412098718 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 5.642286412098718 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6770$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$ + 
                    0.010555751316061705`, 
                    CalculateUtilities`GraphicsUtilities`Private`max6770$$]], 
                    5.277875658030853]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6769$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6770$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2331531]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2331531[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2331531[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4Ruo6HpGADsakASUp7/\
WSS2Lh2sF2tsE/Dz67SZq1qxTTAZrSh1N9aT7ffffd9Z6diCDp93o9ddOYD4LFyQ6enhozFvNcFDx+\
d55LUIoKntzAZ/eMCUEfACM/IHa+28a8F3JOtDu/\
wvcJiwpGNHzVlFFNQc0OJckzGqnaM5H01PxkxkREGP0Jz/dGo+HL/\
aGDwVgmRGuQXI3aQuaZJAqSHgLdMuYtI/ybOz4pj58KxkL4XgCPQD023qkksYERnDDMx/\
vW683UA0xMEx4TGV85TVae47YXKC0pT6cwz/GNy8katgUmMlWOm4clN5sU5MK/\
gw9EaGNyHpu0PVsC/cK4ZvRdlNU/526A59dt4aU4W08c5veGIW9E01NQq3S+\
aF0nx0jVtTb6BVdXNV+2GuTlU6b+XzqmSq+Gsdc2DJifmBqv194q/H5beJFj1y/E/\
ciYz85RAq4bDpXgPoq4YIsomikPnETbp6ty43AY9yu+Q3T6VLDCCUycZb/Y/\
titwOtNIcTazbYgHV7PgAByMK7YcntAU6rHGZEkMsCL6/\
plk01FHYrHne1rT3lMzQBzhGxantAcJUt1JzrKvvxRcSu5XGgy5P2Ia0hBbhT9XayPNOTyeCo8Iwnx\
gqZevTmskpoQ6S37QQkS5oRThKS/zMd+cw+XK4FUHUpUl3QsDmxpzv2T6JcFPgae6qy5Y3uOLu+\
2xWwCcVarLqBJsjxttsd0v8l044bmQPclwbck/\
gO92xS6TeGvbgore3C3JnRrQrcmdGtCtyb8v2uCjRj/lX4DFbm4Ng=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigFactor[Sin[5 x]/5]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   FractionBox["1", "5"], " ", 
                   RowBox[{"sin", "(", "x", ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "+", "1"}], ")"}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[Sin[5 x]/5]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "10"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "5"}], " ", "\[ImaginaryI]", " ", "x"}]]}], 
                   "-", 
                   RowBox[{
                    FractionBox["1", "10"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"5", " ", "\[ImaginaryI]", " ", "x"}]]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigExpand[Sin[5 x]/5]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["sin", "5"], "(", "x", ")"}], "5"], "+", 
                   RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "4"], "(", "x", ")"}]}], "-", 
                   RowBox[{"2", " ", 
                    RowBox[{
                    SuperscriptBox["sin", "3"], "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sin[5 x]/5, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"x", "-", 
                    FractionBox[
                    RowBox[{"25", " ", 
                    SuperscriptBox["x", "3"]}], "6"], "+", 
                    FractionBox[
                    RowBox[{"125", " ", 
                    SuperscriptBox["x", "5"]}], "24"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 1, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["25", "6"]}], ",", "0", ",", 
                    FractionBox["125", "24"]}], "}"}], ",", "1", ",", "6", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "DefiniteIntegral", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[5 x], {x, 0, Pi/10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["\[Pi]", "10"]], 
                 RowBox[{
                   RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "5"], Identity], "\[LongEqual]", 
              TagBox["0.2`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralMeanSquare", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[(5 Cos[5 x]^2)/(2 Pi), {x, 0, (2 Pi)/5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox[
                   RowBox[{"2", " ", "\[Pi]"}], "5"]], 
                 RowBox[{
                   FractionBox[
                    RowBox[{"5", " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], 
                    RowBox[{"2", " ", "\[Pi]"}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.56", 
    "parsetiming" -> "0.327", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa6979149gcii5ib3a5be600003c38996i17769512", "host" -> 
    "http://www4b.wolframalpha.com", "server" -> "37", "related" -> 
    "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa6980149gcii5ib3a5be6000031d2gifi0he194if1830852643218329827", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 20, 46, 52.6580411`9.474039546472104}, "Line" -> 
    39, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "\[Integral]Cos[5 x] \[DifferentialD]x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {714., 721.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"8f92ae90-4c3c-4b53-8088-\
5d35c07685a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[Integral]x*sen(5x)\[DifferentialD]x", "WolframAlphaLong",
 CellLabel->"In[36]:=",ExpressionUUID->"131b2c6b-1ffe-4770-8f2d-61dd118cc1a1"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "\[Integral]x*sen(5x)\[DifferentialD]x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[x Sin[5 x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], "-", 
                    RowBox[{"5", " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"integrate \"", "\"by \"", "\"parts, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{"f", 
                    RowBox[{"\[DifferentialD]", "g"}]}]}], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"f", " ", "g"}], "-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{"g", 
                    RowBox[{"\[DifferentialD]", "f"}]}]}]}]}], "\",\"", 
                    "\" \""}, "RowDefault"], "\"where \"", "\"\\n \"", 
                    TemplateBox[{
                    RowBox[{"f", "\[LongEqual]", "x"}], "\",\"", "\" \"", 
                    "\" \"", "\" \"", "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "g"}], "\[LongEqual]", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    RowBox[{"\[DifferentialD]", "x"}], "\",\"", "\"\\n\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "f"}], "\[LongEqual]", 
                    "\"\""}], "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}]}, "RowDefault"], 
                    "\",\"", "\" \"", "\" \"", "\" \"", "\" \"", "\" \""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"g", "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "5"]}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "5"]}], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "5"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"5", " ", "x"}]}], "\" \""}, "RowDefault"], 
                    "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", "5"}], 
                    "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "5"]}], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "25"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", "u", ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    RowBox[{"cos", "(", "u", ")"}], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{
                    RowBox[{"sin", "(", "u", ")"}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"sin", "(", "u", ")"}], "25"], "-", 
                    RowBox[{
                    FractionBox["1", "5"], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"5", " ", "x"}]}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "5"], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Which \"", "\"is \"", "\"equal \"", "\"to:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], "-", 
                    RowBox[{"5", " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-5 x Cos[5 x] + Sin[5 x])/25, {x, -1.3, 1.3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4874$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4873$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3276786$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4873$\
3276791$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4874$3276792$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4874$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4873$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3276786$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4873$\
3276791$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4874$\
3276792$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[
                    1, 25] (((-5) $CellContext`x) Cos[5 $CellContext`x] + 
                    Sin[5 $CellContext`x]), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], 
                    (
                    Piecewise[{{
                    0. + 1.3434015266901709` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.3434015266901709` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], \
-1.2566370614359172`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$]], 
                    (
                    Piecewise[{{
                    0. + 1.3434015266901709` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.3434015266901709` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$ + 
                    0.0025132741228718345`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$]], 
                    1.2566370614359172`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbikw3t/+ARKfkdjQ+\
gkJ1rExaUBJyvfeEiexcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPT0SQ9Hu9nrppzAfB4mQ\
LT8+MGYlZLgoevz/PJVGKCp7cwGf3jAmJ3icMfpDY+W4bcyDkDLQ7v8H3gUUFA02+\
asqopkRNDyXkGY1U7RlLemp+MmUiAkZ/khc728Pd4XDXwWAsY9CaSK522kLmmQRFkh4C3TJmjwH/\
5o5Py+OngrGQfC8Ij4h6bLwTCbGBERwY5uN96/\
Vm6gEmpoHHIOMrp8nKc9T2AqUl5emEzHJ843KyXrUFBpkqx83Dkpt1CnLh38EHIrQxOY9N2p4tgX5h\
XDP6Lsrqn3M3wPPbtvBSnK0mDvN7x5A30PSUqGU6X7auk2Ok6lob/Zyrq5ovGw3y8ilT/\
y8dU6WXw9huGwaZnZgar9beMvzrtvAix66fi/uRMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5XfIfo9KlghROYOMt+\
sf3xpAKvN4UQazfdgHR4PQMCkhPjii23+zSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5Qs1B10lH35o+\
JWcrnQZMj7EdckJXKt6O9ifaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqUqC7pWBzY0pz7J9EvC3xMeKqz5o7tObq82xazCcRZrbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DSDxuM4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-5 x Cos[5 x] + Sin[5 x])/25, {x, -7.5, 7.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4876$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4875$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3276877$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4875$\
3276878$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4876$3276879$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4876$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4875$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3276877$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4875$\
3276878$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4876$\
3276879$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[
                    1, 25] (((-5) $CellContext`x) Cos[5 $CellContext`x] + 
                    Sin[5 $CellContext`x]), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], 
                    (
                    Piecewise[{{
                    0. + 8.060409160141026 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    8.060409160141026 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], \
-7.5398223686155035`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$]], 
                    (
                    Piecewise[{{
                    0. + 8.060409160141026 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 8.060409160141026 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$ + 
                    0.015079644737231007`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$]], 
                    7.5398223686155035`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMxIY2viABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn25v7e683Nn1MBjLCIyhSujttpB5pkDTtIdA16x5y0F888\
dH5fFTwXlMvxdUJFQ/sN6xAmJhpACO+QTfermZuouJGRAEFLlwmpw8h20v0EYxMR3TWY5vnE/\
W87bAoKbac3Ov5Gadgnz4N/GBjF1M3uOSdmdHYFgYl4y+s7L659wN8Py6LbySJ6uJw/\
zecOQNDDumepnOZ63r5BmputZFP+fqoubLRoM8f8rU/0uHTJvlMLbahkFnR7bGq7W3DP+\
iLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AZq8uNY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[(-5 x Cos[5 x] + Sin[5 x])/25]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "10"]}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "5"}], " ", "\[ImaginaryI]", " ", "x"}]], 
                    " ", "x"}]}], "-", 
                   RowBox[{
                    FractionBox["1", "10"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"5", " ", "\[ImaginaryI]", " ", "x"}]], " ", 
                    "x"}], "+", 
                   RowBox[{
                    FractionBox["1", "50"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "5"}], " ", "\[ImaginaryI]", " ", "x"}]]}], 
                   "-", 
                   RowBox[{
                    FractionBox["1", "50"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"5", " ", "\[ImaginaryI]", " ", "x"}]]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"TrigExpand[(-5 x Cos[5 x] + Sin[5 x])/25]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  FractionBox[
                   RowBox[{
                    SuperscriptBox["sin", "5"], "(", "x", ")"}], "25"], "-", 
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "5"]}], " ", "x", " ", 
                    RowBox[{
                    SuperscriptBox["cos", "5"], "(", "x", ")"}]}], "+", 
                  RowBox[{
                    FractionBox["1", "5"], " ", 
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "4"], "(", "x", ")"}]}], "+", 
                  RowBox[{"2", " ", "x", " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "3"], "(", "x", ")"}]}], "-", 
                  RowBox[{
                    FractionBox["2", "5"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "3"], "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}]}], "-", 
                  RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox["sin", "4"], "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], {
                 GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], "+", 
               StyleBox[
               "\"constant\"", {
                Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                 FontSize -> Inherited, 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}, StripOnInput -> False]}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded form of the integral", "scanner" -> 
     "Integral", "id" -> "ExpandedForm", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "-", 
                   RowBox[{
                    FractionBox["1", "5"], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedForm__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(-5 x Cos[5 x] + Sin[5 x])/25, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["x", "3"]}], "3"], "-", 
                    FractionBox[
                    RowBox[{"25", " ", 
                    SuperscriptBox["x", "5"]}], "6"], "+", 
                    FractionBox[
                    RowBox[{"625", " ", 
                    SuperscriptBox["x", "7"]}], "168"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "8"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 3, 8, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["5", "3"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["25", "6"]}], ",", "0", ",", 
                    FractionBox["625", "168"]}], "}"}], ",", "3", ",", "8", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "DefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[x Sin[5 x], {x, 0, Pi/5}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["\[Pi]", "5"]], 
                 RowBox[{
                   RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["\[Pi]", "25"], Identity], "\[TildeTilde]", 
              TagBox["0.12566370614359174`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral__1_More digits"}, {}]}]}]}], Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
   Typeset`pod36$$, Typeset`aux1$$ = {True, False, {False, False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
     "", "timedout" -> "Integral", "timedoutpods" -> "", "timing" -> "2.634", 
     "parsetiming" -> "0.421", "parsetimedout" -> "false", "recalculate" -> 
     "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa106014gab7h5bh50f0id00001cbh94fdi9g853ie2689526546027549574", "id" -> 
     "MSPa106114gab7h5bh50f0id00003d9di0g86eh48459", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "49", "related" -> 
     "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa106214gab7h5bh50f0id000019hbafd928868da62689526546027549574", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "", "timedout" -> "Integral", "timedoutpods" -> "", 
     "timing" -> "2.204", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "39", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 20, 24, 53.3455808`9.479673292472572}, "Line" -> 
    36, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
   36}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "\[Integral]x*sen(5x)\[DifferentialD]x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
         Typeset`pod36$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {860., 867.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
          Typeset`pod36$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa106014gab7h5bh50f0id00001cbh94fdi9g853ie2689526546027549574", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"3a33ba37-cc5e-4546-8bb6-\
84ae6e796660"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     FractionBox[
      RowBox[{"x", "+", "1"}], 
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"6", "x"}]}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"029543f9-07d6-4263-b729-04c13a76136e"],
 "."
}], "SubitemNumbered",ExpressionUUID->"4e436a9a-0d2d-4343-8196-0cdb31979495"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FullSimplify", "@", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x", "3"], "+", 
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"6", "x"}]}], ")"}]}], "/", 
  RowBox[{"(", 
   RowBox[{"x", "+", "1"}], ")"}]}]], "Input",ExpressionUUID->"3bdf4a63-1f32-\
413c-9c45-e70d0af4a122"],

Cell[BoxData[
 FractionBox[
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "6"}], "+", "x", "+", 
     SuperscriptBox["x", "2"]}], ")"}]}], 
  RowBox[{"1", "+", "x"}]]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"58724239-3969-4147-8a6f-7155a6738e38"]
}, Open  ]],

Cell["N\[ATilde]o \[EAcute] fator.", "Text",ExpressionUUID->"2e9531ca-1d3c-4eaa-8c71-4623d80d97c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "3"], "+", 
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"6", "x"}]}], "\[Equal]", "0"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"59b831d2-f584-447f-91b9-faf74e75ba73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"b8fb1b2e-a3b2-48e9-80ea-aa04606e117b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Simplify", "@", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["x", "3"], "+", 
      SuperscriptBox["x", "2"], "-", 
      RowBox[{"6", "x"}]}], ")"}]}], "/", "x"}], "//", 
  "TraditionalForm"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"7a516cee-27c8-4dcf-bd9c-e383ff40e221"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["x", "2"], "+", "x", "-", "6"}], TraditionalForm]], "Output",
 CellLabel->
  "Out[72]//TraditionalForm=",ExpressionUUID->"fa5a0745-7049-49b1-9195-\
bbfdda787484"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "3"}], ")"}], "*", 
   RowBox[{"(", 
    RowBox[{"x", "-", "2"}], ")"}], "*", "x"}], "//", 
  "TraditionalForm"}]], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"d8f7909c-68a6-4a13-8a11-7a0a583a9649"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "-", "2"}], ")"}], " ", "x", " ", 
   RowBox[{"(", 
    RowBox[{"x", "+", "3"}], ")"}]}], TraditionalForm]], "Output",
 CellLabel->
  "Out[88]//TraditionalForm=",ExpressionUUID->"3fbe9c95-0f33-4470-942e-\
e36efc967113"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    SuperscriptBox["x", "2"], "-", 
    RowBox[{"6", "x"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", "x", "-", "6"}], ")"}], "\[Implies]", 
     "\[IndentingNewLine]", "x"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"0", " ", "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SuperscriptBox["x", "2"], "+", "x", "-", "6"}], "=", "0"}], ")"}]}],
       "\[Implies]", "\[IndentingNewLine]", "x"}], "=", 
     RowBox[{
      RowBox[{"0", "\[Or]", "x"}], "=", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "\[PlusMinus]", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["1", "2"], "-", 
           RowBox[{"4", "\[CenterDot]", "1", "\[CenterDot]", " ", 
            RowBox[{"-", "6"}]}]}]]}], "2"], "=", 
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"-", "1"}], "\[PlusMinus]", 
          SqrtBox[
           RowBox[{"1", "+", "24"}]]}], "2"], "=", 
        RowBox[{
         StyleBox["{",
          StripOnInput->False,
          SpanMaxSize->DirectedInfinity[1]], 
         RowBox[{
          StyleBox[GridBox[{
             {
              FractionBox[
               RowBox[{
                RowBox[{"-", "1"}], "+", "5"}], "2"]},
             {
              FractionBox[
               RowBox[{
                RowBox[{"-", "1"}], "-", "5"}], "2"]}
            }],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox["=",
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          RowBox[{
           StyleBox[
            RowBox[{"(", 
             RowBox[{"2", ",", 
              RowBox[{"-", "3"}]}], ")"}],
            StripOnInput->False,
            SpanMaxSize->DirectedInfinity[1]], 
           StyleBox[".",
            FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"95952710-2d20-45a0-88dc-b67e6f748548"]], "Text",\
ExpressionUUID->"646de3a8-0f3a-4bff-b062-53de89da9841"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"x", "+", "1"}], 
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"6", "x"}]}]], "\[Congruent]", 
     RowBox[{
      FractionBox["A", 
       RowBox[{"x", "+", "3"}]], "+", 
      FractionBox["B", 
       RowBox[{"x", "-", "2"}]], "+", 
      FractionBox["D", "x"]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"A", "(", 
         RowBox[{"x", "-", "2"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"B", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"D", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "+", "3"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], 
       RowBox[{"(", "x", ")"}]}]], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{
      StyleBox["{",
       StripOnInput->False,
       SpanMaxSize->DirectedInfinity[1]], 
      RowBox[{GridBox[{
         {
          RowBox[{"x", "=", 
           RowBox[{
            RowBox[{"2", "\[Implies]", "3"}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{"10", "B"}], "\[Implies]", "B"}], "=", 
             FractionBox["3", "10"]}]}]}]},
         {
          RowBox[{"x", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "3"}], "\[Implies]", 
             RowBox[{"-", "2"}]}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{"15", "A"}], "\[Implies]", "A"}], "=", 
             RowBox[{"-", 
              FractionBox["2", "15"]}]}]}]}]},
         {
          RowBox[{"x", "=", 
           RowBox[{
            RowBox[{"0", "\[Implies]", "1"}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", "6"}], "D"}], "\[Implies]", "D"}], "=", 
             RowBox[{"-", 
              FractionBox["1", "6"]}]}]}]}]}
        }], 
       StyleBox[".",
        FontSize->14]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"a5404fd9-1760-4ae2-aeaa-b558a710c91f"],
 "\n"
}], "Text",ExpressionUUID->"9155a537-8b04-4d6f-93b2-818b5110c5e0"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    SuperscriptBox["x", "2"], "-", 
    RowBox[{"6", "x"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "2"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"x", "+", "3"}], ")"}], 
      RowBox[{"(", "x", ")"}]}], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox[
        RowBox[{"x", "+", "1"}], 
        RowBox[{
         SuperscriptBox["x", "3"], "+", 
         SuperscriptBox["x", "2"], "-", 
         RowBox[{"6", "x"}]}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Integral]", 
       FractionBox["A", 
        RowBox[{"x", "+", "3"}]]}], "+", 
      FractionBox["B", 
       RowBox[{"x", "-", "2"}]], "+", 
      RowBox[{
       FractionBox["D", "x"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["A", 
          RowBox[{"x", "+", "3"}]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["B", 
          RowBox[{"x", "-", "2"}]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["D", "x"], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Integral]", 
         RowBox[{
          FractionBox[
           RowBox[{"-", 
            FractionBox["2", "15"]}], 
           RowBox[{"x", "+", "3"}]], 
          RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
        RowBox[{"\[Integral]", 
         RowBox[{
          FractionBox[
           FractionBox["3", "10"], 
           RowBox[{"x", "-", "2"}]], 
          RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", 
       RowBox[{
        RowBox[{"\[Integral]", 
         RowBox[{
          FractionBox[
           RowBox[{"-", 
            FractionBox["1", "6"]}], "x"], 
          RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            FractionBox["2", "15"]}], 
           RowBox[{"\[Integral]", 
            RowBox[{
             FractionBox["1", 
              RowBox[{"x", "+", "3"}]], 
             RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
          RowBox[{
           FractionBox["3", "10"], 
           RowBox[{"\[Integral]", 
            RowBox[{
             FractionBox["1", 
              RowBox[{"x", "-", "2"}]], 
             RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
          RowBox[{
           FractionBox["1", "6"], 
           RowBox[{"\[Integral]", 
            RowBox[{
             FractionBox["1", "x"], 
             RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            FractionBox["2", "15"]}], "ln", 
           RowBox[{"\[LeftBracketingBar]", 
            RowBox[{"x", "+", "3"}], "\[RightBracketingBar]"}]}], "+", 
          RowBox[{
           FractionBox["3", "10"], "ln", 
           RowBox[{"\[LeftBracketingBar]", 
            RowBox[{"x", "-", "2"}], "\[RightBracketingBar]"}]}], "-", 
          RowBox[{
           FractionBox["1", "6"], "ln", 
           RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
          "+", 
          RowBox[{"C", 
           StyleBox[".",
            FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"77cbaa50-4d13-4e9d-ae66-5cbfb1555c5a"]], "Text",\
ExpressionUUID->"bf49d9c4-b263-4ffd-b849-2e7833d0ea7e"],

Cell["Resolu\[CCedilla]\[ATilde]o alternativa sem o truque da p\[AAcute]g. \
35:", "Text",ExpressionUUID->"7728d98e-4eee-476c-a66d-71aacf43f9e8"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"x", "+", "1"}], 
    RowBox[{
     SuperscriptBox["x", "3"], "+", 
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"6", "x"}]}]], "=", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"A", "(", 
         RowBox[{"x", "-", "2"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"B", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"D", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "+", "3"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], 
       RowBox[{"(", "x", ")"}]}]], "\[Implies]", 
     StyleBox["\[IndentingNewLine]",
      FontSize->14], 
     RowBox[{"x", "+", "1"}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"A", "(", 
       RowBox[{
        SuperscriptBox["x", "2"], "-", 
        RowBox[{"2", "x"}]}], ")"}], "+", 
      RowBox[{"B", "(", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        RowBox[{"3", "x"}]}], ")"}], "+", 
      RowBox[{"D", "(", 
       RowBox[{
        SuperscriptBox["x", "2"], "-", 
        RowBox[{"2", "x"}], "+", 
        RowBox[{"3", "x"}], "-", "6"}], ")"}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"A", " ", 
        SuperscriptBox["x", "2"]}], "-", 
       RowBox[{"2", "A", " ", "x"}], "+", 
       RowBox[{"B", " ", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"3", " ", "B", " ", "x"}], "+", 
       RowBox[{"D", " ", 
        SuperscriptBox["x", "2"]}], "-", 
       RowBox[{"2", " ", "D", " ", "x"}], "+", 
       RowBox[{"3", " ", "D", " ", "x"}], "-", 
       RowBox[{"6", "D"}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"x", "(", 
        RowBox[{
         RowBox[{"A", " ", "x"}], "-", 
         RowBox[{"2", " ", "A"}], "+", 
         RowBox[{"B", " ", "x"}], "+", 
         RowBox[{"3", " ", "B"}], "+", 
         RowBox[{"D", " ", "x"}], "-", 
         RowBox[{"2", "D"}], "+", 
         RowBox[{"3", " ", "D"}]}], ")"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "6"}], " ", "D"}], ")"}], 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"7fe6fc69-e69f-4937-b6aa-c65f60ce5346"]], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"76c44c0c-a181-46d8-8c02-3e0bd5935e0c"],

Cell[TextData[{
 "Seria interessante ver onde daria montar o sistema abaixo com os \
quadrados... Com um sistema para cada ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"9f7cb62c-5b07-4711-b580-8a0e70018009"],
 " raiz."
}], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"32cb433a-5ae7-4b8f-9e35-b6a39d9a157d"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox["{",
    StripOnInput->False,
    SpanMaxSize->DirectedInfinity[1]], 
   RowBox[{
    RowBox[{GridBox[{
       {
        RowBox[{
         RowBox[{"A", "+", "B", "+", "C"}], "=", "1"}]},
       {
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], "A"}], "+", 
          RowBox[{"3", "B"}]}], "=", "1"}]}
      }], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"-", "A"}], "+", 
      RowBox[{"4", "B"}]}]}], "=", 
    RowBox[{
     RowBox[{"2", "\[Implies]", 
      RowBox[{"-", "A"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "-", 
        RowBox[{"4", "B"}]}], "\[Implies]", "A"}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], "+", 
         RowBox[{"4", "B"}]}], "\[Implies]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"-", "2"}], "+", 
         RowBox[{"4", "B"}], "+", "B"}]}], "=", 
       RowBox[{
        RowBox[{"1", "\[Implies]", 
         RowBox[{"5", "B"}]}], "=", 
        RowBox[{
         RowBox[{"3", "\[Implies]", "B"}], "=", 
         RowBox[{
          RowBox[{
           FractionBox["3", "5"], "\[Implies]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], "A"}], "+", 
            FractionBox["9", "5"]}]}], "=", 
          RowBox[{
           RowBox[{"1", "\[Implies]", 
            RowBox[{
             RowBox[{"-", "2"}], "A"}]}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"-", 
              FractionBox["4", "5"]}], "\[Implies]", "A"}], "=", 
            RowBox[{
             FractionBox["4", "10"], "=", 
             RowBox[{
              FractionBox["2", "5"], 
              StyleBox[".",
               FontSize->14]}]}]}]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"b7c6a659-3cc6-4ab2-a4e6-4a7e349d922d"]], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"5a42c6db-e233-4788-85e6-7e3c8d4c3777"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox["1", "x"], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox["2", "x"], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox["1", 
      RowBox[{
       RowBox[{"5", "x"}], "+", "15"}]], ",", "x"}], "]"}]}], "}"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"623643a7-aa18-4e49-af50-0cd89bc4701b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Log", "[", "x", "]"}], ",", 
   RowBox[{"2", " ", 
    RowBox[{"Log", "[", "x", "]"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"Log", "[", 
     RowBox[{"15", "+", 
      RowBox[{"5", " ", "x"}]}], "]"}]}]}], "}"}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"af8d66f2-d621-4d39-8c86-9320564b1aa4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"x", "+", "1"}], 
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"6", "x"}]}]], ",", "x"}], "]"}], ",", 
   RowBox[{"Expand", "@", 
    RowBox[{"Apart", "[", 
     FractionBox[
      RowBox[{"x", "+", "1"}], 
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"6", "x"}]}]], "]"}]}]}], "}"}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"3b6daa22-38f2-4627-80de-4fde219433a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["3", "10"], " ", 
     RowBox[{"Log", "[", 
      RowBox[{"2", "-", "x"}], "]"}]}], "-", 
    FractionBox[
     RowBox[{"Log", "[", "x", "]"}], "6"], "-", 
    RowBox[{
     FractionBox["2", "15"], " ", 
     RowBox[{"Log", "[", 
      RowBox[{"3", "+", "x"}], "]"}]}]}], ",", 
   RowBox[{
    FractionBox["3", 
     RowBox[{"10", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2"}], "+", "x"}], ")"}]}]], "-", 
    FractionBox["1", 
     RowBox[{"6", " ", "x"}]], "-", 
    FractionBox["2", 
     RowBox[{"15", " ", 
      RowBox[{"(", 
       RowBox[{"3", "+", "x"}], ")"}]}]]}]}], "}"}]], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"1e4e602d-f04c-4fad-b1ec-574c64a88096"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "roots of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    SuperscriptBox["x", "2"], "-", 
    RowBox[{"6", "x"}]}], TraditionalForm]],ExpressionUUID->
  "e57c8c4a-504a-4c08-bb3d-d6bba86e33a8"]
}], "WolframAlphaLong",
 CellLabel->"In[77]:=",ExpressionUUID->"5733e629-96d7-475d-a41e-b32027084e0e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "roots of x^3 + x^2 - 6 x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"roots\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "3"], "+", 
                    SuperscriptBox["x", "2"], "-", 
                    RowBox[{"6", " ", "x"}]}], HoldForm], "\[LongEqual]", 
                    "0"}]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "4", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-6 x + x^2 + x^3 == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              RowBox[{"-", "3"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-6 x + x^2 + x^3 == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-6 x + x^2 + x^3 == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", "2"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve for \"", "x"}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "3"], "+", 
                    SuperscriptBox["x", "2"], "-", 
                    RowBox[{"6", " ", "x"}]}], HoldForm], "\[LongEqual]", 
                    "0"}], HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"The \"", "\"left \"", "\"hand \"", "\"side \"", 
                    "\"factors \"", "\"into \"", "\"a \"", "\"product \"", 
                    "\"with \"", "\"three \"", "\"terms\""}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "-", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}], HoldForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Split \"", "\"into \"", "\"three \"", "\"equations\""},
                     "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox["\" or \"", 
                    GrayLevel[0.7], StripOnInput -> False], 
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"x", "-", "2"}], HoldForm], "\[LongEqual]", "0"}],
                     HoldForm], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "0"}], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], "\[LongEqual]", "0"}],
                     HoldForm]}, "RowWithSeparator"], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Add \"", 
                    TemplateBox[{"2", "\" \""}, "RowDefault"], "\"to \"", 
                    "\"both \"", "\"sides\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    StyleBox["\" or \"", 
                    GrayLevel[0.7], StripOnInput -> False], 
                    FrameBox[
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "2"}], HoldForm], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "0"}], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], "\[LongEqual]", "0"}],
                     HoldForm]}, "RowWithSeparator"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Subtract \"", 
                    TemplateBox[{"3", "\" \""}, "RowDefault"], "\"from \"", 
                    "\"both \"", "\"sides\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    StyleBox["\" or \"", 
                    GrayLevel[0.7], StripOnInput -> False], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "2"}], HoldForm], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "0"}], HoldForm], 
                    FrameBox[
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", 
                    RowBox[{"-", "3"}]}], HoldForm], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> 
                    False]}, "RowWithSeparator"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Root plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[{x (-6 + x + x^2), 0}, {x, -5.5, 4.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{{}, {}, 
                TagBox[{
                  Directive[
                   Opacity[1.], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJwV13k4VN8fB/AZO2MZa7LN2JKQkq2ic6QoibRQErKWSuJLi0KiVNK+iRIq
W7ayJDmnsqXFXrKUPbuZMbYxw+/+/prn9Txzn3vu+/M+Z+aqe53c7ctHIpHS
yCTS/z8VG6SPve2QwEMyw7U6Fw3xy5qzP0MOSuCcAr2rkV162D3mnnx9BgW/
Ugz2lLNWxz/AjPCZVAqOHLy/7aOaOgYLLhx6EgU7lgYVx3LomB6s/Df4JgWz
lvlT9hXSca9HaoZCGAU3PlKcEtekY7+N+RvdrSk49MCGpVJpNRzI+np4vEsM
B89YhT//uhxHePLnUmTF8Latx1MjaqRxfr1tQou4GC50athx6ro07t0UH5gs
JIaTxcbsExylsY2qvKEhRxSvKdqqa9tGxZLtK/J394hivUys5vdLCj/dY1f4
OE8UrxvaEdRsLI6Rze1iHXtRnD2q6C+8WhCTDGjIOlYEp1B2b2jQZaDzClbu
sREiWMxJsMohbQLNLnnxqk+LYJVGwb2n2GNoounlRrsAEfyu4c9h6SfDqOPM
6tJdjiKYwq3JyJ/vRcWVlgWHlovgN/8+iqgyatAJN7e006+F8dzqdj/qRC8Y
2hqx+d1LYczQ9ZZ/F9QPfAxTejjPhHHTpfCBBeYAcOXrp0XcEca1up7FTowh
sC3jWFLMaWHcIqmRZ9c5AbTY5+7fthLGWt7/HEbNp0H79cdXsluF8DlK1J+n
2iTYXEXP8awXwkct3E88CiXBb0uvGuS/COHJvammtlUkWBFSvDyqXAifUKlr
rfQmw9SDzdl704Swkvrjls3JfDBAT6KBFySEVw5YbnHnE4QLdVGKu8SF8NmT
w8eK74tCtoCIpaCQEHZvKY+L6RSFE5tuHi5bEsSVKr5fxTTFYHdhcpbWlCCO
M0ulwTwxWJlYZjH/WxDbFdTf3lVJgfEBbM/UV4I4+xFJQrVHAqqIHclkbxbE
d19FTfJPUaF7xbd4DQtBzP5p/ylJTho+D14btMtEEDc/WVCQMJWGKzo4pjk6
gtjcLOrif2ekoWHOjUpvcUEcNZqy4LEgDTc7vPnb1CqAKfxKccXzMvDonUX5
giMCuK2olF7XJgdzbLzn/xwWwKtboslB03JwglPTKX5QAJtQV8FJaXkY7H07
7chOAWxpdFPmnJ08PG+stZZuJICD9xnmfHonD2/93G5/c4Ef+zemFOvfVoDF
SvejTyTwY2N/BdtvmoqwLLpzz/sr/Dhnuoxvx0ZFWDGiqS16kR9/M1i+8+Vu
RVhdVliTHsKP4Y2d1awoRfjTtUG8cz8/7stMbenvUITTiZSHdpr8uMbDu2D9
9eXQWDk6W6eUD18e85sQaVCC5pe+nA8t4MNyyxKqjPuUoMUo1eFzFh/2jKge
3zSjBLe8f8ZwT+bDN6aLjk4oK8O9Bz+YPIjmw9wVSY/f+yrDkCdzSGAnH2Y/
GdFVnlKGhconW3p6yDiZW3LTaVoFGrco66V1kPHP8LOdHvyqsCi+9qJPKxmP
9Zj77JZWhaU8dcN/tWR8Gbnu7tdXhRV/W66O5ZHxGrtvQ+VeqvBr2gYwe4GM
I0eDF+y+qEJ7t3/3S0+TscO7UafUVlX4Q+7e2NlTZLy9RzjxT48qbIodf8z1
IePYpGZ9IY4qbPNPYZPtyVjezjVJRlcN9usJZYkrkfG5+jUpq6LVoF9/IemH
LBmn0ksDfsarwX9JHi43JcgYgrgu/4dqcETinYAMmYxfW+UMb8xRg4zJYx7L
hkhEn9M7MlvUIO9No5xGMQmns300X9FpMOJ4xLG+PBIe4jl9K9SlQZK23qf0
TBIesTVoSTeiQYEHMSd1kklYeMFltcUWGhQ7Y1anH0PCQf40+/V+NKhgkRxp
tpuEZV9Frzr9ggZ7AnXun9pBwl4e+ukJr2kw53lBVvYWEjYyTayPK6LBzcLV
rTQzEt6UKhCmXUWDgU0TeiIqJCytO/CI3EeD6wXPWm2WJ2HDa1Hma0aI+5vz
u5yXJOGaep9FKyYNJiYvi2aQSNj5mJ2Z1BINXmuMyi/4uoRO27/mZIjTId3s
fod2xRJyHb6c912KDouTMoUS85dQ2MGatf0ydNjr3+QWfX8JtTKS3w8q0uH6
RU3RPR5L6M2Ga/mbtejwh7e5cY3TEmruiE6aWUGHPl/sPTZuWUK6RVq3knTp
8Na90CJN3SU0ZxWbXbGaDodW1RxmsxbRXbXUCDdzOoy41RF/ZGARdXV8C3m+
gQ7lZiZLOn8togPGfVltFnQIPypKVpUvosChqQVVKzp86BJQdv/yIgotuTEt
sJ0O9T9EDIieXUTNGbyqTjs6/KRxlxpxbBEdfvRE5pU9HU6Mv/fz27WI7qRF
W8ruokObGAlZM6VFVFg58MLOmQ47h9U3ZYsvIim+XM0SFzoMdjQ9SlvioScp
gy4KB+gwWckDCffzUIVRHen1QTo0igoZCf/JQ7JIMKbfjQ5rB67IM2p5aNmf
pnZJdzpk5+cfa3vNQy8ErekWnnR4TaHqgX0KD42/DFMFh4m8z//+iO/w0GHx
QxQTLyLvnvEx41ge8o7exFT1pkN7Wz7FzNM85LDP++c84d4cBWvVAB6KbZT9
VOtDh2dk9AJvu/GQv/Wj99d86TCta0/lWSseyli/afqfHx0a9xtxWox5KFDI
2umsPx1Wj0ivWbOShxhrZiKWCLswGb7XlXnINsc65twRYh6z9U8GJXko/tgy
/xHCZxdzG634eOj34UMGjkfpUEwwQTh5motsosldGYSfUE5Yzg1x0QSaDJ8l
rC9jH7Knk4uGJOSoGwPo8IOiXmZuPRc5eLg+CyHsQBP7K/qZiza+yjV8Tviv
9rCcbzEXVbVxqz8TDtKvtcOZXCT8b82xDsLkda+ilJO5SKnKVGOI8J31l4vD
bnHRMj8Oc5iwJvQda7zERcs/+Hd3E35rs0XD4DQXmXwImPpGeOtOzf1xAVx0
9cDkmlzCP/fwJfQd4iK92J6nMYT9XXs+b3LiIuN1Bta7CM954vnHW7gIOVdo
ShO+6v/McNqMiwZ6o2xqiOdTCozw3aXHRRV1ngXBhHP+O/QkW42LfMh2AbKE
LcMtGoVkuIh5duXpTCK/HxeVhb0EueiCzlCXMWHPOI7Fh7kFpM77L72IyJ+Z
8DtYcWwBzY6XNegRjr5fmhHydwEtG39x5CExP9mkh39+NC2gpHH14Dlivump
YXKrqhfQ016lKQfC1XnGUd05CygybF1IJ9EPl2LZ4o0pC+jmwqoIWcJD5azR
B3cXULSVoyIk+iVWl++y89wCCu78Ln2O6OOThps3Mk4soLRlpAtXPIj5/Qr8
zH94AS3vlrx5jeivY7++YZntAoIDp9Apot/dIxRf+Y3E+kWeDu8j+h/MHEkM
Wr2A8mOcmwxd6fDeYoaQjvwCMnJRma0k9k+bovafu70c9HDuy7rQ3XR4lCYg
N9nKQQ8ideaEneiQo9233e4LB1Hmg7JuOdKhyrrnRaR8Dnp38zTjErFfPXeq
3jhxgYMGe9UzWFuJvPZwP9UGcdCue68vmmwh8nLtmNP04aC5hpgzgZuJfPwf
+7TbcVBAaVXrp010OHxR3sJWkYNu/fRgT5vSofiFvMm7Yhz0XShBr8KYDtec
2Z7WzZ1HFV43l84ZEfsp8ILYuZ55RN+zOqnJgA5FDg605WTNo+uUhnMcTTpc
YVwUKmM5j3bFbfBdJ0mHdoaOuh6G88iqKIe5jUKHgauGO7PV51Fg3/m7e0SI
/UxX3bJVaB79nDtgso2P6KNErMyZ+jmksTB11WOUBn0G9+Z1HSZ+U82bnHlv
aTCuZ8Jr1d45JGTxWK/p/+d/Z5zCaZs5FDu+VuXOSxpkN5VfoOrNodrPqjea
H9LgJaRlb82eRVkrq/a4n6XB1EfsoYzLs+js6ui0FHMa/Gt3T+O/7BlksGRY
bZWhBi+/niogPZ1B94e1oyqfqkF96h6rG7dmUM7vo/+M76vBc63Sni9DZ9Dm
1wMzfy6qQQXPm8ltYAZZ7WZlHHBVgw6h1xQtW6ZRtPzV5mlhNVj+LEpSiMdG
fbfmZA2cVaE3X3fynUk2Mm08o3jRThWK+QIDWi8bfdF9cKdykyrcv2pxh3kN
G1GECulKOqqQ/Tb8asBtNjJ68mYdeVYF6tWFCdRrs5FgmXDe17sqMJF9nPPQ
YQo9/A2+FX1UhhZzD+5RNk8hgd/aePGtMvyzgFdHmkwhT021jg0ZylCDX97b
T2UKTcjdfxufoAyzpT98NR5hofn62vWPXJVh+WqJ5MZYFnr4JSt3P0MJ/j3y
GlA+MBFt5NTOBhklqNU1HhOhx0Duv1tLNEwVYXmLCzfu6jB6e8B0S2eWLKw/
rrU30bAPJbZIbTaZkIC/4rerrhv9jZYliQ9uNheAz15cSHRvrEWn1+8211k+
BWJ4ofKdPkeBGkw3URO9i8TXQMFr774CA9V7KYd6ptDe5CPkDq1vQLpBuVpu
FRslid3m6d36BqrpnQ9eBrOR3kDP9He/7yCjt8TlAP80sku8NCgtVw/Cfr9d
Ma0xg7ZE9/XZmzWCQpX4My2ucyh6bEVVy+0WYLh1rOdFNhct4tdX+m06gPWH
rIrHXny4KORhO+NMB1gc8B05EMmHj6+4aMDL6gCll/Pe8Cfx4fbre5vlpToB
aVzls2wrHy52XlCz/dUJesNe7da04ccnxrYVZ/r/ATX1b9XGNAXwBCU42Kyy
G5Dlw8svfSf+pw8MPrHs6gaRJRn0Hf8E8YuKg1XWM92gsbTdep4khN1ObVXc
tbIH/Lh37piosRCu+6lYcSS+B+h2MspnHgnhF8+RaOLeXmA+x9jNPCSM3cwk
nnP7+0BBv2hyVbMIvqMjXk8j9YMr2rT/VMZEcO0yCm+zcj+YHuY33S0gio3n
RA5cdeoH+7w0BF2NRbH4OwFphYp+oN60lPTrjih+v4EbZfhwALwpSpU/tV0M
M1Yt5O4uHADhvLzuDA8xvEKZ0xn6fQAUH1zx6UOoGL6zMGtezj8I1mPjPRHP
xXBA+RRjW9Ag8B/ROucyK4aVNo16em3/B8y+llruIt5jd60eSYj1+QdCbF2K
d+RT8GW14fKMyH9g7vhckEYl8V67OKg4WfQPPFbUNTs8SsF1qLchXGMIqL+5
1Uw3F8fnrNrh/YUhoMb7k5tQJ45/b/lCr309Amw0M/j2N0lgxSmj9ao1I2D0
VS/vYrcE3v88ySm4ewSEJmhVx01I4J+8k9EqsqNgU+oFd30xSdxSrNAfdGYU
4K8Vsl+AJG5Y6fNqufUYWO5hX2adLompv76jQLcxEN7t5WaYL4kdY83aPoeO
gSbbCw4z7yXxjx4x0cCMMeA8fP6zfLMk/pZYEPBJYhz0uPfse7QkiWvFlwyO
tY2DLHtJm4dOUljk/REbzBwHdylfKvQPSmHbo03u8pQJcNY4RizJRwpXV724
iSwngO1A2Xvh01K4MsKeKZs2AXiZ3iPURCksYFAserR8Akw9O+gZnCqFrTto
GhWtE2DSqmkkJ0sKfzKb2n1EZBLMZnG6csqkMGY8flt+YhIcnTuV2tomhUnP
+L9LX5kEz0weq/P+SmGw88SAX8ok6Pb8MMMdlMIVmVBBunkSXE59bx3LlsLu
BVPvjVQYAHX2D7YLUXFE3MptXSsZQEZHtOCHKBU/9TjUcsWEAQJFR21yxam4
S6JmrNOBAT6vsH25RoaK3QISVa9cZAC/Et4AVKHi+d+iP5g3GMBkPMbmshoV
P9h+NsItkQEYXmt7SuhUXL9y/9+1bxggrlv50V8tKj7+qOZmEmKA240jya0r
qFhExAwKf2OAnhZSQclKKt78T/55Zz8DFPZrNgF9Kv7jHOtky2QAj/aPXwYM
qDi8mk0u5DFA3tva56cNqVjR1KdQRYwJzIdIjtNrqPjti2avKwpMcHPYqNrd
iIqd5K1lWRpMYG+gw32zjoonYgo/uxkygdDKlwNsYyrW8bmtZbSNCb7J+b1c
b0bFlc2k1qS9TCDAMPO3NKdiT+ugWOHDTHBvb3Gu/noq5hX+NQk+wQQyJZmn
hDdQcaKG42DnWSaQj29P/07Y9E7FA9vLTGC0TdoyciMVN5NX2xbeYQJ+TwVD
FQsqDjqVPKvyjAlUtxWeTCcs3iOecSWbCRRCX08ts6TizF3n97NKmCD2YENe
GGEbPCpyqJIJyEF9jzDhXsOD72oamEBDJy9tmnDks7qjRl1MED69UCm/iYpV
pDYoJQ8zwSvHO0w64dKIzDrhGSbYkLVBbRnhfROK4cF8LPD97AcwR1zPOhSn
1yXJAmyjPrtKwgnfZztslVlgq91/xuGE9Sz94wt1WOCg8XqmCuHanJ8WqsYs
8MWXE5pJrN9HxWb8CmSBlXuiSuiEyfFFySx7FpA4dTcrmnj+pwtaDocOsICU
Mde6nshnw7F7izW+LFBNvXRGiPCvdv48o2DC4QyLlUS+/9mFeCRHsEDmsPhl
YyJ/almvlMh1FuCvT9mmR8znte5uHPyQBU6k/HdW3JSK7R5/DOpKY4HzTbsk
2oh5DoqsVd+WzwJVv3lzN4h5XzqT0lhYzgJ9q7asXU30odwl0iiulQVY5ytc
DYj+HKiZ6GX1sICM/yWTeKJfM6budw9NsMChE/xrWvWo2FDBkm0kPAV+pzi7
aBP9/Babk54sOwVMS8pO6BP9PTKtvE+EPgVUyhfCVIl+p7ZwirrMp0CHt6nJ
BxoVb9oS4Ldt6xTomcTNx1SpuOPNb4U3TlPgm4WduYAyFcvdLT0dFzAF0kfP
rWDJU/EVp7D165KI7x+yOvRRjIpvfVt1PCdzChyIXat3Tpjom+3fp9olU6Bg
e76XogAV51puE1BsmgKZ38WzRDlS+KeuUj1XmA2YtknHzDukcHf6D3KYPBt8
qW67wGuSwiO0S8aTGoTDBi7E10nhRfmxxz2WbDAzUNsi/E4Kr+Cr8KkOYYNl
3qveB92VwmsuBD8EF9nA6Lvr8uirUnjD3Iq60gQ26POQjHKLlMIOEzcNszPZ
IP/cfvaxACkc2n6Yc/MvG2gOjexjWRLnXaHgrQM7pgGz4MnQpXbifDUo+9S0
fxq81Ar3UPwuidsyAqd3+E2Dr7nWcv8hSTz29JfrpovTQDx2uDIqTRLLXc/U
1iyZBiefcGhjRySxt/fO92MaMyA2siqDOSSBj/8hT/iumQGOQ4UJY78kcNiB
Yvpfyxng6jL5L6daAl9zpF1u3D8D2J9zL15Ik8CFG5m7ihNmgNL6MsODrhKY
T+7+YCRnBsinPTg8WS6OpSciJGWEZ8Fb5wOnHmeKY3rtEdN02VlQCZ4vSD4Q
x5bnLS7X6s+CrMXnGm6B4vhMf5+2tMcseGdza/V5FXE8/tbIN/XzLEh5d+Rv
RSAFcxNUbhg3zALOu4HX8vspWOyoUFF15yx4qn4i2tSKgleqtguMTs8C9ZDz
3a0yFOwVezF93co5cNa0uj/ujRhu29fQVxk/B6ZmHfKyR0TxoGEZxeXxHPDy
+s1+2CCKp0XT1w2/mAOTvlNf7YtFsUzF6UsSaA58jSlplLooineuoGk6M+dA
nXlm3pysKP40c8Lr37558HpduLOVoQh+/ZDSI0rjAPfNNFfKRiG88sKG61n6
HNAWWCRIXSaE072OmuzYwAHbEsxoDSxBnGRQczV+HwecFnfXjs4UxPGfo42k
4jmgp6kWZMkK4uOT85fk5jnAauL9O0Y7P9azHVpBa14A8M4OnSvGZPxSf1kj
6l4AziXLlbAwGWvI2IR7TiyARL6aqvx2ElbqSqt/LsoFpGDVxtJIEhYL8Tij
BbngJF8yC8cvoZGnP7/ovuYC95v15kPXuShzpvK48RUeKHPcq12mNINWbdQV
n7jLA1EPdzi2FE2jrMgb2a9SeICdW8g5umsa5Yg4jyiV8cDo6jQ54Rg2ylX6
508e5wG7tEZx/gEWertJ1PvH7kVgV0J5nKc8ifDlnQeOqC2B97O57C1T3cjq
a8Gcut4S8H/aGfVUuBt9klJ41GG2BCqpazhVJn/Q50d/fjo4LYGY1veXnc+3
o+qsk3tNYpaA9223cbfJJvT1x21HvpElEHXQxi7PKxsdo4xq/HAlwekp/hRH
6y4wcrZMgHKYBJcXvNcvcP4LjgxdHbT1J8ENaau20Iq7gV/VyqyPISSox9X9
NPmjF3hF+q0tiifBrflbLF5J/AP7p3pAUgUJOtZJf0doEmztaHML0CDDcREt
q2vcOUDLrn4gNEKGHxusnSRCheDeZ6Xv6hhkmLJF/WVxgxC8djerM2GWDNPU
xU+U6gtDdniCxjJBPihDX1dVNSAM6+ydc3XofLDn5MBXMTdRGDYxULXNmQ9W
erY+cTkgDr+vFZy+9okPxh38Xd23QxqGl1rvkXrCDxn7WeEG8orQyK2B4fGc
H56pEPbNtVOEI0tuCfmv+OHpPRLc/VGK0NU27IvTW354Mo/urTemCDf8zAD3
vvND28xxj+qq5XBuSkJ/OUkAMkLsj/yNUoZhhm0Cmr4C0KEnfB9DgQaDXh4v
NjUUhHt5ds63vTThn3rl+5KmgtD2ccE5/1hNuHO+LmTQQhBezbNtccnQhKvs
ddc+sBOE6dcktl6Z0IT9zIHsaV9B6PvOYVL9vBZ0sfR4/jZJEE4Nq8zbJ2nD
TS1O8UZiRE5qj0JzGTpQnM/Ma/WAEJSRupxnPaoPey+1aHk5isDng1e2vlNb
B/8HEzrHzQ==
                   "]]}, Annotation[#, "Charting`Private`Tag$2274916#1"]& ], 
                
                TagBox[{}, 
                 Annotation[#, 
                  "Charting`Private`Tag$2274916#2"]& ]}}, {}, {}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
              AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, {{-15., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-10., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {10., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {15., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-20., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-19., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-18., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-17., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-16., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-14., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-13., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-12., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-11., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-9., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-8., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-7., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {7., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {8., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {9., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {11., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {12., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {13., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {14., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {16., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {17., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {18., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {19., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {20., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{-4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {None, None}, 
              DisplayFunction -> Identity, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
              All, DisplayFunction -> Identity, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, Epilog -> {
                AbsolutePointSize[5], 
                Hue[0], {
                 TagBox[
                  TooltipBox[
                   PointBox[{-3, 0}], 
                   TemplateBox[{"\"(\"", 
                    RowBox[{"-", "3"}], "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", -3, ",", 0, ")"}], "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PointBox[{0, 0}], 
                   
                   TemplateBox[{"\"(\"", "0", "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", 0, ",", 0, ")"}], "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PointBox[{2, 0}], 
                   
                   TemplateBox[{"\"(\"", "2", "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", 2, ",", 0, ")"}], "Tooltip"]& ]}}, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, GridLinesStyle -> {
                GrayLevel[0.85], 
                GrayLevel[0.9]}, ImageSize -> 330., 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                PointSize[Medium], "PointSizeFunction" -> "SmallPointSize", 
                "ScalingFunctions" -> None, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{-5.5, 4.5}, {-15.752256658984564`, 
               19.120014520338945`}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "Solve", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"NumberLinePlot[x == -3 || x == 0 || x == 2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{-3., 0.16499999999999998`}]}, 
                   RowBox[{"-", "3"}]], Annotation[#, -3., "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.16499999999999998`}]}, "0"], 
                  Annotation[#, 0., "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{2., 0.16499999999999998`}]}, "2"], 
                  Annotation[#, 2., "Tooltip"]& ]}}, ImageSize -> 330., 
               Axes -> {True, False}, PlotRange -> {{-3.25, 2.25}, Automatic},
                AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Product of roots", "scanner" -> "Solve", "id" -> 
     "ProductOfRoots", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(((-1)^Exponent[-6 x + x^2 + x^3, x] First[#1])/Last[#1] & \
)[CoefficientList[-6 x + x^2 + x^3, x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["0", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Sum of roots", "scanner" -> "Solve", "id" -> 
     "SumOfRoots", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(-(#1[[-2]]/Last[#1]) & )[CoefficientList[-6 x + x^2 + x^3, x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"-", "1"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.1400000000000001", "parsetiming" -> "0.657", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa50431i3h0248ef5b88bc0000680h4ge404b4h22i", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "35", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa50441i3h0248ef5b88bc0000536ehf010a8h9a0b1772263090609295160", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 14, 20, 52, 13.278526`8.875724821987426}, "Line" -> 
    77, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "roots of x^3 + x^2 - 6 x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {527., 534.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"9378bc9c-baab-493c-86f0-\
9baba2fd225c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CreatePalette", "[", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Extensible Brackets\>\"", ",", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"PasteButton", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"RawBoxes", "@", 
                    RowBox[{"RowBox", "@", 
                    RowBox[{"Insert", "[", 
                    RowBox[{
                    "#", ",", "\"\<\[SelectionPlaceholder]\>\"", ",", "2"}], 
                    "]"}]}]}], ",", 
                    RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}], 
                  "]"}], "&"}], ",", 
                RowBox[{"Most", "@", 
                 RowBox[{"Tuples", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<[\>\"", ",", "\"\<{\>\"", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<]\>\"", ",", "\"\<}\>\"", ",", "\"\<\>\""}], 
                    "}"}]}], "}"}], "]"}]}]}], "]"}], ",", "4"}], "]"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"PasteButton", "[", 
                RowBox[{"RawBoxes", "[", "#", "]"}], "]"}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[UnderBrace]\>\""}], "]"}], ",", 
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[UnderParenthesis]\>\""}], "]"}], ",", 
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[UnderBracket]\>\""}], "]"}], ",", 
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", "\"\<_\>\""}], 
                   "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[OverBrace]\>\""}], "]"}], ",", 
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[OverParenthesis]\>\""}], "]"}], ",", 
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[OverBracket]\>\""}], "]"}], ",", 
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", "\"\<_\>\""}], 
                   "]"}]}], "}"}]}], "}"}], ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
          RowBox[{"Spacings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"FontSize", "\[Rule]", "8"}]}], "]"}]}], "}"}], "]"}], "]"}], 
  "\n"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"496f8b49-5ad8-4c56-b196-8c971b9ac563"],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["2vce5_shm", 3, 1]],33,
   "FrontEndObject[LinkObject[\"2vce5_shm\", 3, 1]]","33","\"Untitled-1\""},
  "NotebookObjectUnsaved"]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"c60ac999-2c84-45d0-b14e-69d3c0256e44"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SuperscriptBox["x", "3"]}], ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}], 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}]]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"940e53c5-1b12-4c2b-9d78-fe34de4309d0"],
 "."
}], "SubitemNumbered",ExpressionUUID->"60729844-93bd-43c1-bbb3-6de130f96267"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      FractionBox[
       RowBox[{"1", "-", 
        SuperscriptBox["x", "3"]}], 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        RowBox[{"4", "x"}], "+", "3"}]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{"-", 
          SuperscriptBox["x", "3"]}], "+", "1"}], 
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         RowBox[{"4", "x"}], "+", "3"}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
     RowBox[{
      RowBox[{"\[Integral]", 
       FractionBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "13"}], "x"}], "-", "11"}], 
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         RowBox[{"4", "x"}], "+", "3"}]]}], "-", "x", "+", 
      RowBox[{"4", 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"bb6e1f2e-bb11-4d22-8159-7306c8cbcf9d"],
 "."
}], "Text",ExpressionUUID->"369ba62b-6a6d-439f-b603-0d1cfe689cbb"],

Cell[TextData[Cell[BoxData[
 FormBox[GridBox[{
    {
     RowBox[{"-", 
      SuperscriptBox["x", "3"]}], 
     RowBox[{
      RowBox[{"+", "0"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"+", "0"}], "x"}], 
     RowBox[{"+", "1"}], "\[Divide]", 
     SuperscriptBox["x", "2"], 
     RowBox[{
      RowBox[{"+", "4"}], "x"}], 
     RowBox[{"+", "3"}]},
    {
     RowBox[{"+", 
      SuperscriptBox["x", "3"]}], 
     RowBox[{
      RowBox[{"+", "4"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"+", "3"}], "x"}], " ", " ", 
     RowBox[{"-", "x"}], 
     RowBox[{"+", "4"}], " "},
    {"0", 
     RowBox[{
      RowBox[{"+", "4"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"+", "3"}], "x"}], 
     RowBox[{"+", "1"}], " ", " ", " ", " "},
    {" ", 
     RowBox[{
      RowBox[{"-", "4"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"-", "16"}], "x"}], 
     RowBox[{"-", "12"}], 
     FormBox[" ",
      TraditionalForm], " ", " ", " "},
    {" ", " ", 
     RowBox[{
      RowBox[{"-", "13"}], "x"}], 
     RowBox[{"-", "11"}], " ", " ", " ", " "}
   }], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"00e88d35-cac2-495c-b04f-5210f01e9164"]], "Text",\
ExpressionUUID->"7bd8ef53-5ddf-48d3-b91f-3ff569aaf5c1"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}], "\[Implies]", "x"}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"-", "4"}], "\[PlusMinus]", 
       SqrtBox[
        RowBox[{"16", "-", "12"}]]}], "2"], "=", 
     RowBox[{
      StyleBox["{",
       StripOnInput->False,
       SpanMaxSize->DirectedInfinity[1]], GridBox[{
        {
         RowBox[{
          FractionBox[
           RowBox[{
            RowBox[{
             StyleBox["-",
              StripOnInput->False,
              SpanMaxSize->DirectedInfinity[1]], "4"}], "+", "2"}], "2"], "=", 
          RowBox[{"-", "1"}]}]},
        {
         RowBox[{
          FractionBox[
           RowBox[{
            RowBox[{"-", "4"}], "-", "2"}], "2"], "=", 
          RowBox[{"-", "3"}]}]}
       }]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"501650b9-9c09-4e62-9406-1dbc56c0e4ba"],
 "."
}], "Text",ExpressionUUID->"367143d3-8a6f-4060-8022-298e6fbde2cb"],

Cell[TextData[{
 "Agora vamos achar como representar o polin\[OHat]mio do denominador (",
 Cell[BoxData[
  FormBox[
   RowBox[{"Q", "(", "x", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"cb3d0fbb-8159-4959-863f-cc0d78313013"],
 ") como seus fatores. Isso \[EAcute] para simplificar a parte racional da \
integral, portanto n\[ATilde]o estamos ignorando o resto (",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "x"}], "+", "4"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"f8de0a28-081b-47f7-a478-2c99977ed468"],
 "), que ser\[AAcute] avaliado oportunamente."
}], "Text",ExpressionUUID->"23a37fc1-bfcd-4f0b-ae89-10a6206537d4"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{
       RowBox[{"-", "13"}], "x"}], "-", "11"}], 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}]], "\[Congruent]", 
    RowBox[{
     FractionBox["A", 
      RowBox[{"x", "+", "1"}]], "+", 
     FractionBox["B", 
      RowBox[{"x", "+", "3"}]]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"A", "(", 
       RowBox[{"x", "+", "3"}], ")"}], "+", 
      RowBox[{"B", "(", 
       RowBox[{"x", "+", "1"}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "+", "1"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"x", "+", "3"}], ")"}]}]], "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"A", " ", "x"}], "+", 
        RowBox[{"3", "A"}], "+", 
        RowBox[{"B", " ", "x"}], "+", "B"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "+", "1"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"x", "+", "3"}], ")"}]}]], "\[Implies]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"A", " ", "x"}], "+", 
        RowBox[{"3", "A"}], "+", 
        RowBox[{"B", " ", "x"}], "+", "B"}], "\[Implies]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "13"}], "x"}], "-", "11"}]}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "(", 
         RowBox[{"A", "+", "B"}], ")"}], "-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "3"}], "A"}], "-", "B"}], ")"}]}], "\[Implies]", 
       "\[IndentingNewLine]", 
       RowBox[{
        StyleBox["{",
         StripOnInput->False,
         SpanMaxSize->DirectedInfinity[1]], 
        RowBox[{
         StyleBox[
          RowBox[{GridBox[{
             {
              RowBox[{
               RowBox[{"A", "+", "B"}], "=", 
               RowBox[{"-", "13"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", "3"}], "A"}], "-", "B"}], "=", "11"}]}
            }], "\[Implies]", "\[IndentingNewLine]", "A"}],
          StripOnInput->False,
          SpanMaxSize->DirectedInfinity[1]], 
         StyleBox["=",
          StripOnInput->False,
          SpanMaxSize->DirectedInfinity[1]], 
         RowBox[{
          StyleBox[
           RowBox[{
            RowBox[{
             RowBox[{"-", "13"}], "-", "B"}], "\[Implies]", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "3"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "13"}], "-", "B"}], ")"}]}], "-", "B"}]}],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox["=",
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          RowBox[{
           StyleBox[
            RowBox[{"11", "\[Implies]", "\[IndentingNewLine]", 
             RowBox[{"39", "+", 
              RowBox[{"3", "B"}], "-", "B"}]}],
            StripOnInput->False,
            SpanMaxSize->DirectedInfinity[1]], 
           StyleBox["=",
            StripOnInput->False,
            SpanMaxSize->DirectedInfinity[1]], 
           RowBox[{
            StyleBox[
             RowBox[{"11", "\[Implies]", 
              RowBox[{"2", "B"}]}],
             StripOnInput->False,
             SpanMaxSize->DirectedInfinity[1]], 
            StyleBox["=",
             StripOnInput->False,
             SpanMaxSize->DirectedInfinity[1]], 
            RowBox[{
             StyleBox[
              RowBox[{
               RowBox[{"-", "28"}], "\[Implies]", "B"}],
              StripOnInput->False,
              SpanMaxSize->DirectedInfinity[1]], 
             StyleBox["=",
              StripOnInput->False,
              SpanMaxSize->DirectedInfinity[1]], 
             RowBox[{
              StyleBox[
               RowBox[{
                RowBox[{"-", "14"}], "\[Implies]", "\[IndentingNewLine]", 
                "A"}],
               StripOnInput->False,
               SpanMaxSize->DirectedInfinity[1]], 
              StyleBox["=",
               StripOnInput->False,
               SpanMaxSize->DirectedInfinity[1]], 
              RowBox[{
               StyleBox[
                RowBox[{
                 RowBox[{"-", "13"}], "+", "14"}],
                StripOnInput->False,
                SpanMaxSize->DirectedInfinity[1]], 
               StyleBox["=",
                StripOnInput->False,
                SpanMaxSize->DirectedInfinity[1]], 
               StyleBox[
                RowBox[{
                 StyleBox["1",
                  StripOnInput->False,
                  SpanMaxSize->DirectedInfinity[1]], 
                 StyleBox[".",
                  FontSize->14]}]]}]}]}]}]}]}]}]}]}]}]}]}]}], 
  TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"8910e127-f036-4ccd-9ff8-094247afe413"]], "Text",\
ExpressionUUID->"ee18b39e-796a-4af3-a8f5-482c35fb7211"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}], 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}]]}], "-", "x", "+", 
    RowBox[{"4", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      FractionBox["1", 
       RowBox[{"x", "+", "1"}]]}], "-", 
     FractionBox["14", 
      RowBox[{"x", "+", "3"}]], "-", "x", "+", 
     RowBox[{"4", 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{
        FractionBox["1", 
         RowBox[{"x", "+", "1"}]], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "-", 
      RowBox[{"14", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["1", 
          RowBox[{"x", "+", "3"}]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{
        RowBox[{"-", "x"}], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{"4", 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ln", 
       RowBox[{"\[LeftBracketingBar]", 
        RowBox[{"x", "+", "1"}], "\[RightBracketingBar]"}]}], "-", 
      RowBox[{"14", "ln", 
       RowBox[{"\[LeftBracketingBar]", 
        RowBox[{"x", "+", "3"}], "\[RightBracketingBar]"}]}], "-", 
      FractionBox[
       SuperscriptBox["x", "2"], "2"], "+", 
      RowBox[{"4", 
       RowBox[{"x", 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"092a9f52-d2ff-4604-b082-f755bb9211cc"]], "Text",\
ExpressionUUID->"b2761751-db20-4006-9f89-e3b2942eba32"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"FullSimplify", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"-", 
       SuperscriptBox["x", "3"]}], "+", "1"}], 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}]], "]"}], ",", 
   RowBox[{
    RowBox[{"-", "x"}], "*", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        RowBox[{"4", "x"}], "+", "3"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x"}], "+", "4"}], ")"}]}], "+", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}], ")"}]}], "]"}], ",", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "x"}], "+", "4"}], ")"}], "*", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}], ")"}]}], "]"}], ",", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}], 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}]], "-", "x", "+", "4"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"-", "x"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"4", ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}]], ",", "x"}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"9abe5634-bcd2-4a65-b6d1-dc7bd15883c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"1", "-", 
     SuperscriptBox["x", "3"]}], 
    RowBox[{"3", "+", 
     RowBox[{"4", " ", "x"}], "+", 
     SuperscriptBox["x", "2"]}]], ",", 
   RowBox[{"-", 
    SuperscriptBox["x", "3"]}], ",", 
   RowBox[{"1", "-", 
    SuperscriptBox["x", "3"]}], ",", 
   RowBox[{"12", "+", 
    RowBox[{"13", " ", "x"}], "-", 
    SuperscriptBox["x", "3"]}], ",", 
   FractionBox[
    RowBox[{"1", "-", 
     SuperscriptBox["x", "3"]}], 
    RowBox[{"3", "+", 
     RowBox[{"4", " ", "x"}], "+", 
     SuperscriptBox["x", "2"]}]], ",", 
   RowBox[{"-", 
    FractionBox[
     SuperscriptBox["x", "2"], "2"]}], ",", 
   RowBox[{"4", " ", "x"}], ",", 
   RowBox[{
    RowBox[{"4", " ", "x"}], "-", 
    FractionBox[
     SuperscriptBox["x", "2"], "2"], "+", 
    RowBox[{"Log", "[", 
     RowBox[{"1", "+", "x"}], "]"}], "-", 
    RowBox[{"14", " ", 
     RowBox[{"Log", "[", 
      RowBox[{"3", "+", "x"}], "]"}]}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"35f0b53b-50c0-413d-93f6-7b1a4bba842c"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderscriptBox[
     OverscriptBox["\[Integral]", "5"], "2"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"2", "+", 
       RowBox[{"2", "x"}], "+", 
       RowBox[{"3", 
        SuperscriptBox["x", "2"]}]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"b098a96e-24e7-4c1c-addc-9db202c1075c"],
 "."
}], "SubitemNumbered",ExpressionUUID->"5278fed7-7bc9-4ef0-b5b2-ccf41e934d68"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", "2"}], "+", 
    RowBox[{"2", "x"}], "+", 
    RowBox[{"3", 
     SuperscriptBox["x", "2"], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"2", "x", 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"3", 
       SuperscriptBox["x", "2"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "+", 
      FractionBox[
       RowBox[{"2", 
        SuperscriptBox["x", "2"]}], "2"], "+", 
      FractionBox[
       RowBox[{"3", 
        SuperscriptBox["x", "3"]}], "3"]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "x"}], "+", 
       SuperscriptBox["x", "2"], "+", 
       RowBox[{
        SuperscriptBox["x", "3"], 
        StyleBox[".",
         FontSize->14], 
        StyleBox["\[IndentingNewLine]",
         FontSize->14], 
        RowBox[{
         UnderoverscriptBox["\[Integral]", "2", "5"], "2"}]}], "+", 
       RowBox[{"2", "x"}], "+", 
       RowBox[{"3", 
        SuperscriptBox["x", "2"], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"2", "\[CenterDot]", "5"}], "+", 
        SuperscriptBox["5", "2"], "+", 
        SuperscriptBox["5", "3"], "-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "\[CenterDot]", "2"}], "+", 
          SuperscriptBox["2", "2"], "+", 
          SuperscriptBox["2", "3"]}], ")"}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"160", "-", "16"}], "=", 
        StyleBox[
         RowBox[{"144", 
          StyleBox[".",
           FontSize->14]}]]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"5282916f-7369-4fe4-be3b-b51e8717242a"]], "Text",\
ExpressionUUID->"99dde00e-a20b-449d-9c23-9cf9aa2490c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"2", "x"}], "+", 
      RowBox[{"3", 
       SuperscriptBox["x", "2"]}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"2", "x"}], "+", 
      RowBox[{"3", 
       SuperscriptBox["x", "2"]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "2", ",", "5"}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"1d4e3019-9b2a-4fe5-8358-33977d274c4f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"2", " ", "x"}], "+", 
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["x", "3"]}], ",", "144"}], "}"}]], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"2d132960-92de-4a46-8b18-7389552aab9c"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderscriptBox[
     OverscriptBox["\[Integral]", "9"], "1"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SqrtBox["x"], "-", 
       FractionBox["1", 
        SqrtBox["x"]]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"edca483c-14f7-4eda-b692-32cdea5d947d"],
 "."
}], "SubitemNumbered",ExpressionUUID->"ff0ff674-96e6-43b1-ae33-24a2d7bec925"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     SqrtBox["x"]}], "-", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["x"]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       SuperscriptBox["x", 
        FractionBox["1", "2"]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "-", 
     RowBox[{"\[Integral]", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         SqrtBox["x"], ")"}], 
        RowBox[{"-", "1"}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      FractionBox[
       SuperscriptBox["x", 
        FractionBox["3", "2"]], 
       FractionBox["3", "2"]], "-", 
      RowBox[{"\[Integral]", 
       RowBox[{
        SuperscriptBox["x", 
         RowBox[{"-", 
          FractionBox["1", "2"]}]], 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"2", 
         SuperscriptBox["x", 
          FractionBox["3", "2"]]}], "3"], "-", 
       FractionBox[
        SuperscriptBox["x", 
         FractionBox["1", "2"]], 
        FractionBox["1", "2"]]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{"2", 
          SuperscriptBox["x", 
           FractionBox["3", "2"]]}], "3"], "-", 
        RowBox[{"2", 
         SuperscriptBox["x", 
          FractionBox["1", "2"]]}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"2", 
           SuperscriptBox["x", 
            FractionBox["3", "2"]]}], "-", 
          RowBox[{"6", 
           SuperscriptBox["x", 
            FractionBox["1", "2"]]}]}], "3"], "=", "\[IndentingNewLine]", 
        RowBox[{
         FractionBox[
          RowBox[{"2", 
           RowBox[{
            SuperscriptBox["x", 
             FractionBox["1", "2"]], "(", 
            RowBox[{
             SuperscriptBox["x", 
              RowBox[{
               FractionBox["3", "2"], "-", 
               FractionBox["1", "2"]}]], "-", 
             RowBox[{"3", 
              SuperscriptBox["x", 
               RowBox[{
                FractionBox["1", "2"], "-", 
                FractionBox["1", "2"]}]]}]}], ")"}]}], "3"], "=", 
         "\[IndentingNewLine]", 
         RowBox[{
          FractionBox[
           RowBox[{"2", 
            RowBox[{
             SuperscriptBox["x", 
              FractionBox["1", "2"]], "(", 
             RowBox[{"x", "-", "3"}], ")"}]}], "3"], "=", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             FractionBox[
              RowBox[{"2", 
               SqrtBox["x"], 
               RowBox[{"(", 
                RowBox[{"x", "-", "3"}], ")"}]}], "3"], 
             StyleBox[".",
              FontSize->14], 
             StyleBox["\[IndentingNewLine]",
              FontSize->14], 
             RowBox[{
              UnderoverscriptBox["\[Integral]", "1", "9"], 
              SqrtBox["x"]}]}], "-", 
            RowBox[{
             FractionBox["1", 
              SqrtBox["x"]], 
             RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             FractionBox[
              RowBox[{"2", 
               RowBox[{
                SqrtBox["9"], "\[CenterDot]", "6"}]}], "3"], "-", 
             FractionBox[
              RowBox[{"2", 
               RowBox[{
                SqrtBox["1"], "\[CenterDot]", 
                RowBox[{"(", 
                 RowBox[{"-", "2"}], ")"}]}]}], "3"]}], "=", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"12", "-", 
              FractionBox[
               RowBox[{"-", "4"}], "3"]}], "=", "\[IndentingNewLine]", 
             RowBox[{
              FractionBox["40", "3"], 
              StyleBox[".",
               FontSize->14]}]}]}]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"a7ff443b-34d0-4fb3-b9ac-58379042ae92"]], "Text",\
ExpressionUUID->"2ef79034-ba30-4c78-b524-d0d915dec2be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Simplify", "@", "2"}], 
     SuperscriptBox["x", 
      FractionBox["3", "2"]]}], "-", 
    RowBox[{"2", 
     SuperscriptBox["x", 
      FractionBox["1", "2"]]}]}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SqrtBox["x"], "-", 
      FractionBox["1", 
       SqrtBox["x"]]}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     SuperscriptBox["x", 
      FractionBox["1", "2"]], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     SuperscriptBox["x", 
      RowBox[{"-", 
       FractionBox["1", "2"]}]], ",", "x"}], "]"}], ",", 
   RowBox[{"Simplify", "@", 
    FractionBox[
     RowBox[{"2", 
      RowBox[{"x", "(", 
       RowBox[{
        SuperscriptBox["x", 
         FractionBox["1", "2"]], "-", 
        RowBox[{"3", 
         SuperscriptBox["x", 
          RowBox[{"-", 
           FractionBox["1", "2"]}]]}]}], ")"}]}], "3"]}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SqrtBox["x"], "-", 
      FractionBox["1", 
       SqrtBox["x"]]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "9"}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"46dcb6dc-4f11-412c-877b-c07f9d91b151"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "2"}], " ", 
     SqrtBox["x"]}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", 
      RowBox[{"3", "/", "2"}]]}]}], ",", 
   RowBox[{
    FractionBox["2", "3"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "x"}], ")"}], " ", 
    SqrtBox["x"]}], ",", 
   FractionBox[
    RowBox[{"2", " ", 
     SuperscriptBox["x", 
      RowBox[{"3", "/", "2"}]]}], "3"], ",", 
   RowBox[{"2", " ", 
    SqrtBox["x"]}], ",", 
   RowBox[{
    FractionBox["2", "3"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "x"}], ")"}], " ", 
    SqrtBox["x"]}], ",", 
   FractionBox["40", "3"]}], "}"}]], "Output",
 CellLabel->
  "Out[130]=",ExpressionUUID->"0c95a324-270e-493d-a874-7007dc2a5786"]
}, Open  ]],

Cell["\<\
Fa\[CCedilla]a um gr\[AAcute]fico e determine a \[AAcute]rea da \
regi\[ATilde]o entre a reta e a curva.\
\>", "ItemNumbered",ExpressionUUID->"afd24148-cb9b-4eb0-a9a4-3bc38d4b78fd"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    SuperscriptBox["x", "2"]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"fe63f602-9e0d-4983-8391-17c3521783a5"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"2", "-", 
     SuperscriptBox["x", "2"]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"87e4ab12-ac3e-4d7c-9ba7-83af7f21460f"],
 "."
}], "Text",ExpressionUUID->"c93c8066-de81-4bf4-b770-664a633dcd3f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", 
     RowBox[{"2", "-", 
      SuperscriptBox["x", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5"}], ",", "5"}], "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"e2f1f888-19d5-45fc-ba92-8ed46293c0e1"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw1mOc71n3cgO3NhZu6FTJKVlYoFZ+fkqQQmZFVKEqyZYaErJAdslUuO9vX
3ntvIiMrMkK4nvs5jud5df4D5/nm5DZ9oWFGQkRExExMRPS/FIETywQCAVl5
CA8QCDjsxT6v//4BAWl+Ux3b2sFheYXifFs7BOSQb2P/cwWHSfCrmC6sEJDp
ZuHj0WEcdonJd6xjmICWoy9JdeTiMGxusy02l4BSPC9GHRnhMI23nV8uGhFQ
ZdmRTmgtA+bU7fvcovoYfRwZH7MOoMcGBmiXa02OkN4LC/YHBzQYR80Llkvs
h4iRx0/BJZ8KK7ZqIMdNHiDP+Xkv0WAKzDhIfGPUex99UByNfqdNhu2Fu/oj
2ENhgg/vcBqTYKkMU2wx33dRMt29AAsDIixBWdy2P2AHHSjm3rE+PgTvZybO
Are3UY1v6yXp0n1wJf3sZLv2G0m8DjQif7wLJl7dZ4eyNpEezuZzpfsWfKia
j0mw3EAvaArCCcMbUD7NT/eVZx2xuJPy85usAi8jdl0zcQVJipWGyQ4tQoGg
v+Xs3BLC4bVeCRrMwXRjPpe09AJizDl82zE4BfPCHyTQtzmUOdBpeEF5BJg8
sqVFiL8jDjd7ZW/mPvD7xt/C+GcGCWz4ZVAd9cLBeqbe1uoMkl+L7Yhf7IVZ
owy30pEZlORd67hU2QsF8ql11/NmEN2pkzdOP+kFDfKPqjpGMyj/73jFQk0P
nGfj7iRynUb3WGL1Bfe6QFj6l3D61gRyzHzPlyzeBuYinp5lkxOIYdl7jYym
DZL4cH2dzROoY+Nz5dvZVmA+Keq0Gz+BkHKS3WJEK/z5Y117S2ECuYmxKeD2
WqCubF1rOXIc6darvyBqagZd2XUPUekx9J5iaP2JcyOES3n03uAaQyxdSZUh
mo3QfoHhrC7NGKrSSw7vE2sEOU6RVq+pUeRXdVOn6GcD8BKe/9PnN4p+feO+
MWPQAOs1a5n2wyOI5yVn+qhSPfgorPWUOQ8jGlKhcI1LtVCntKom+WgYcRcu
VnedrAUilZUuvMowendgM2WxVwNuWj87UnmGkYnaz52NshpwNJ9vCe4YQjim
l36GcjXwxH+yxoRrCPUvlemrxlbD3Y7OPOqWAXTV8a7w5FE5BPZ0iPoWDKCK
LyuXmZvKoWWgHX+cMIAWcGeFXoeUw83J1q9bLwcQ9ti4ho6rHOTWG7MmTw+g
X9co8WM3y0CMsTo5/0U/UsPTR6knlACrJj5M72QfYnp/FPPFvggK+N6V3yTt
Q/hVhtCHt4rg3r7FD/FfvajyvNeS/KkiCEzkvkzT3IvYr3k3fqophOOlyOly
x15EOkXGX40rhAV3VxH2oR5kRUEW+rQkH6zV3sdUCXQjlf7+VlY9PGRtK69+
IO5GRObrwcy0eJiNJcOsR7tQSEnLv/ZVOaD9w2mRM6ALQXSltxlvDoCLobTX
UifaUPqUSbz9BRhThQauZ3agNw6GUmeysqFgtxHXcrYNeW5lGv/ST4eQzyl1
cvutqE9B9SklazpYGXo6FHe2InXr4KUPXWlwtunyeIpjK2q7PaR84kYaRH34
kuHe0oJyecIT08RT4ZXke9mLz5rRLYMC7z9nP4H20vONbKz5v54Wth3nk+Fi
gnIqF2szUpkomHyWkQyrpGTUDNVNaL/yxD+VAslg2O84sIRrQoEY06keq0S4
bmtglVjYgDQnBVxXW+KAk0+Gk9W/AZkGfpUo142Dv6Osve8MGlDTovGw/c9Y
KJLvlnYhb0B+hYZLefSxwMd0nURTpx6thOD5FUyigSbvfCz131qkppXEMywZ
Cenj88E/fasRiXzgn4eng2HM7UTSx4vVaDm9qv3U6yBg4LyVpz5bhaT0hQrs
l96Bo3FWXxlUoT/fiosJFYGgOG95MvCgAold9Iu2dfSHpfVfyYI2ZchW7kRT
+2VfYA/jKpjiLEMfs9er9Ep94J64en14Zym6YEbc4ivjA6V2BfMHgqXIpXOQ
uQDzhoA9e8H2+W+oyfSKz1NTLxAkOSi00i9CD7D5j9ELLmCYKth4hqYIXeGd
GdBic4FwBf2h/tJCNJehJqaq5gwHfpV7V08UopCwIM21Bkdop/WUpevNR6pr
7hrzQ3ZAlJOrWuOZjxyHOHLsee1AUnXGyF4kHz0ylhCWs7OFhDB574l3eShG
uyzak/0ljAhShegF41FfjLuSs9BzwJ4/zatdzkEZTpQ3ZfasICu3rU9AKQfR
xrwKtG63BBfJ4JMHJF9R4Ef2Dak3T+CUHPOnOOdspFWhxndZ8TF4e9nVkwxl
oYIMXst4xUewUjcwb3kxC6X0z+zaqphC5a1owavrGUjy94kVD2tjeKjOXjT+
KA0p+/5wYznUg9WtHRmHhlSURY9LJ3mmC25R3YjhXCo6V907rrukDQnj3u3y
C5+QS+QZB1kKTRD2MFAfV/yE1Mo/D7dnakAFl/SwfWYykqfsUqrTUoei9r5G
td5EdCxcntOVowIDjH693uEfUXT++0UhzTuwpSUzWXw/AT31jZXT++c2SMwk
bZ8eikW1LFcUzk4ogPq5+0Rq0TFIoa/vd+38dbCxpKDz1o3+r+f4alEqecjd
fsa7NBaJLGrc9f+IXIUuGS7R0wkRSClHPKWQ6jKse/RfUX0Yjj5JK/IyskgB
fYOf4mvO9+iFQcUUnboE6DLbpz1BochMlif7vqcoRCeMVXTJB6PxgxDqLiQI
Q3zy/ZINgUhus3LK/xEfsORnLscp+qN3XF/5fS154P5VBhLi1jcohKmsyzOb
A8Ib7dks7vig6fsJUs4KJ6FHbVyss9MLUVCR+G2mMwFnkU+YebIbYjYY8ByO
p4b4lntIIt0JtbzLbup0JoZ/JznWj7NtkbEcZe27xh05oblBmaiHVkhUL1CK
YL4ox0dnEy1iYYLa/S9aTqz1yXkN8A+crldBtxfaaZXwX+SEcZOW5Bck4U9U
qgzdSxe5oU3vJMY9XSBz3dmId62X21A7//uFrTnI0EjrLrhPy7lGKLZZSdoA
DweFps/TDbljD5f4JFEHOOVJVRpGfyjnZfn1Wb/gK7iiSfO9x4wcSLWnZSn5
PCH+LqvMuDoD1HMFvP3I6A26kcwFdmYs4BvFY3MpxBdkttnzXz05BYp0lbq9
tG/h7+zAXeJYLqD01pK3CgiAJt+JYnKTs9DyZ12AnDII3IzSI5SD+CHwuT9z
km8IcNuJLnSfugAZm2Hu7K/DYNSoakiZQhwsLATNvx2HQ8drQZXNIGlQ4nF6
4CMbCc5Hm9NFcTLAP1mves/tA0Sznsr5d+waLGs8vLS8Hw1J9IquM7vy0Eb/
WajkciwYk1mVkXy/AV9ads/4OsWB4e0alp25m/BMLoyKcycBaKr/8ihLKoPK
/sTh8sVEKFv7Pvj19V0QKRLYLLFNglSrvfTpRVXYi/y+yr+XDKwC410PCOpQ
RuM6WOeQCoc/yh2YvuhA8gXW/lyeNDAV864j0dEDv3u5PQndaRC6qbofzKQP
mlFz7Y4CGaAyuHfWtsAQNrjv1glOZgEX063yUvVHMKywgE4GZsPf4BoqNtPH
UG3hVUV26TNUNl672+RiBu9yikqnwr7ATzPZAkpkAXwyHLnhCnggfWp0cO7T
M6AzKPnquYkH8qr1jbWV57Dlof75WWIurLV7TZDIvQDj2ToNXrc8kA7WbqU+
tAER/j8qR4P5wCIbIbv03Q5aC40U8gOK4BaPKueEwSu41ihcf36mCGxSv9Rm
XnOFvKF9+UTpYmDwDpxm43KDqP0IeDdXDPE6HYGbm+7wGFqumMmWAL1EnlrJ
jBcQ2sTE2TbLQInYbKab8g3YThzlht4qB5scTr+fkW9gYa1NhCKxHDSp2J4O
8fpBB6OZ8JZyBVxv614QuPUW4rRjz3emVUK/x83aktQAkJol5nytiwD/Wf23
dVEIiJTrbIplI3AlGTNWuR8KfOE5DTP7CCKmRIvrtkKB9tNXqWSVGhhkSqEs
SwiDw3u6E4T1GqiweduwufIeJvNyBZB4HVR+iGr1z4uEsYQH/5x8UAe0PxRF
c+k+wJA/+ZG1dx14bE9Sfnr6AbqM9Xs4++tgVL+GafFcFFQzUjp52NeDvoK2
/2Hmf97ZGDbIljRAjFsTkUpfHCQYUOM/TDeA2tpspODVeIhRKopeo2wEQa6F
+P60eAjjorH6qNsI9zuSSfxfJYBXTzHT0X4j2MktSrwSTQQTMXqjymvNsKtg
gKubTgbejYr9K3WtMGn4jelkZRq4dd7w3V5rhXCvSZ8SknQY+tzOgGdrg4aB
Irvu2+kQaDbOy/2yDeJY7DvMRtNhY+xAhZKrHSh/S5oKH2dAdaNMSr97B+zy
1nByG2bDg/gS5Wcy3cD5+HA8ywkPRc4weM6sGy4NCpDJdOKBQbvZaDqsG9qd
KT9jvLlQyzhsr7HUDaY6/dbfenKB5YarWsKdHhAq017/GJMHrqVxLt4HPZAd
WnxWh6wAbqeOdqrq9kG7oF9hDFUxbLzBmzc+74MHgrzX12SKIeaJD+GqTx94
5WLmrlbFsHThgrgAvg9ClY+sFbqLwb/UK5KUrB8K6t28A2K/QUvnef3S3H6g
rYvMn75cCrf2HJa4KQeB7he/WGVKBdxUYSbdKR4GPvKXw3HvayHEhHpzv3UY
1EqJOTVya2HEgWj6eHIYDkcXbHg6a8Eycb2cimIEhp7grzJQ10HIrzZbdu0R
SCiSMGP+z4OR9z6zN3ZH4CUZI1Wncz1YDm3XhkuPgcQbjmBal0YINRr2EiuZ
AHZa38ichlbwW70GCx0TcDWydbVgpRU8XFKO4mcn4LXmxfJB5jawjnj+ipJh
Etxf2RXZmbSBajOp/dTjSZA0yOBjImoHBlExiyDmKUhxHCLuu94BIcf+KkvP
p8GZ0jjCaqoLmlU56O8xfwf/u0FMBOk+WONm9eiLm4NVZzmaEPIRcLAXMgk9
sQD74W9PCXpMwfAEo4Z5yxJQK5u6eonPgbHLtUXKuyvQYFT3l/j2ItQLXQqs
J18Hbu+1r92Cq8BHXbmUprQBC4bKaRHhG8BRaXWT3H8TOvp5gkOltoDogCTb
dvY3HOykLFAo78If9SrDxnPb8PW8RHST4T6MSxqdPue7A9YJdh1nfx2CjQ4j
E8/ELlx+SC4cq0mEsUX+0CXj2IOUiMuDyUIkGF4/OXPLeR/ECeEzjYpkmI6s
p1JL1QEE5wQRtetSYPmGz3muHP6FexZcIuYuVNgezQ3SMq0jqH+zt6fwgwbT
6L0qzRFzDBa0quPUGD1Gc5W2tvLjMZTk2Nu2K9NjtWljdwxSj0FqzZ80VIse
E3N2MYnHH0PzjVf/sFvRYwxnSoLYGo9BQs1rWSWKHmt9JjHH+vsY+KbZHBjX
6DGMSiCM4S4B3s95HzImMGB7L/dO4dUJsCv0sJcpkwHLHW9OV9EhQCDTuWSW
AgaMM9e8IsiUALeK3IW4WhiwQ620BRoXAlDpauyrbjNgJalnZCkzCJD1b8BL
WhUcZk3/qznjCwFOSMrOC+niMD6nag3FfAKUrE5pqD7CYZHKD5+8qSTAW6mV
07EuOMx2My6CtJ8AdufOmylm4DBBfUvO1BECPBVUynLMx2HfG2Syr08RILhD
ez6rEofdixmpfv2TAJZL11T+6cdhVCRZt7l/EYDHlMX5zhQOQ1ZOAzXbBKB2
GU148xOHOQ4qGhkfEID7QlBF7TYO+78fAv//Q/4HUEaQfA==
       "]]},
     Annotation[#, "Charting`Private`Tag$23424#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw12Hk4Vd33AHBRiSQpeUtJlJAUiSRWIUmZSpEMUYbXUJIhEUJClEoqrogU
KVMqhJUpc+Z5JpIyDxnuvee73+f5/f46z2ff/dy77zlrrb322W5x9bQlKwsL
C+8yFpb/rlKwcYSiKGymGyb+d726IBK4sEhhon105s/fFKZ9kBadnqVwxKJv
uL6FQhkxLYshMl7cb12ekUqh/Dr/9ioy3rj3qu0zMwqPDExWPCfjapSV5BIy
8fTd6uT9ZPzG9aVUQT8GutX4O1jnM/FQ+uePXbxL2Ni4eqTAnIEZ3d8PZs7M
4tavVzfIb6GjkBpX0JTFJH60K16xtmsR6U+esuXLjuDFEOmJNt8F1N9saSZl
1IfzjzwCEebRR/+X0RRLA8Zzd2961jeHLGJs+v2b3iBNU9qpIWgW95XdiQvl
KgNfe/Mb4idmkGW0TWjXtjbwYHvr5jQ6hTTGyJFZ+QEw96nZ0Zw4idp925ID
lv+CJ3mDz2i2Eyj8O6qdRXcMcnrEuN4Jj6HrUeZvu5pJEOE5oqL/4jcO/YyX
79swAxkSgbb9A8M4L9ZUOKI3Bz0l6UJyckOY28jSHaI5D4OST2Tw0wA2B59K
dB5dgHVeSXJSy/pwodfCwcxjCQI+iZXx/O3FOVXT5jyfJVgce3N++k8vpvm3
cW0KWIJ+s9eeWa29aBij018StgQZR+MLVdJ68ZbCob0LCUtwekW0toFZL25Y
xqH3rWYJdm3aXs3i0YOuXSGZi0J0kJQbl0yY7sR1lXuWKrPpYCXl7Z3d1Yn5
cToWmE+HGNG19dWlnTj00nZVahEdePn3us1FdWLixpB1ftV0+Pv3SsFxtU6c
aPPkZ/bSoTB77OxIeAc+KeWbAnYGGCqNee2Va0cp2Nk/pcuARwe86lSF2lF5
pb3YlbMMqNzDvcOQsx3LZpLfD55ngLKgVLlPdxvqaPC7lFswQIRyWF8f0IbC
5VF/LzkzYOzr6BvnllbslDau/BHBAD+10drsGy0YE5Pznq+NAYUaf3RkL7Ug
jUNEbGUXA1i0fn9P0WrB1F7p5dO9DPA8+6sqXrgFNzSr9BUMM8DVarAstKoZ
u7uk98rOM8AmsOuruVAzXjdX22y3kQmnqqrTOMoakXZQcY+wLhOCa6v2+mc0
otqxa50vzjChrLEyhUlrRFbUGuU3YMKxrvJ309caMXdhYT9lwgTlsZLELoFG
lA7ZdjbOjgn7ePJj0682oMDOmKFDAUzg008JO89fj+Oijuofs5iQIXov5xhb
PR5Yt3ZX8Bcm6C5Y/5Aer0N/hlvfhXzy+y+2H+QsrUPlzjcDs0VMYA6H9+S4
1qFQhvfW5TVMGLrlIbWluRaf41rroB9MuKLz8FmeeA1amafrya+hIHFG88+T
ZTVYGxJm92YtBf3Plx+50vYd1XIUzDbwUnDuh9tPwaDvqC4w0vBjIwXgbirn
M1yNWbOFU2ZCFPDE725UeVOF+lxnV6IMBRlzJWvLdlTg5a+L/kJnKbj/Nq5Q
eaEc20I/FhsYUGBn6u3ysbocQ8O/6N47T8GObwc74lzLMUMrSeunCQURT5Jf
3yorw99XVnc4WVFwU/ah0n77UhR0GFFtdSXrGXaYSDpSil7fDTUab1Cwn6YZ
L8RHPv+X93nVTQr+sC3n4M7/hv9oWm/L8KLAtMG1cXjtN2TmPEXdAApUnIzt
XnwoxnuG67U7wykQFFUQ5AssxmatA/zRERQstfHV3TMuRnPPOEmjZxRkHq2R
c19RjDJ3TA+XR1Eguk6FVd+gCIuPmYzfjKOAM23Xc46lAkz2dYmXTKUgoWMw
9Jd/Pnr95lErL6Gg3XNjTPT+fMz0t6lgfKOAW/B4ml5/HmomRW3cW0aB68XE
+mzIw0fh4SyBFRSoD9ryBy9+wcjp2s3raygYHhuPlXDMRr+G6zb3WyjYEiaU
0S2Yje+F/U89aKVAV1qv6FF1Fsoxrs6FtFGQdT1jcFEiCy3126O8OigImneW
qBz8hIfuLUgq9lAgwbr4we5CJn7dbGGzaYjcn3iJkm2cmdi1bffbIeJHahea
G7I+4Pm0mvS0nxQsBuTOK278gFevJ/Mq/qKgcrW3ElddOq73fb9Z/A8FLO9T
tb96p6NE/+l7ncSy2r1mzlLpGFvdUBAySgEt7Khv5700TFK38RkYo6BVYtX9
86EpKFvQoWo7ScERh3/TCkbeo5qnyQDbFInH1Ip6cY33mFmYoxFJ7C4byr/I
+g7TJ9kt86Yp2KzM+zLyRhIKt/4Z6JylwNfnehFrcyLuGdPMMJ6j4Hdh46Dt
/kSMeOCv3kace/yphOLYa7zrHPy17C8FJnpbMjsuvcKeb72LPgskXqZnFVyK
41Ep9xz1g9gzoga5d8Zj2OryX8cWyfo7fCuPDr1Egaw4RyaxpJexXof6S9Tj
41xzbomCL0JyLc5vYtGryuHBW+LMyvoSnboXmKMhoa5Jp6CRJ6DO91E0Vqzx
u/mEePqsQtfHMzSskWwN7yKW6Y2ZEWh+jnk33DwuMyjQ23mGRefpM3ydUHA8
ntjRdiWXr+FT9JdctdhNnDpjLzLcHo47NIJ5tJgUfFcQ2itAe4yDnSXO3sRj
Xg2HtE0eYXQlIz+FeE1xgPptwYeouUFmvJ3YkNf5lQ0+wLFPFiuWUxQ8pbV/
+X40FAM/PFgmQdwserRBtjgY/+HMHjhFvCH9zUikeiDG5HQn2xOfUeRmXVZ+
B7eUsBgFET8qcd5kfdIPH4hvG4sjrtXp2Fdd7YPzPxVssokFM/3CrGI90YBF
r6yKOKpMF2US3PC902XuLuJ/uraOMZOccEHZ+RBpNGD3QJNChIkdKlr6nJoh
FuVyfCplbY7XBwPVloh9GsUaBYq0MA5DhUk/ApJru2xX7JGFb9P3h/5z86Rv
DM+8IfTdDgljEE/o7Jq66mQFU/8GCM0TezxWr7CTdYTFZM+IcWKml3tUzF4X
mD9+dWrgv++3fWffIHETfiuZyjYRs53rUWIX9Yam0BPGRcRFQkF3o3l84ZO8
tG0KsX+EsKP8fX8IUeQzjSBW58o1rFt9F84/n5X3IGb3PXvULigItujV/zUm
Lvs7Jr6CPQSaLJKjFYmDHQJ5Y/zvg/93H3F+4teTYbe23A4DifDTUePkeVlb
S1h9Yj4Cwz2/9z0l1hB2M/JTCodelgx9K2KxriJtXc8nYCblYipDPHLaRH5k
4SkoP50QKSDxUrHm7e7PB59DTH1ijx9xctncNn+3SPhrbXJbldheOWyV4CwN
AmO/uGaTeNRa6KSP7H8BhaqWFVeJpTLFJz87xcD0kdXLRYjnw/v+iM3HgtyJ
U+I+JN6zOT2aCl3i4fjDOEU+kh+xe/gaUoVfgbOZDrwl+RSgm1pLq3kFau9u
0xSJ9SMGKl3FX0NlgeulM/Pk+Ww/VSjRlQhunXEiBiRfW9SGkD84CbJjPKa/
k/zOt/bJWy7/FqL72raoEt97n5nVHZYMWn2inkIzJD4UtqY+UkuBk7WsDqmk
nnAZf37nPZkCLwPZOTiJp7303tq/SIVIfMi8OEHBxf7C0yKeaXA9SW6ObZz8
P7G/WoymdCiyL+QXJPWr/IOZWnpQJnSn94nED1JwuESyaFdvJpjoKxsW/aAg
rXnh6Au5j+DlIjTUM0D2q4XHcG/gIyTud+Hm7qfgMpQdslT6DLSYiw+Vuymg
KvZJb5rMBsYBuDjRRIFTJyP1wfEcSCiclmxupGBotEJq5YscGK/ecyargYIq
HkvJac0vYHdR5t21Ogoizz3fVf0qF1hdboVlVVFwoH+Z4G1DhGRjAeGnhWT9
OQaT+5IQlk4qW54vIPfj0fvi3gUE1dgnN//5SsHql+8OxGp9hWy3PoHQPAro
uoad1NhXUOofPaibRUFXWqo4ShdCUkJbp9J7sl/RjNbzGxWC4w8V1epkkk+B
KxhXfAtBKrDX4/xbUm8uXqgVbCiEh8ysSzZvyPPhYXfzci6C8dfday6+pCDG
0bRY6XMxcA/RKz+R/ZVmzJHypKcYTjq/O7v+MQXPNDKfjrKXgLd1WLr9QwrC
hDjtog1LoMZztofvPsm/2o/rGAslsPKSLL/KXQrM960xyz1cCq1b74wvc6dA
ZOLLwqHCcuDQcjq+zYjU62pV/5nRclha36c6QvqL5reV3CmbKsDovIV/Ouk/
gi07RLZfq4ALZrQ6WT0Sb+2LWuxCleBoOEbj1iDrL1GIa7hVBb1Mjr/cBygw
ivqsaa9QAz1bhLJVuEg9vwFNOy1r4Fx6t3wEB9m/z5Wa9YTVwKHi1MXBlRQU
8LQ4nx6ugWOWQaduLiP1UtVDh3ayFhzCN293nWOCR1aku+9iLax4kxma08OE
E/Ft1dqG9XAmutTZNZUJE3dSrEoc6sGoumu3+TsmPLPxoxT96mHVbNQJjSQm
DO/ZIy2eUg8Gu3myV8czITDLJ5xteQOU7G+1to4g/Wb1rgtZqQ3Q82FouZMn
E47PuwxvZ2+CtdcYhxuPkf5Ti5dt9mMLXOhZl1BVzYD75hyTC+UtMFcGuXwV
DGh1YelhdrXA1x0D6Re+McD2xVjOqpWtMCgTfLA7n8wfr3Dacq4V7JPOf8hL
JfMf+vWrzrWCE8UwHQoj85tnCh7JtYORjvH9btLPPzBr8dn3uRNoXle1bEvp
EPDnMAxVdYJ7tVVcUCEdvNzjGFH9neD4JFsjIY8OVx473GTn7oK0sGtBdR/o
oF3K5tx9uYv0fbs7GDF04N67zzqEtxskpUswwY0O95mBWsMOPbCOehwqs4MO
pdpb1+jy9kH3H5riEaclGN3O51UfOQAl5o63aMwFcHHebf5g4xCoCJi6u1yc
h5ZOntNWZcNAb9cuBOs5uOh++Cf7qd8gWCvI6n1hBop2ywcXrRiDCeUg8Wcj
kyDKkTv8SmMCZFXsPre2j8HWXLtjKwInwcYwZ7A3/BewLLImOfVPAdeGHJkp
uwH4q5dnWrJzBnTN5eMH/duhQ9ZMYKf/LIRtuURrCygDRwOedcKdc8CibbDs
pGgCbgr/Ybh86zzwRBcnrTSpw5QLsW+mbyxAMf2kL79AHxooeWuU5S2C7CcZ
VslLvzDd1EH4EH0JYr8fMa6amsB5TlW2bHJuClg9ORlUNoun6xTltj5jwveN
tE/rfRaRU3F1QW406fsv/PoR8WQRC161nzQmcWTbvo5dMHkR991wN49KYcL9
uzOiB5sXkXvb55BNJUy4/IKlKYqc0MvtZQb4psi5J3//iFD7Eh5ZJR7GfYoC
4dIVC9sPMnD+2vzmFJJXfwxy4kS0GZjaUZqgRfJwg4jmEfHLDBRMtfoSYkHO
ATZL546EMZB+9tUQJ8ljnrRXU9HDDPwcv02J/fV/fSzvwMZIJl5ZM176mtQd
SZubFQZpTBR1yz+tnk7Blba8BNo3JoZrmtjcySV5aNcsLzPNRKfJyMdspG4O
aWpXhJyiUOKCrWA86Yvr9cN0Ry0o7CtWSFIhdXjz8/cVeu4U6j5rzb9N+tjG
WvdI0dcUrmJNPLGd7ANqxWITEbkUop1b41eyr/BOZSisbqDQtUnd7CLZ11SM
/nHz+0Xh/70Pgf9/H/I/ogFz+w==
       "]]},
     Annotation[#, "Charting`Private`Tag$23424#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.999999918367347, 1.999999918367347}, {-5, 5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"61691796-2444-4ca2-a3d0-dd83b2b170e9"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["x", "2"], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "-", 
      SuperscriptBox["x", "2"]}], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"2", 
       SuperscriptBox["x", "2"]}], "-", "2"}]}], "=", 
    RowBox[{
     RowBox[{"0", "\[Implies]", "\[IndentingNewLine]", "x"}], "=", 
     RowBox[{
      FractionBox[
       RowBox[{"0", "\[PlusMinus]", 
        SqrtBox[
         RowBox[{"0", "-", 
          RowBox[{"4", "\[CenterDot]", "2", "\[CenterDot]", 
           RowBox[{"(", 
            RowBox[{"-", "2"}], ")"}]}]}]]}], "4"], "=", 
      RowBox[{
       StyleBox["{",
        StripOnInput->False,
        SpanMaxSize->DirectedInfinity[1]], 
       RowBox[{
        RowBox[{
         RowBox[{
          StyleBox[GridBox[{
             {"1"},
             {
              RowBox[{"-", "1"}]}
            }],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox[
           StyleBox[".",
            FontSize->14],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox[
           StyleBox["\[IndentingNewLine]",
            FontSize->14],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], "2"}], "-", 
         SuperscriptBox["x", "2"], "-", 
         SuperscriptBox["x", "2"]}], "=", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], 
           SuperscriptBox["x", "2"]}], "+", 
          RowBox[{"2", " ", 
           StyleBox[".",
            FontSize->14], "\[IndentingNewLine]", 
           RowBox[{"\[Integral]", 
            RowBox[{
             RowBox[{"-", "2"}], 
             SuperscriptBox["x", "2"]}]}]}], "+", "2"}], "=", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            FractionBox[
             SuperscriptBox["x", "3"], "3"]}], "+", 
           RowBox[{"2", "x"}]}], "=", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             FractionBox[
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], 
                SuperscriptBox["x", "3"]}], "+", 
               RowBox[{"6", "x"}]}], "3"], 
             StyleBox[".",
              FontSize->14], 
             StyleBox["\[IndentingNewLine]",
              FontSize->14], 
             RowBox[{
              UnderoverscriptBox["\[Integral]", 
               RowBox[{"-", "1"}], "1"], 
              RowBox[{
               RowBox[{"-", "2"}], 
               SuperscriptBox["x", "2"]}]}]}], "+", "2"}], "=", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             FractionBox[
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], "\[CenterDot]", "1"}], "+", "6"}], "3"], 
             "-", 
             FractionBox[
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], "\[CenterDot]", 
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}]}], "-", "6"}], "3"]}], "=", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              FractionBox["4", "3"], "-", 
              FractionBox[
               RowBox[{"-", "4"}], "3"]}], "=", 
             RowBox[{
              FractionBox["8", "3"], 
              StyleBox[".",
               FontSize->14]}]}]}]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"1af18ae8-7d50-4db6-ba0f-4af3b0502791"]], "Text",\
ExpressionUUID->"1fb33746-81ce-49c1-a854-0269bdabe20b"],

Cell["\<\
Tirar as integrais das fun\[CCedilla]\[OTilde]es depois subtrair as integrais \
n\[ATilde]o funciona.\
\>", "Text",ExpressionUUID->"32fe57f6-b928-4201-8a62-8f6cf5fad0f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], 
       SuperscriptBox["x", "2"]}], "+", "2"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], 
       SuperscriptBox["x", "2"]}], "+", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], "*", 
       FractionBox[
        SuperscriptBox["#", "3"], "3"]}], "+", 
      RowBox[{"2", "#"}]}], "&"}], "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}]}], "}"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], "*", 
        SuperscriptBox["#", "3"]}], "+", 
       RowBox[{"6", "#"}]}], "3"], "&"}], "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}]}], "}"}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[141]:=",ExpressionUUID->"2eb35528-5efb-4935-9f8d-403cdd878cd9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"2", " ", "x"}], "-", 
    FractionBox[
     RowBox[{"2", " ", 
      SuperscriptBox["x", "3"]}], "3"]}], ",", 
   FractionBox["8", "3"], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["4", "3"], ",", 
     RowBox[{"-", 
      FractionBox["4", "3"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["4", "3"], ",", 
     RowBox[{"-", 
      FractionBox["4", "3"]}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[141]=",ExpressionUUID->"b94ae242-6f59-4778-b3c0-9e7c7efc2fe1"]
}, Open  ]],

Cell["\<\
Fa\[CCedilla]a um gr\[AAcute]fico e determine a \[AAcute]rea da \
regi\[ATilde]o delimitada pelas curvas.\
\>", "ItemNumbered",ExpressionUUID->"032627a8-b61a-48c0-9778-6a870c2bb7ea"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    SuperscriptBox["y", "2"]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"e7378355-8078-45c0-a490-1285fb9006d4"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{"y", "+", "6"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"8b7c0de1-616b-41b8-be6b-8637c4694df4"],
 "."
}], "Text",ExpressionUUID->"11d57ba4-4f13-43b6-85c0-3d434c1ab8af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", 
     RowBox[{"x", "+", "6"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "13"}], "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"2267d77b-1717-4069-8139-cb19126f6493"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw1l/k31Hv8x+1jyxZ1lVxbYsiWlIrXR0lyQ0pSZOkmoSQksg9JZAmFKCKJ
7JFteI9lRGOQGSP7zpBtUlkqvvf7Pef7POdxHn/B44en7NXb55w42NjYVv7j
fx3gJ+DjwhAksf3f8Nge0m3xQ1KCJBG5CEO/UiWswq2ZW3iInxQ8NRWiHqOI
OTzWXO4j8JGeGvUlR1spYGsJ/pEIeEnx+Cv/SDvIYdlCw5IpYzykTMGzj5xt
ZbB0E01P2iNu0oZR8T/um1IY4aajr/JpLhIpvO2QTpUk5s+Zf89zgYOkFRpl
z31tB+YY0qnAeMtOuiTskU8M3I49rZtKSXdlI93mL0vY6hXBakaUBAvkNpF4
IKeSkqMgJi+CHbd8+Qtpa1TF6zFwWBk+0nV8Yg0JF124j7flxEbIpTI6Oj+R
SOHvh+09mzCl+lQLfVhBuXSq3X6TNRANytNRY2ehPQHeJgSxbxDxQalVZHUZ
KS9HvOH9w4KNxdxLK/PLyGAhtT1thgXj9m8Cqr4sowxCgw+TyIIyg+zG4yXL
SHDXzhO7b7DgHPcLs4v2y6j010DtNGkZ9knKUtn8l9BZ8VQb/NoiqOosqeas
zCOf3CeKmZpzcF0tOLh6aB4JzREWuPjnIENRuJv6cR61L+cTH47PgthO9Xs/
0+YRMsnwmkmchdVV94ZThvMoQEPSUHiNCY3Vixfmkr4i6yaL22wtM2Cttxik
rjOHnvAwFm/4TkHCwaDPJ2TmkHhHBjHWcgoo+4UUrPnnUN2lzIRujSnQl1Zr
CxmeRRF1Jy+Wz06C/Nat7d0Rs2jpg+yJUdtJWCQt5Hr3MpHcHemcPuMJCDNc
6Kr2nUH8nCoJ5w6NQaPxvLn2vzNI9v1MfcfOMWAz/dpRZDqDojc8hp3XRiHg
wmx7ttwMcjSf/bFcPQo+16daY9qnkbDonQg7/VG4ETlEcpSZRjRmtY1Z6jCc
aaeW8LVOoqM+Z1SH/vRDVFe7enjZJKp99/WwWEs/tNIpRZvpk2haWEElNLYf
Tg61FazcmUTYNQeSoEw/6C+S3w7tnkRLx3BF/Sf7QEOkPrP09gQyL9r2zCK9
FyQsi+Iv7RxHok/+pLzzpkOZYnTNSc5xVDQvFHflFB3OrjtPai6NIeK+EKbB
LjpEvZQ9zP9xDEkdI5BfkWiwyUwaqfEZQ5zDXEr1wjSYDvRXk2KMIjcerjiX
ys/gbv4kpU55BJnSaG0Slzrg7XeT+afsI4jt+mKMmEAHjKdyYe59wyi2svUv
7zoqWE3em5F+NIwgmUhwkqcC+NnphDCH0LLxq1z27xQQyVahH88dRA/u2h38
+20blP0kC7cq9KPglVyHJRsyxOZnNeqv96FuQzMXnAQZ3OyC71ZQ+5CFewzz
aUczKLQcHsjy6UOfTjNMdpxohmdP370JbP2CiuUSXr7WbIL72k/0DtzsRads
ywirCg1gxby1nIf1/tfT9HefKRIcSDfJlpHoRaaDZUM335BgnpOLT6iegdaJ
O7YTlUlgR/OhM4UZKAoT3dXlVg/HPW3dXr6nI8shZf/51hqQVtSVloiko6tR
BVo11jXwq0/ic7QtHbXMOPR6z1ZDuUGnjh83HUW8t2OWbKsGRdHjHJYXaehr
bJGSoWMl8JfsS+X79RmZX8iQ69Uuh5yBqZjZ8A7EYRC1emV3IfQH7Mh4caAD
zeXUUXaFFoCQ9KkSi3EqOmijUubNfAc+Dm+7q4GKVj9UVGzV5oPRlOvOqA0K
0jgQkezp8xaYi0uZeI825Km/o4Vy+DVIxcuUDUu3oRd5i3WXqrLhrKZFUwK1
Fe13Ym8N182GKq+yqQ18K/Kj9oiVYVnwaM0bT5lqQS1Xj4S5XM0EPMfGezeb
ZnQZm3qRPJ0Kdtl48t/8zeiI/Cj9gmQqJBjaMGhVTWjijbmGmXkKbEQQ147u
aEKx8Y8tF5qfAUUgWE/wcwMyWwg8N8VIBLbCYjNScAPyYewp9JZPBG2zUXtv
tQb0r4OWqr5XAqTHGxAGo0koxao6OVjqCXzB88ZeiqlH3SmBxr4qMYDdcilp
mKtDb+7hTuquRcPb4k/dysZ1SCDlfpQ7JQr8tGN2bnAQUdQLqeWDDyJhl77Y
q+e+1ehCrbniYaNwIIR4NXEwqlDZG3nXNKMw+NpIn3I9UIWyaKM/PU0JQDyV
jD+6+AFpf9vxNcg9BK5YSJUP/FuOTMInA8R/+8H8yg/du83v0dttwjkcN30h
4FknEtr7Hu2t/zxgzfSB9AECxWC6FPkl/X1Xj8cbVINsLQaMSpF5TX4vJdcT
amV0er1zS5ABrsO48cIdKKd0k80/F6FN1ZrCjsJbQBeJ+ExIKETJpU9mVCzd
YOWC7lDF+QLkEp6qf2m7C2iNZnzfzchDDeJHDBUGr4HF3vNs5slvkWF397eG
qavg4cojSLDO/a/ntHp1Xkco/n5Tntn/GjmTAm1W1WygQ1dGfXd6NjIu1Mx6
z2sNi0G0I2ZXstArHSN5EfELsK05wihU+hW6bVs7LGhxDqzFvF/fQBnISU8u
73ywOSSn99d2GLxAAxuxfB3IBBiKBjTt5udIn0UcjvzXCMRLc+eeG6WgaJkC
pXDX43D+qBAHe9tTFCta3RGcpwcJZG9J538S0cj59IO+hoegy3xAg0qNRzy8
HBGsHE2QLg+Lv575GInZ0oN705QhrfUs0sp5iFqj81qovrLw19Cexc08AnLQ
xzVEkyVAZaJH99kVf6R+Kerg1nUcKAp6JKs530GUyAOugwvf9EPoSvTdTVfQ
6WmKgHERRV9VeMiVe78hrD7L1hW8k6rPYBEyRNZuAJf/j+U0/wn9ZfN93257
+oAuv471dOCWvn+i0Sc37RCQ28NjGeYiAptBfmkZ6g9gVzBvVfw2KQhxLbhJ
w0fBEUv+sS6nvcBpNaKHU4yDtDMSugMWatAk8+jhC5EEsE4SK/Ny0obwZ3Ie
h2KTQPe7VOn9G0fASJBo/VkgGX6N08+wp2KAI1wwcHuUCi3hgxXcjobQurqo
zI1LhwD7nESTx8YQdStSLCP8Jch6qU937jKFN6z4QKnQTOizr2OY8FiAszP+
+ofNLGgPxZuyHluBsdy9y2F6r8H3D2uk/PklUBpqMjsbkAPJErsK/+q3hblz
Vw7NredCxjYj/9GfjvBpW75K5eE8cOByq+YY+xfetf78O/xePtidJon/mHCC
m/rxvNI/CoC//pecibYrmK4P/p47UATVC2M9BaE3Qa1cmVXpWQzZbms5IzPu
sJY0Nq+0VgISygMdl7fuQDW/f0/j3ffwe7Lmrui7e5C5X4JWLFcOVzUIjRwX
/SDibHFXemc5xLHM1mNE/cHy2QTFR/kDmPasKXiWBcGy7JlG/FAVyIieqqmy
CINew2m0M6oafsWQeCWvhkO9c0gd16EaIJKPnWnxewDRheVVw/G1MOukV4ZD
D0FRd09xgmE9cLrYb+x99RgEbSsLgln1wF23uLzwNQZWgizyb75EsEAJGeTQ
jwOH8cZz8gEk0ImxauP7HQ9qSqumf3oaQFwvUY85lght7+0NSx81wyk5M+lB
2+dwjKzatG+0GTyy3zXkHkuDEsa6wUsdMggRokYkZdLh2XoiRE+QIe1iexSL
9QKuQesRJ72PsE2rxLxyNBO2PmloSrLawJjdabQTlwOeg3+K4059Ao9C6YjZ
pByYXvikxvPyE1jySrow5N9Au4iT6ooJBY5/6pxWPpULz61S91FftwMt6GRD
ZXYeHBxnlw617oSifItv7uVFoFZzkaWR1wn+HP0OpueLQTGhsHl0vRMSh9Ur
GleKQeBVwcFM0y7oEc3CVaeXwO+z1oNbi11Q6/GwmfW1FIZKipWRZjcQnz5r
iywph/70y9t3Xu4GgUkj9WLBCmBEcv9xJ3RD0Pch3CuXCuhwsOmSpnVDnw1J
dGbvB6gXwd0L8qaBjaFV5O/cSsjwsGvWq6RDSkALm2l3DaTb8hU9HaGD+cJ4
Ev5oLaQYlycv4HoALzOdRntdC/Ey/G4vrHvgfHsmR+R9IoR0VYj+We8BL/0Z
rfvq9eCosc2eeKwXfhraCjeOkEB+uXb9SGMfDNl9EN1JbIYA6onw7wt9kBAy
FFbJQQZGPkWoSLIfmunlXp2nyRDlNCAve6cfnot7tzv1kWG5f8MUJzMAuG/a
V1U3W6CerJtFCxyEn/IkaVm7NricVmlyU3cEpK/9Hnh7rwPKfaFnr9MIHOpR
5tKldoCQ1Uf7kfgRoPji8jH5TmgQ6fU+xxyBqxdp7h+6OkH8hL95+j+joFJt
tfgipQv8q577ETZGIS+uQuEiVzeczu6jmlmPAwUf8T6FtweWHxRdJ98ah8t4
+eMLuj2QciNs62jYOIQUY9f93XqAuX+/pnLROMSZ/HE37OyByKqQJE6uCShr
CiA8SmVAK3WfTVXxBAg0JpWOHP4Cp9buMmVxUyC4pKRBzBqAk6ZinD8qZkCR
+07v8ydjEOvIx1pvmwHzKnbpc8Vj8OUu28jm0Az87pv2kKOOgevLxRpeHiYw
bhQdFeIbh9ilT55SVkxIL9dyEiOMw5cnYeMnfjLhDpcIL9V3AlwZ3xsSdOZA
68GeGAG/KYiz7w3RqJwHKYHwpMLmWYiYPwbT7fNwNKltvuzrLAT5Zf1JG5+H
UMsDNT1ic+CeeOs+TmgBAu97lXs5zoHZR07v4WsLoG37RlGU7SsIqWs4PxZb
hCwfBnv38XmI3Yw0Zd5aAl+cQ6Lb8CJ8NNuz7awYCyLPPBbd0vkGC7ISQd3P
V2DeV58/lnsN7nqrOMbt+AnrCQ934YM2oXdQ5Nz11jXgM7nqH6LJiTn4HZvB
nfkFzfaNv9hP47AmlUNRTdybIEtYKOjEC2KKfETma2M2bNrO5HViggi2h+h2
kjuSHWunycXEHdyOsW1w5HmOc2AbP7KmeUx2YKsWdXbkvVxYwT6t5BY7SWxA
23733nBuzD3dq11hSQrzuCgiKjfIgx2+wq2aaimDSSZNWnPt4cWyEg/3ZKrI
YUU2mbkrvnyY5lbCKNlIAbuoF2zcWsePxRQ+ZqNYK2KldrfkjvwWwM46y6hd
91PCxnqmQ08zBLH//8f/Ay5hmx4=
       "]]},
     Annotation[#, "Charting`Private`Tag$31869#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtlHswlXkAho9zcjkH5+PkEDk45xdDbElhU+33ZktRGizLKte22qhwduto
bMSyaTelorFRmXEpaVi3rHX5vsRQ41JRrtVECSnkkttm7cz+8c4zz8zz9ysN
DvM4wOVwOK5L+49raN3hxUWKfcIOiZcUYbMkcXaOYi+q9CpUlDn4s2Sd2cQU
xbrtbunSEHBgY+4aPPCOYls6iq/p63Bgrx3f3dRBsQ8+RJmuN+cA/eMP/yik
WNZQaHvQjQOPM8356wMotiDSxrMpkwNFa/zRQzVC9qx11KW0rUpob1cfvhek
yVpZToq/us6FhA3TsTfUYPvp5HeN/TyUhdYpU88F7K6UTXNjMmUEnls31hXH
ZzN/bKHMTqlg5lJUIkOrsWpH4xVgVZElfKGf9kqF9RuXDhwy4iPDZZ287awy
+31ZS5LVCQHijgRFWjgvY6MvXz/z7K46oni3FfL3XDZhwSsxSaSJoNOtq57d
UmJvxFj3WHgLkVr9Ji0jhMOGOhoc2p9K4e+X5hp3ZJ8ZUePUgqdCC0QLjp7X
55lP82GjISu0Ubw6MaSvf4bxnPI7oNqgjZf1RSZ2dtNM4vk2hVwuwhurVBvm
7gTTUOq73k20HNrReXZrlMaZnzO95KXMcljZjVrlTIwwDvrBvr8H6eCXbe8f
VUS+ZcK9++oHtcQQexYkf6fXx5yyHW7WqRajeLqealzVzaRm8mJK/HSR0/Mm
aSi+hSGPk0s61fXg525Y2rO/lKk8v/ZieIEeKgRRT2uPl9CWI17qHa4rYNun
ZBTr00qLqDG1urkVIGOVsw61XTSXSS8kGfpwzupq3uPTRx/eUNnF32WA7a4i
3lTZWzrPOTizZtoAFwI6TluXj9Af3xloDVxZiYY9Ek030Thd/M0OXso2Q7yX
iqOfXJ2go3Ym3CgdMMTxnyyDLuhO05LnLp1ZCRJ09Gp5HGycoe3s41P0bYwQ
eHLzW9Xd87SPUeusUpsR7lva/3Zf+TM9/jCpLzzWGGb8qsHsnRy4cNc6WIhM
IKkK3a6cqATVUV93pWATcOa4efI+Lk7X4HbGXyb45F7tX2+6DNGehd4RfCl6
NgSsNI1Xhn1zhxM/SIpwby1tWa8KesXb4tXKpdBPee2zTKIGFdONultVZSjY
m3lzIpKPEd3Boc3+MnhvidnZWC3At63GInmhDEX+R2UOC+q4452eKFyUYUbw
Na/CSxM1tY9wzIvA4/EmO0maEJ6T511VcwkEm9TvVV0TorbF0TrsJsG97O5d
+7KEsM6bFnXcIrCOPBmUXiCEhr9/Z24+gdC4/Jx+vRB1DV/sdyoieHDEpl/8
UQib9KbIhCoCqFkkC3dT0HIUZPPaCGYiZgwK3ClEG9b8GtpOUNjTkOPqTWFk
OuJw21MCo8KDleeCKTTmd63J6iRY8MoeEJykECPOq3B8QVCeZbxFNZfCh8Ed
rbFDBMc0Rxty8ynsuz9fNDRMYKao8XAqovDwWmGK+whBiovfDwlVFHI89Hyl
owTy8auXeW1LfdXAa3aSYPXeEKOszqX+ytUG82mCV3Ub8xxfUPgyYs/t5E8E
bmmdNbFDFHTM7oYFzhGocW85S0cpxHFCPBrnCZhQRTs7SWGsW2Jr/Q/BiadO
AYFzFPzLHuulfSb4/7/QdCFhbnGR4F9VCCGo
       "]]},
     Annotation[#, "Charting`Private`Tag$31869#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3.999999836734694, 3.999999836734694}, {0, 13}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[57]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzNXAvQVVUVPnLv///iIym18Ak+iBSRIlRSAg15lIAg+KRURBBKQYGyDE1I
RRIxTM0e9LCxmR7mpKOVZdNjnBwf89c4o41pZVTko9BMM83+vrW+fc5ad519
761mmmLges49e33722utvdbae5/rzAWrliw6b8GqpQsXDJ+2YsH5S5YuXDl8
6vIV+KqxXVFst6Qoim1DC1wP4Er/yZ+l+MfLf+VqB/lsDPRvXnPnVrmcrff9
mxfzTzFIPhp8KI9myEezfC7fz+kiMSf00Nuh34GBrXeuWby5P9334vliNigv
YruTsujSQptUfCiNr4pm4Dddxdh4sQ1rYFA1LvSDy1llu1IUj+TJCaEdx1vh
1fTRVIZ98tlTgXAAxbxyNAlrZtmn3nJMcjk3tJudRdM+iu3ZKYnrgxNLhkSl
TTMjmxfaza4hsYfBFRtVHTXQW5GpAGd2smmm/QkBt895TsW29JQBZ0F9Mivv
qZmWcwNi7781g9TXkq3lv4vwbzvTfAO3yfKvC/e7/pefN1QDL7/y6iO/euar
d/98zeZ7mqevuaNoLrz8W+u+eC/+3vydhxvf+MGjKoP/6qV+bLj5PjxGu4IS
qz/1Y7T92S+eeuGvL/f8j0fV+7/TbV91Dz38qH/Lpq88IDoaJDrqWbHp+5/5
5s++/ZNfQtt4TG+NvHvwBM/vvv+JL9zxELRaNES2AdNA8OltLxaD/i+1O7eL
1JvKeyqFGhE/u+GWfnyFge0UJHaUjya08ZOHfge1LVl/l8o0oBMoR+bSwf/m
SN7+H43kKLUrCMIeIAEO+AShBx75QzEktN1F7x/bsg1tz7v6exxlA43xlTya
0KUvMvq09ggngKIAgL+wPrSAeVobo973Yt5Bj2wL/YCaYhQ36lPc4ks8grox
SX//9PO7B5TdtB3GiMccI3wVZlH54gZ9Cj6Y8Rw+YsWzz7/0hoDyem0Hi8FT
MXo0vfD6H6JzlS+uK/tA6CAXoKDxHgFlqLbDWCsUdPvE1udUvri2fAphQOAp
KIPLXvhe8vYe5XNEKY4EisFzlSs2yWcPtEVgMIEyin0Cg721FYRgOI739h8/
RtnimvIZRwEc8YNhAWFfbQWjU+9QA64pW2zUZ1Au6YG+xILhAUHvm+gXg8Rf
XKhcsWEgxQjaOyHvH6T301YYGxyH7iORQ2WLq0puMDGewVPFrw4ICAe4/kEU
g1S54mP6PUxTfT8iSB5Y4lPHGJ/gr1fpK0v29OzE640BYUTZivpHK+ibssW6
cmQYuaGPTNZXpCbCA9ihe5DQ9sUV+j3IgjIeYS4dFPrU+NQka7QAhMoUl5eI
NDb8MEYdRWqCIXUNRipTXKbfww05JzGcUUFSkXrAn+OERWUsH1Vp/WzCOHRT
PDgkSB/S2gL4a1VyTYlKDwG2oI4O0qNb2Ql9lb50IEVd+jdGMyZIHqot4L+M
EjCgyhQfKSXp83CRNwfJMaUV6DvQpcoUl+j3AIJN8QjQbwmSitREBKL9MIFV
pri4lAQRfj82eQIl0EUloW2L1aW1Kom3hr7GtkriQmWKD7vxUXJckHyrk+T4
VKa4qFUz8L7DguS4mqTKFB9qlYRmDg+Sh7VKYmKoTPFB/R6WZ8yG5BFB8vBS
pxgM7agyxYWlJD0AkvSAsH7rqdYrA1rcFm9TOailwlOkVOW8vO3xV57/rVye
p/d0ToDTtm691ht4jne4UAOIfcBwm9vuveyJzx741LfP+svjt79PJZEY6Li0
h1t3ybqqB8DUBD0YgywcXt/fnnn4T/dcvOWmsUD97c1ve/b+q0C7OEclGAVE
gvaz1VUjcD4yMHm/9sBV0Kt/e+75R2/5w23zikHoo2g8ecd83P/j7y8VC8uR
ck5ipLS2ra9i7XeU0yUmXLFK+9FKqg8ar0aCT1zjm+JM5y+0kmops7aKYzqq
9AvGOUzjldrba7Qd+LeMCle4x1iLd7fOUXQ9jj3WVlmxxwml91eSK7TH19bG
95vPj/rjjy586cn+4tSSJWcMlDkxoGoV2MREgQYQ0UHsAkXdtRwHPAn+lMbx
+69P/fPDXxbrcB+Bk0J0PSngTnTzifH+fMXVqqgPXgRfgke1WIP1Hzwk+cnR
AXOS81SpmomoNU4faD7z/fMBh7+m7eNVAsZJEscExKNdjzKK5Yq4lyL+/cWn
nv3pjb/7ytEtGp3h9AVDYFyCKTF2UqtHYOjLFE2rn74Xt/yw4kctCr/ppQxj
PWz6jsBQGUuEhnHwVy4UdXgHjlMVg2lUYsrkgPmO0jYsJ9D9uYp5QI4p8NEL
ZZLugVwcGzDZB3SYbEdEVkMVy+RFgEcn5iUYNgYPFYBJxOU9CySkikKjGuuT
FqZAT0yPcvOEOWBKDlNaUOto8V5FPbgL2/GOi9S5UwPulNI3qtFwx2N0B7aH
Bb1NC5jsAyNPeifimC5M3+L0SgtPS15KPNZJMoYliqdZvg++Aw+CH7UwPNT5
KPQJD5weOE6rtdAMwTwuER7evvXWmcbyhV/fJY9GOS5i23cGXPaDKpQbMMw7
hearlnhnmYnrauYM0da7AiJ7YJ0n832xImqursVsy0QHts5BOE7E5T00zUlc
LFLcCTWmFuv2d76EmVgcl0OUPFH50tmKOTHLlRFPuO7r5qn404yAe1x4TtRj
OjDdq8YkYs4IY9HMnSJCe6ZDg85m5lBbIt9Ziju1A9fdnX1llToref0M5xeo
DwoiqTf0McHFyKxZtcG5DI4pkxg73S1NMRa4xQJFVO22ZDeLyruE8WYRbbzQ
s1Yn/L4NS90VSpWYbETODpjHu+iBecZ6h63asNy+ZFFZO2LynplfVttnKObc
Dix7gsScHKL0ieDBPk9XTN13b5PjBoWR0cJ2rhGrpzlBU+zhFPkcHDLek/03
rdp4Gyd6V1zuuXPzV6z6HsU9rWT+3EOfByJwH//MQY/evgw9pRgUzjuafv0g
Vfns4H/E1epxe/jbReuuv+dLi0Ko1plRO9VoBsassjA7oAnog5jFfM6qV15l
1oQxGLfBvpZdmD/9uUbsgychXBrKbsV86yOtA6QuUala1mEkn1zqneVwbRTz
nH6ksptvem8w70nG4GorjoTrI3l0TGmLNtY90TGWWX6a68VsvkNtHJaRYu2h
iJIr4V/0da3RWamnSlXi8s5dmMc68SQ3HyTynWr+nXpjTBnSgWust0924xQr
nmKYSSeStXftwFTifNxnPtnZSCxHVH7LLCP+/gbHM0Z5qfAkqlOG1btY52SH
xGwk1uGOavs8ND7w8zqjhVS3ScNmoX0GUh7CojuuZOK+BK3LrCvWIWLlC+iG
4YZVvY+ixjPuzNALmU/EOicaZprdMsdY0+fXW3FfqZo9abVERM40ZgQ5gRmZ
45gi/aEBcb6zkFQG8xyiWeigGkeL83Gfj4hQFRQmbIg41zGXum90jaNlo7jX
qfEvVeBSEc91iOb7YzpwLPdb55f2RAzlbNPskHIEPQfzhpZsw+7AwO49TlYq
Vo+I8bMbriKUXT1Txt3w00tZhnlmxpQfqQXpR2viNqvWYVlEal9mBhFnu3nE
/RueHfmsSJaSFeOpwxmlj0D/sis+2zBTfSe2muSiRFy37JlFtIxBxOOdd0vG
YFxtH3fjKc+ZzsOrqi6h2rdTajwt6sbTpzNLRrCPeDgRZ4W5Ob0Lz3gytiB4
+SyHSi2LLxzXgeeQ5OVnOrsyPmrlnup37iqIF8zqwnDnwFBr8pTBxAM9qlUS
c0qGfvWHCCzxbMeAuDDMEq3lUkVncZzRqH1+iCeiC8OM9KjGU7NQm1VK3NM9
O/BUK6SVmkWN07rwjLXL2YGnR7W+NL4M3vKN1axGV695M3hSnwPcyT4njExX
pmnFa+iKY/umIPT4TSuv+/S8iiWghOXi4CUeLbJy7/GkYrbSZyE18tnBe7Wy
TvU1c60w0+jUW+17D5QvBQ0q9Qkk2+HceuvMFOXOcjNOmBK92rGrKirF7xHM
zeWZwOZ+1quDaY181lgQ2E83fBeHz2jV60C7/WgdTZucEuMze5rmRoKEVa43
m7YPvbk/Vt2s2MN4uDBImYrjkXPkadaLiztLA2Jfyfvp7y6Ne2OxHiEid7Cq
vFK8NyDyXKH93tgpJc8Um6c6VOMZUXmKkN/DOynwJOKUwPN9AfE1XXj6Kkn8
Y4pDNZ6CKlF5iOMXM+EJwf5EOjbwOzfwy9f1xm928N9jHarxi6jc/89n7FmB
JxEnO57yFsl5AXFolqflmRmB52SHyv0AmWcRda8aT8uE7wo8PaLFsIi4Txee
0wNPrURSPWJxdllAHd6BJ33aYq1HNJ4RcX/H03ZtbT13bCmfeOoaOq2kjefy
5Jdaz7bJg3FsHsn4LQ/8dP3RIQ8eHeT1Pn1rfZ0fUA/uwHNikPWI1IPsFEXE
Q7rwnBB4TlJU/Uw7lWKzCwLqmJJnWHVKRjky8PSI5lcRkXv/+cxxRJh7RJzo
/F/i3YqAqPv+bdZKh4f4MNEh8iRAYnJE5J7/C7++K7Ma4boYFkjrUyJy14F1
vXBcGRC559/lBCVV8LJn+XaHym+F/crk5VzZ5LPDmMCESBOcZoX1qsBvYhd+
fIOFZ92isQkO1bQbUY/pwHOUs6p4nkesFrQ1xMldeB4UvE81lU7qzVPfH1Cn
Znk+uEmi2kg3Q6Qu9og2myLi9JIn15616DsiyOtcSjMK9k860Zje48/q5R2N
WCV1WkUdEEbu+zEtaT+ZN8xj1cfVUfucom++NbhQq7w++T5qtDSqZWVvqcYs
r6Q3qbNnZcdDawwLHud7sPWvxvAmd3P5dkPU2QldRrJ3mC/sZ3yYW8tpn0px
qraafU7sYB/N+2l3U5iPd/1w36EaT+bN/Gifk92ocieLQwN/9uajruyFasRu
eTM/jojnDfnsxR0LxlbxrSNcH1xtyy7uhwIid8XaZ6/dQrTwqDaLIuoZOZ4p
M7DeXPfFe5OsZoqUL9iPnNtcFBAXOJ7Qa8t7KpIdhrj5JqcdHtXmW0TVlWXH
czy6oVzq3ls6x6cl5YRR3nWTzKDr3TbZdSc3d2R31COZB344cFvagRt/68Fc
KP5ExHFh7qwOiOd24Li9m8miqXEOkWts8Z6IuKwDx97gOR7RPCciXtCBI2fD
hpvvS7JaEaS6gLFbPOfigKgVQcfTRYvSHtG8JiLqm3OD/RoMHJFv0AcSqGie
OGPDrL8k4HzQRQ2LhQ99bdHa9RvknGOsQ7EK5ZLkcerLLdHtkc8dmaKbvl2Y
ahvzh4+E/i8u+7/7lo0P3nhkLRaPdihcQclJQ0TRUQ2mnW+77dZMrB3lcMzy
EUfvexEH+bxSS2Sl736k9ydpdakOLs2hOc9tOG3Ft0ne6BB50i870XlEi9Y8
7Y6R03hqBZCqQpupawLqpc66EgW4T5J/62U/h2iZOI9oWX9wlqflpn0dKg+o
5DKi8h5Re8n6u8R6O9Z4WibSHJ7OiLgqlbOwtclvL3VzTiL1zll+loH2cGiI
uGlOrs3yM18f0oGfZspUWdvs/GhAZA8Wn1/bjmeKTrs5VIv1eVT0mk6wdqvx
tOj0ugpxEAxzWUAiMqOUrEu545KPnJrL0kqVFpFol0e0aKhVSzxTTNx2doi0
inDQd58b1c8xGV87VjTkYJXrnrlRpLc8Neul9QvtJhrUKLpD1af86VqvsVee
noqV9q6NNLwpk3qlhETheq/5Kl7q6rWOsdQMw+S+B6vcai9U/KnP9cM0MlDm
iNhP+NVrHN3lzjNkrvBXNjw1hEOknvgWJNdXMg/VdjsJ6J393cdV789m+sEO
nywkYuhIdkxrg8VtTVU737hiIEUmKEUudaWZ1pvUqbwXdFHyvETxX/C8K4IP
eFzOX7HzuqyU2dJLgWOyWpRaF+YqcxjfYmQOk/l2ZVbKIqWXgucn6+alLBJS
amT5bYp28sskicZsbVFupGvNnC+VyPrQB/u0HOOlmMHlMkrx3nII865+pjpR
MvnHslKWyb0U86Zk67wUekFf8tsFSo1wupFT4KuCFFG4hhLUEU6KayipgPJS
VoF6KfSd/D9K8Z71kFzqDmp6LwB9p/fd5NdrInSV80uxiG/N9ap464ZsH+at
XspibpTiveVaVjLc0WC8EG+9Oitlz72UxaIodXXJJc0c3ZVOe9OWmzdmpcxr
vZR5bV6KXiue5qXMa6PUxvCcVdh+YQZck5UyLl7KeIuUzMKrg518a8sFsY9r
nG6rX1OmaG/R+ONZKYsqXorVr9gpL2XVL6WGld+CgcyyTUGKKDZLhzkp25PI
S9legJey+aQ5vMdnKkR7/l8sar/S+oTKWg5hzbtvqfVUi2ke62vJsG1/n0XO
lj08olV/zIxWDzG31X+bdU1g4tFg/MQ6ojGjtf891rVBY3oylc6nLN6aHl3e
T6ub9r/ButbZUGKix6Z/y9lw0mg9528u197VgXebHiyC+x7ohHKp+bh3wB+c
q838/90kh06PsN0yrlm4+2g10XVZKZtbXsriZZS6LnDWvce0A2lz5/qslOnS
S9ncyUtZLvJS5gkiJTNFWsvagq32LL0wRaEbAjb7smyzp5NipJP1aF7Koq6X
slogSvHeoi5XgXzHk9lR5skns1I2K70Uv5VYnJfi7JOc66VsRRylPhlGoKul
tNPL0QrWjVkpywteirYWzealuIsglvFS8AKkALn8lFgTQpRG1EUgkkuud4vt
/gl1NwkP\
\>"],ExpressionUUID->"41b1d2c1-9044-4605-9d69-a76cebb5baf0"]
}, Open  ]],

Cell[TextData[{
 "Ou ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox["y", "2"], "\[Implies]", "y"}], "=", 
     SuperscriptBox["x", 
      FractionBox["1", "2"]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"d80b0693-24ec-49c1-bac9-03869dace23d"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "+", "6"}], "\[Implies]", "y"}], "=", 
     RowBox[{"6", "-", "x"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"49b0ec46-9a41-4c81-88aa-48ef56b43fee"],
 "."
}], "Text",ExpressionUUID->"e0c94c08-a349-45b3-9817-9d527f459583"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", 
      FractionBox["1", "2"]], ",", 
     RowBox[{"6", "-", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "12"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "3"}], "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"35dfc37b-dae0-4877-82c9-2b7064599f78"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwdjnk0FHgAx4dBSY+KddY0ydVEtpzTNr4/sejYjQYvrS6pHbWK3dlJB9tk
k8HKsrRSKqzK2SbXOMbmqNUQhRwZxtGUeyPlmrbdz3uf9/n3s8bv5O4jihQK
Zccn/2sM297AKZWB8fp9s0GWv8B+NEu464onnt8yvZFhkoanSSIDlvAMWpdd
75rIfQAz5jEjtmkkzvnwZMYNZeCyz3RXh/wKzq78DaySKnhFicwk3UkoNzb7
IpdeDdu/lLgftl7D55WpV6qcaqE2n3FAteUm1tantd+xfoThTUNZa5mZMLpg
bticVQ/fxpime8N38LLi8GUXlhjiAMtpVmo2rgo3M84KG+DtLqTn8O8hNiWq
3JM0QT01uuBt558oKhj0nX7VhLphXxemdQGyr69bEXCpGbaXPh6ve1UIkYJC
hV3JM+hUOhf37ihDVkiuz/xgC5rUtLeb/lEO45+YZXGcVkT6yF4GyitwKJE9
o/+6Fedmnfmhe6rgbD1EuiRtGEmUZS5Rq4ZvuJfrxfx2PN7iPpFbXA2qi5Zz
MK0DGf0lTA//GiivD845G90B341R4isVtXC5YJ/jdrATYrH5W6Ogx5++01eM
T3chh/o9C60NWFknmHo4KEG83YilF68RjafyN1fa9yDk+FHD4zpPUaLBsumJ
6kFaQG74E/MmnHbnMry1exHYfIvz/kQzmH1hbjEFvVC6FbVp1+RzPG2zFv/d
LYUV8a2Tz7WjQPXn9iPyfpjsTRYJdnZg//la6wjaAHS5bSVa1zswo3kx8QeH
Achvu2czHDrREs5aWRo6gHqNL+O8z3dBz9tJtGh2AH49FnvzlCToyC/wPDw0
CDfRx+m8CCmGGxZsEvNkuME6q+V9XwqnwikNBbEM02XTGxc+fVhPXy5yeyND
Rsnodzts+hAZSgkJXPsalPtdfbL+PnTUlEboJ71GaUZxI91xABxyt/jbH9+A
EXUyM37uFSzyefFhtGGoefV48YJGIG4TOT5hjGFP2Tl9j5QRuOj+fiDUcQyZ
a/R71teNIEW7OZy2ZwxkzJMjNRgFX3c3b8PFMXAv1Z/Z+WgU3edVVASSMUhK
C28Y0saxVdOb5Ro7Dh+NOq5scALhM4yFQ8ETMOdeq0xImES/1VHbkvv/gJ7Z
epUf/wESUhtCbZnEY2pufPrCAp6UQ69Z9g49/pEBFhEKRPU3Wh4r7z0e7BPo
pDspkbuG/uw53gyGW+/YsadUiBTcGDv9OWy7oD7fwFMlz4TL0rOj58F3dmr0
s1xKlMtdE6wWy9G7udL5Yak6ibzJ77f/5iM82rO181KWkVXbM2xXfUUhq2m9
yyPfLSdH8jZWRUxSCCXM7oCrvSbpZF8WbRUokEYOr0AzSYuYKNLYeiaK5OuE
GhI6+hk57dqsqV2mSKQvbOhiCx0SHcTZJnekkkO3Y1XMBLpkKO6gH6uJSqbi
liCgQY/IW5Jnwz2UCFOYeM9VzYA8rLWwsmpQIsdOLF5n5b+SnHqx14Hlrkzy
t6ROUjNXkSLbpbzSR8pEmmhQK1VcTV7GqlIDXVRIgtJ+7m4jOjHnhPU7CFWI
uqQwTbGGTgRvD55IXreIUEL5nszgNSTcMdl0+c1FpCiu4oExxZBQ/mcx+RdD
mDyO
       "]]},
     Annotation[#, "Charting`Private`Tag$31818#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[{{3., 3.}, {3.1830100719383023`, 2.8169899280616977`}, {
       3.5231376756933632`, 2.4768623243066368`}, {3.8407025690606673`, 
       2.1592974309393327`}, {4.15203128265246, 1.8479687173475403`}, {
       4.48977687769323, 1.51022312230677}, {4.804959762346243, 
       1.1950402376537568`}, {5.146559528448234, 0.8534404715517656}, {
       5.481923114774714, 0.5180768852252857}, {5.794723990713437, 
       0.2052760092865631}, {6., 0.}}]},
     Annotation[#, "Charting`Private`Tag$31818#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3.9999996734693877`, 11.999999673469388`}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"3b6800d1-09cb-444f-b5f1-56a4cf15ce04"]
}, Open  ]],

Cell["\<\
F\[OAcute]rum. Pesquise e poste uma situa\[CCedilla]\[ATilde]o-problema da \
sua \[AAcute]rea de forma\[CCedilla]\[ATilde]o afetada pelo c\[AAcute]lculo \
integral e diferencial. Escreva aqui um coment\[AAcute]rio de ao menos oito \
linhas da import\[AHat]ncia dessa aplica\[CCedilla]\[ATilde]o para a \
atividade humana.\
\>", "ItemNumbered",ExpressionUUID->"e5c5b3b9-6c65-4e52-bd03-28fde65b86f0"],

Cell["\<\
Diferen\[CCedilla]a de performance de algoritmos modelada como fun\[CCedilla]\
\[OTilde]es da quantidade de dados de entrada.\
\>", "Text",ExpressionUUID->"087cea18-e03f-4c24-98c0-ac01f3857677"]
},
WindowSize->{675, 692},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, 32000},
PrintingOptions->{"Magnification"->1.,
"PageSize"->{571.2, 817.44},
"PaperOrientation"->"Portrait",
"PaperSize"->{595.1999999999999, 841.92},
"PrintingMargins"->14.173228499999999`},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 799, 25, 49, "ItemNumbered",ExpressionUUID->"c947992e-5b51-42ac-9e23-1284b6e23c6c"],
Cell[1360, 47, 3516, 103, 365, "Text",ExpressionUUID->"702f76f4-d5ac-4f55-8ddb-582e9054190f"],
Cell[4879, 152, 796, 26, 92, "Text",ExpressionUUID->"5d04507a-650e-4e47-8c4a-ae9dcdc7822f"],
Cell[CellGroupData[{
Cell[5700, 182, 748, 25, 50, "Input",ExpressionUUID->"b624652e-314d-4cf8-b9f0-ae3acd9a5a72"],
Cell[6451, 209, 412, 13, 50, "Output",ExpressionUUID->"f50faa5d-ab6b-40f6-a838-24bef14b601c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6900, 227, 118, 0, 31, "ItemNumbered",ExpressionUUID->"6152c1b5-d8c4-4739-9872-709355530649"],
Cell[7021, 229, 701, 21, 44, "SubitemNumbered",ExpressionUUID->"d06a3251-4cf5-4dab-8131-6e075c4e1b23"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7759, 255, 242, 6, 53, "Input",ExpressionUUID->"b41dbf56-39f8-464c-b81f-707d6c4ce5bb"],
Cell[8004, 263, 189, 4, 51, "Output",ExpressionUUID->"65d19d0a-e52b-4340-9be7-648809a55ae3"]
}, Open  ]],
Cell[8208, 270, 753, 25, 51, "Text",ExpressionUUID->"2293720a-f4e3-467d-9c34-fd23917e81c7"],
Cell[8964, 297, 1391, 46, 56, "Text",ExpressionUUID->"b18733c3-8740-434d-9dfe-16e48650e4d8"],
Cell[10358, 345, 456, 13, 44, "SubitemNumbered",ExpressionUUID->"c6f746c9-d4ef-4fde-8c69-943a444fd79d"],
Cell[10817, 360, 551, 18, 51, "Text",ExpressionUUID->"0e2230d3-55a5-467d-8330-4b27a7f66eb4"],
Cell[11371, 380, 528, 16, 51, "Text",ExpressionUUID->"11035450-1985-4099-8e0c-0127d66eee81"],
Cell[11902, 398, 2036, 70, 133, "Text",ExpressionUUID->"9a491549-c409-455d-a7d0-76faae6a53a7"],
Cell[13941, 470, 1985, 61, 163, "Text",ExpressionUUID->"232f2eb2-30b6-47f3-acea-d54f71671ff3"],
Cell[15929, 533, 817, 23, 41, "Text",ExpressionUUID->"1e58e1b1-0d82-4451-9b3f-2f3ff00c65fd"],
Cell[16749, 558, 585, 14, 46, "Text",ExpressionUUID->"152ab94d-ec99-41be-a5ac-23ca864b439f"],
Cell[17337, 574, 442, 12, 73, "Text",ExpressionUUID->"2c4adf54-1456-40b2-9805-1e065974431f"],
Cell[17782, 588, 1986, 60, 262, "Text",ExpressionUUID->"e4bb1c93-95b7-4bbd-9433-9bf92b3918c2"],
Cell[CellGroupData[{
Cell[19793, 652, 720, 23, 42, "Input",ExpressionUUID->"5b60e978-c786-4a88-999c-8932d9c745f4"],
Cell[20516, 677, 528, 17, 48, "Output",ExpressionUUID->"4a8e705f-8fd9-44c7-98a4-94df68203593"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21081, 699, 143, 1, 42, "WolframAlphaLong",ExpressionUUID->"4b393681-e82e-49db-81b2-e1dac6329db6"],
Cell[21227, 702, 119703, 2291, 1379, "Print",ExpressionUUID->"b1a546a4-e279-48b7-83d0-cd045f72d37a"]
}, Open  ]],
Cell[140945, 2996, 662, 21, 51, "SubitemNumbered",ExpressionUUID->"4fe30b17-d295-4784-84eb-ef9426846ee8"],
Cell[141610, 3019, 1791, 57, 255, "Text",ExpressionUUID->"6498a802-7011-49ac-9da2-4080cde41c78"],
Cell[143404, 3078, 484, 15, 57, "SubitemNumbered",ExpressionUUID->"2f5586da-f412-479c-833d-871040f48063"],
Cell[143891, 3095, 2040, 61, 334, "Text",ExpressionUUID->"12ee0428-3a39-48c8-b517-7bd647fd47da"],
Cell[CellGroupData[{
Cell[145956, 3160, 343, 10, 42, "WolframAlphaLong",ExpressionUUID->"a9ed221c-ca90-4e11-88db-7fe9086473fd"],
Cell[146302, 3172, 107919, 2061, 921, "Print",ExpressionUUID->"7ad1327b-d985-4332-adc0-0bddfe2fb675"]
}, Open  ]],
Cell[254236, 5236, 481, 14, 46, "SubitemNumbered",ExpressionUUID->"5d0a10ea-870f-43f2-8345-1b62196bb28e"],
Cell[254720, 5252, 1101, 35, 87, "Text",ExpressionUUID->"0887d663-99d2-4d06-b6fd-e68487ebb8fb"],
Cell[255824, 5289, 1239, 38, 53, "Text",ExpressionUUID->"e8333cc7-71ee-4842-bb2e-d271de325a2e"],
Cell[257066, 5329, 551, 15, 46, "Text",ExpressionUUID->"94e751f7-165b-48fc-bfe8-92baf6ebac9b"],
Cell[CellGroupData[{
Cell[257642, 5348, 256, 6, 44, "Input",ExpressionUUID->"ea20b09c-9d03-4798-a290-6619c0c42d51"],
Cell[257901, 5356, 223, 6, 48, "Output",ExpressionUUID->"0875b676-7795-449b-8bce-c209f0594059"]
}, Open  ]],
Cell[CellGroupData[{
Cell[258161, 5367, 149, 1, 42, "WolframAlphaLong",ExpressionUUID->"69b9f31a-fd60-454d-a53d-7f3dfe9d1eb1"],
Cell[258313, 5370, 122589, 2350, 1435, "Print",ExpressionUUID->"7684dbce-54c6-4a60-a1f7-ba5fc0e2d529"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380939, 7725, 100, 0, 31, "ItemNumbered",ExpressionUUID->"95e34129-4a89-49a7-90aa-802286cebc82"],
Cell[381042, 7727, 507, 15, 42, "SubitemNumbered",ExpressionUUID->"47aa9785-5318-4711-beb3-d69da05fe754"]
}, Open  ]],
Cell[381564, 7745, 2319, 69, 218, "Text",ExpressionUUID->"c5888815-9886-4453-ae17-9778430b5d0a"],
Cell[CellGroupData[{
Cell[383908, 7818, 373, 11, 44, "Input",ExpressionUUID->"6e17b4e1-c17f-43b4-85de-dbc76bfed323"],
Cell[384284, 7831, 291, 8, 32, "Output",ExpressionUUID->"df4a7c56-2f4b-45cc-851d-0d5ddc31abf7"]
}, Open  ]],
Cell[384590, 7842, 478, 14, 45, "SubitemNumbered",ExpressionUUID->"5689158e-d0af-484c-b135-9e811571df4c"],
Cell[385071, 7858, 2020, 60, 233, "Text",ExpressionUUID->"26b34f26-eaa0-4d1d-ab43-fe4b81602bc5"],
Cell[CellGroupData[{
Cell[387116, 7922, 229, 6, 44, "Input",ExpressionUUID->"326ae6cb-9fa9-437f-bb51-2f366ef0fe5e"],
Cell[387348, 7930, 135, 2, 32, "Output",ExpressionUUID->"970a4a9d-6c20-404e-979b-33860b6814c5"]
}, Open  ]],
Cell[387498, 7935, 633, 20, 51, "Text",ExpressionUUID->"5e31ed44-25c9-49b7-868d-459850a1363a"],
Cell[CellGroupData[{
Cell[388156, 7959, 346, 10, 46, "Input",ExpressionUUID->"1320fccd-02e7-410f-a8ad-9910b7833674"],
Cell[388505, 7971, 254, 7, 51, "Output",ExpressionUUID->"94abe28e-b2b4-4245-9ce5-5d0c6a0602c7"]
}, Open  ]],
Cell[388774, 7981, 413, 12, 64, "SubitemNumbered",ExpressionUUID->"ae318266-bcf0-431c-addb-b9e0520a620f"],
Cell[389190, 7995, 692, 22, 71, "Text",ExpressionUUID->"e6ebf761-470c-4756-825d-a74b447e1ca6"],
Cell[389885, 8019, 207, 3, 34, "Text",ExpressionUUID->"2a813ab6-89ca-4204-a432-3c5b88646eb4"],
Cell[CellGroupData[{
Cell[390117, 8026, 448, 14, 42, "Input",ExpressionUUID->"5f8e8f29-2bb8-4f87-919f-1c9022180b61"],
Cell[390568, 8042, 402, 12, 37, "Output",ExpressionUUID->"8a0ea3ca-2aa0-4c29-a39d-b4dca8245768"]
}, Open  ]],
Cell[CellGroupData[{
Cell[391007, 8059, 271, 8, 42, "Input",ExpressionUUID->"3b8fdd37-d3ae-4a47-b18c-467bc032c267"],
Cell[391281, 8069, 307, 8, 32, "Output",ExpressionUUID->"64de91bf-ae7c-425c-b284-650f3d7e9ba2"]
}, Open  ]],
Cell[391603, 8080, 336, 8, 42, "SubitemNumbered",ExpressionUUID->"cc131665-69b9-4696-b6e5-b03c60b85081"],
Cell[391942, 8090, 1615, 56, 112, "Text",ExpressionUUID->"efcbdf10-bafb-46b4-a94f-ef85a1986e96"],
Cell[393560, 8148, 3332, 98, 383, "Text",ExpressionUUID->"2cfad53a-a9cf-44e6-bf8f-36405c82c194"],
Cell[396895, 8248, 148, 1, 34, "Text",ExpressionUUID->"3218ade7-e20e-4cd1-81c2-73554452d399"],
Cell[397046, 8251, 1244, 39, 39, "Text",ExpressionUUID->"b2f9d0e6-68ee-48d1-9b36-b0c011f02667"],
Cell[CellGroupData[{
Cell[398315, 8294, 239, 6, 46, "Input",ExpressionUUID->"3df803a0-032f-4fd7-9739-0d2fb74c356b"],
Cell[398557, 8302, 157, 3, 49, "Output",ExpressionUUID->"bdea9db6-9f44-46a8-af96-f13f86cf5bc3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398751, 8310, 329, 9, 42, "WolframAlphaLong",ExpressionUUID->"e87d6422-b34d-46d1-8e89-b38ee572b197"],
Cell[399083, 8321, 125142, 2402, 1445, "Print",ExpressionUUID->"8f92ae90-4c3c-4b53-8088-5d35c07685a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[524262, 10728, 144, 1, 42, "WolframAlphaLong",ExpressionUUID->"131b2c6b-1ffe-4770-8f2d-61dd118cc1a1"],
Cell[524409, 10731, 136913, 2621, 1737, "Print",ExpressionUUID->"3a33ba37-cc5e-4546-8bb6-84ae6e796660"]
}, Open  ]],
Cell[661337, 13355, 473, 14, 46, "SubitemNumbered",ExpressionUUID->"4e436a9a-0d2d-4343-8196-0cdb31979495"],
Cell[CellGroupData[{
Cell[661835, 13373, 321, 10, 31, "Input",ExpressionUUID->"3bdf4a63-1f32-413c-9c45-e70d0af4a122"],
Cell[662159, 13385, 280, 8, 53, "Output",ExpressionUUID->"58724239-3969-4147-8a6f-7155a6738e38"]
}, Open  ]],
Cell[662454, 13396, 99, 0, 34, "Text",ExpressionUUID->"2e9531ca-1d3c-4eaa-8c71-4623d80d97c7"],
Cell[CellGroupData[{
Cell[662578, 13400, 301, 8, 31, "Input",ExpressionUUID->"59b831d2-f584-447f-91b9-faf74e75ba73"],
Cell[662882, 13410, 348, 10, 32, "Output",ExpressionUUID->"b8fb1b2e-a3b2-48e9-80ea-aa04606e117b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[663267, 13425, 339, 10, 31, "Input",ExpressionUUID->"7a516cee-27c8-4dcf-bd9c-e383ff40e221"],
Cell[663609, 13437, 215, 6, 48, "Output",ExpressionUUID->"fa5a0745-7049-49b1-9195-bbfdda787484"]
}, Open  ]],
Cell[CellGroupData[{
Cell[663861, 13448, 277, 8, 28, "Input",ExpressionUUID->"d8f7909c-68a6-4a13-8a11-7a0a583a9649"],
Cell[664141, 13458, 288, 9, 46, "Output",ExpressionUUID->"3fbe9c95-0f33-4470-942e-e36efc967113"]
}, Open  ]],
Cell[664444, 13470, 2206, 69, 178, "Text",ExpressionUUID->"646de3a8-0f3a-4bff-b062-53de89da9841"],
Cell[666653, 13541, 2441, 79, 262, "Text",ExpressionUUID->"9155a537-8b04-4d6f-93b2-818b5110c5e0"],
Cell[669097, 13622, 3863, 115, 331, "Text",ExpressionUUID->"bf49d9c4-b263-4ffd-b849-2e7833d0ea7e"],
Cell[672963, 13739, 145, 1, 34, "Text",ExpressionUUID->"7728d98e-4eee-476c-a66d-71aacf43f9e8"],
Cell[673111, 13742, 2633, 82, 211, "Text",ExpressionUUID->"76c44c0c-a181-46d8-8c02-3e0bd5935e0c"],
Cell[675747, 13826, 387, 10, 68, "Text",ExpressionUUID->"32cb433a-5ae7-4b8f-9e35-b6a39d9a157d"],
Cell[676137, 13838, 2053, 65, 200, "Text",ExpressionUUID->"5a42c6db-e233-4788-85e6-7e3c8d4c3777"],
Cell[CellGroupData[{
Cell[678215, 13907, 470, 14, 45, "Input",ExpressionUUID->"623643a7-aa18-4e49-af50-0cd89bc4701b"],
Cell[678688, 13923, 382, 11, 48, "Output",ExpressionUUID->"af8d66f2-d621-4d39-8c86-9320564b1aa4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[679107, 13939, 614, 19, 47, "Input",ExpressionUUID->"3b6daa22-38f2-4627-80de-4fde219433a6"],
Cell[679724, 13960, 779, 26, 50, "Output",ExpressionUUID->"1e4e602d-f04c-4fad-b1ec-574c64a88096"]
}, Open  ]],
Cell[CellGroupData[{
Cell[680540, 13991, 345, 10, 42, "WolframAlphaLong",ExpressionUUID->"5733e629-96d7-475d-a41e-b32027084e0e"],
Cell[680888, 14003, 72191, 1456, 1071, "Print",ExpressionUUID->"9378bc9c-baab-493c-86f0-9baba2fd225c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[753116, 15464, 3749, 87, 314, "Input",ExpressionUUID->"496f8b49-5ad8-4c56-b196-8c971b9ac563"],
Cell[756868, 15553, 277, 5, 46, "Output",ExpressionUUID->"c60ac999-2c84-45d0-b14e-69d3c0256e44"]
}, Open  ]],
Cell[757160, 15561, 500, 15, 61, "SubitemNumbered",ExpressionUUID->"60729844-93bd-43c1-bbb3-6de130f96267"],
Cell[757663, 15578, 1182, 38, 57, "Text",ExpressionUUID->"369ba62b-6a6d-439f-b603-0d1cfe689cbb"],
Cell[758848, 15618, 1334, 48, 183, "Text",ExpressionUUID->"7bd8ef53-5ddf-48d3-b91f-3ff569aaf5c1"],
Cell[760185, 15668, 1092, 37, 93, "Text",ExpressionUUID->"367143d3-8a6f-4060-8022-298e6fbde2cb"],
Cell[761280, 15707, 722, 16, 102, "Text",ExpressionUUID->"23a37fc1-bfcd-4f0b-ae89-10a6206537d4"],
Cell[762005, 15725, 5157, 158, 403, "Text",ExpressionUUID->"ee18b39e-796a-4af3-a8f5-482c35fb7211"],
Cell[767165, 15885, 1914, 58, 142, "Text",ExpressionUUID->"b2761751-db20-4006-9f89-e3b2942eba32"],
Cell[CellGroupData[{
Cell[769104, 15947, 1790, 60, 131, "Input",ExpressionUUID->"9abe5634-bcd2-4a65-b6d1-dc7bd15883c0"],
Cell[770897, 16009, 1078, 36, 97, "Output",ExpressionUUID->"35f0b53b-50c0-413d-93f6-7b1a4bba842c"]
}, Open  ]],
Cell[771990, 16048, 495, 15, 75, "SubitemNumbered",ExpressionUUID->"5278fed7-7bc9-4ef0-b5b2-ccf41e934d68"],
Cell[772488, 16065, 2145, 64, 337, "Text",ExpressionUUID->"99dde00e-a20b-449d-9c23-9cf9aa2490c8"],
Cell[CellGroupData[{
Cell[774658, 16133, 560, 18, 31, "Input",ExpressionUUID->"1d4e3019-9b2a-4fe5-8358-33977d274c4f"],
Cell[775221, 16153, 269, 8, 35, "Output",ExpressionUUID->"2d132960-92de-4a46-8b18-7389552aab9c"]
}, Open  ]],
Cell[775505, 16164, 470, 15, 75, "SubitemNumbered",ExpressionUUID->"ff0ff674-96e6-43b1-ae33-24a2d7bec925"],
Cell[775978, 16181, 4264, 132, 708, "Text",ExpressionUUID->"2ef79034-ba30-4c78-b524-d0d915dec2be"],
Cell[CellGroupData[{
Cell[780267, 16317, 1306, 46, 116, "Input",ExpressionUUID->"46dcb6dc-4f11-412c-877b-c07f9d91b151"],
Cell[781576, 16365, 810, 30, 51, "Output",ExpressionUUID->"0c95a324-270e-493d-a874-7007dc2a5786"]
}, Open  ]],
Cell[782401, 16398, 191, 3, 31, "ItemNumbered",ExpressionUUID->"afd24148-cb9b-4eb0-a9a4-3bc38d4b78fd"],
Cell[782595, 16403, 463, 14, 46, "Text",ExpressionUUID->"c93c8066-de81-4bf4-b770-664a633dcd3f"],
Cell[CellGroupData[{
Cell[783083, 16421, 490, 15, 31, "Input",ExpressionUUID->"e2f1f888-19d5-45fc-ba92-8ed46293c0e1"],
Cell[783576, 16438, 13390, 239, 240, "Output",ExpressionUUID->"61691796-2444-4ca2-a3d0-dd83b2b170e9"]
}, Open  ]],
Cell[796981, 16680, 3689, 112, 502, "Text",ExpressionUUID->"1fb33746-81ce-49c1-a854-0269bdabe20b"],
Cell[800673, 16794, 180, 3, 34, "Text",ExpressionUUID->"32fe57f6-b928-4201-8a62-8f6cf5fad0f7"],
Cell[CellGroupData[{
Cell[800878, 16801, 1139, 41, 87, "Input",ExpressionUUID->"2eb35528-5efb-4935-9f8d-403cdd878cd9"],
Cell[802020, 16844, 562, 20, 51, "Output",ExpressionUUID->"b94ae242-6f59-4778-b3c0-9e7c7efc2fe1"]
}, Open  ]],
Cell[802597, 16867, 192, 3, 31, "ItemNumbered",ExpressionUUID->"032627a8-b61a-48c0-9778-6a870c2bb7ea"],
Cell[802792, 16872, 436, 13, 46, "Text",ExpressionUUID->"11d57ba4-4f13-43b6-85c0-3d434c1ab8af"],
Cell[CellGroupData[{
Cell[803253, 16889, 441, 13, 31, "Input",ExpressionUUID->"2267d77b-1717-4069-8139-cb19126f6493"],
Cell[803697, 16904, 15639, 277, 256, 8724, 163, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"41b1d2c1-9044-4605-9d69-a76cebb5baf0"]
}, Open  ]],
Cell[819351, 17184, 712, 23, 48, "Text",ExpressionUUID->"e0c94c08-a349-45b3-9817-9d527f459583"],
Cell[CellGroupData[{
Cell[820088, 17211, 466, 14, 42, "Input",ExpressionUUID->"35dfc37b-dae0-4877-82c9-2b7064599f78"],
Cell[820557, 17227, 4037, 84, 262, "Output",ExpressionUUID->"3b6800d1-09cb-444f-b5f1-56a4cf15ce04"]
}, Open  ]],
Cell[824609, 17314, 408, 6, 71, "ItemNumbered",ExpressionUUID->"e5c5b3b9-6c65-4e52-bd03-28fde65b86f0"],
Cell[825020, 17322, 204, 3, 56, "Text",ExpressionUUID->"087cea18-e03f-4c24-98c0-ac01f3857677"]
}
]
*)

