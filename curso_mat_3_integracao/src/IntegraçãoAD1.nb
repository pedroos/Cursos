(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1403957,      28636]
NotebookOptionsPosition[   1384888,      28363]
NotebookOutlinePosition[   1385461,      28385]
CellTagsIndexPosition[   1385418,      28382]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["2 - item (a) incorreta. Sugest\[ATilde]o: derivar F(x).",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["3 -\nItem (c) n\[ATilde]o resolvida.\nItem (d) resolu\[CCedilla]\
\[ATilde]o incorreta da integral por partes.\n- item (e) n\[ATilde]o colocou \
a resolu\[CCedilla]\[ATilde]o.",
  FontColor->GrayLevel[0.5]]
}], "Text",
 CellDingbat->
  "\[LightBulb]",ExpressionUUID->"ba9657a1-46c4-4c7c-936b-1f442968abe2"],

Cell[TextData[{
 "Mostre que ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        FractionBox["2", 
         SuperscriptBox["x", "3"]], "+", 
        FractionBox["3", 
         SuperscriptBox["x", "2"]], "+", 
        FractionBox["5", "x"]}], ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{"-", "1"}], 
      SuperscriptBox["x", "2"]], "-", 
     FractionBox["3", "x"], "+", 
     RowBox[{"5", " ", "ln", 
      RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+", 
     "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"d4cfb6dd-b43a-4ad6-9ebb-423b7a186571"],
 "."
}], "ItemNumbered",ExpressionUUID->"c947992e-5b51-42ac-9e23-1284b6e23c6c"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["2", 
        SuperscriptBox["x", "3"]], "+", 
       FractionBox["3", 
        SuperscriptBox["x", "2"]], "+", 
       FractionBox["5", "x"]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      FractionBox["2", 
       SuperscriptBox["x", "3"]]}], "+", 
     RowBox[{"\[Integral]", 
      FractionBox["3", 
       SuperscriptBox["x", "2"]]}], "+", 
     RowBox[{"\[Integral]", 
      FractionBox["5", "x"]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{"2", "\[CenterDot]", 
        FractionBox["1", 
         SuperscriptBox["x", "3"]]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{"3", "\[CenterDot]", 
        FractionBox["1", 
         SuperscriptBox["x", "2"]]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{"5", "\[CenterDot]", 
        FractionBox["1", "x"]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"2", 
        RowBox[{"\[Integral]", 
         FractionBox["1", 
          SuperscriptBox["x", "3"]]}]}], "+", 
       RowBox[{"3", 
        RowBox[{"\[Integral]", 
         FractionBox["1", 
          SuperscriptBox["x", "2"]]}]}], "+", 
       RowBox[{"5", 
        RowBox[{"\[Integral]", 
         FractionBox["1", "x"]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"2", 
         RowBox[{"\[Integral]", 
          SuperscriptBox["x", 
           RowBox[{"-", "3"}]]}]}], "+", 
        RowBox[{"3", 
         RowBox[{"\[Integral]", 
          SuperscriptBox["x", 
           RowBox[{"-", "2"}]]}]}], "+", 
        RowBox[{"5", " ", "ln", 
         RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
        "+", "C"}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"2", " ", 
          FractionBox[
           SuperscriptBox["x", 
            RowBox[{"-", "2"}]], 
           RowBox[{"-", "2"}]]}], "+", "C", "+", 
         RowBox[{"3", " ", 
          FractionBox[
           SuperscriptBox["x", 
            RowBox[{"-", "1"}]], 
           RowBox[{"-", "1"}]]}], "+", "C", "+", 
         RowBox[{"5", "ln", 
          RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
         "+", "C"}], "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"2", " ", 
           FractionBox["1", 
            SuperscriptBox["x", "2"]], " ", 
           FractionBox["1", 
            RowBox[{"-", "2"}]]}], "+", 
          RowBox[{"3", " ", 
           FractionBox[
            RowBox[{"-", "1"}], "x"]}], "+", 
          RowBox[{"5", " ", "ln", 
           RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
          "+", "C"}], "=", "\[IndentingNewLine]", 
         RowBox[{
          FractionBox["1", 
           RowBox[{"-", 
            SuperscriptBox["x", "2"]}]], "-", 
          FractionBox["3", "x"], "+", 
          RowBox[{"5", "ln", 
           RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
          "+", 
          RowBox[{"C", 
           StyleBox[".",
            FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"4f8cda60-f343-4dd3-b45f-cec2810479e7"]], "Text",\
ExpressionUUID->"702f76f4-d5ac-4f55-8ddb-582e9054190f"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"ln", " ", "x"}], ")"}], "'"}], "=", 
    FractionBox["1", "x"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"f6bbf9fe-2de6-4c7a-9711-e3468fb05766"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      SuperscriptBox["x", "n"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["x", 
       RowBox[{"n", "+", "1"}]], 
      RowBox[{"n", "+", "1"}]], "+", "C"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"ec98b256-8be8-483f-a87e-bfe0bcf9f87d"],
 "."
}], "Text",ExpressionUUID->"5d04507a-650e-4e47-8c4a-ae9dcdc7822f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", 
       RowBox[{"2", 
        SuperscriptBox["x", "2"]}]]}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Log", "[", "x", "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Log", "[", 
      SuperscriptBox["x", "3"], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"2", " ", 
    FractionBox[
     SuperscriptBox["x", 
      RowBox[{"-", "2"}]], 
     RowBox[{"-", "2"}]]}], ",", 
   RowBox[{"2", " ", 
    FractionBox[
     RowBox[{"-", "2"}], 
     SuperscriptBox["x", "2"]]}]}], "}"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"b624652e-314d-4cf8-b9f0-ae3acd9a5a72"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", 
    SuperscriptBox["x", "3"]], ",", 
   FractionBox["1", "x"], ",", 
   FractionBox["3", "x"], ",", 
   RowBox[{"-", 
    FractionBox["1", 
     SuperscriptBox["x", "2"]]}], ",", 
   RowBox[{"-", 
    FractionBox["4", 
     SuperscriptBox["x", "2"]]}]}], "}"}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"f50faa5d-ab6b-40f6-a838-24bef14b601c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Resolva as integrais e assinale V ou F.", "ItemNumbered",ExpressionUUID->"6152c1b5-d8c4-4739-9872-709355530649"],

Cell[TextData[{
 "Uma fun\[CCedilla]\[ATilde]o primitiva de ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    SuperscriptBox["\[ExponentialE]", 
     FractionBox["x", "2"]]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"dfe57fc7-3af5-4e39-82d0-f7b3f8d3787c"],
 " \[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"F", 
     RowBox[{"(", "x", ")"}]}], "=", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox["x", "2"]]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"57109ec5-fed1-431d-afa3-ea834f136237"],
 "."
}], "SubitemNumbered",ExpressionUUID->"d06a3251-4cf5-4dab-8131-6e075c4e1b23"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     FractionBox[
      SuperscriptBox["\[ExponentialE]", 
       FractionBox["x", "2"]], "2"], ",", "x"}], "]"}], ",", 
   RowBox[{
    RowBox[{"Simplify", "@", 
     FractionBox["x", "4"]}], 
    SuperscriptBox["\[ExponentialE]", 
     FractionBox[
      RowBox[{"x", "-", "2"}], "2"]]}]}], "}"}]], "Input",
 CellLabel->
  "In[148]:=",ExpressionUUID->"b41dbf56-39f8-464c-b81f-707d6c4ce5bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"x", "/", "2"}]], "4"], ",", 
   RowBox[{
    FractionBox["1", "4"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2"}], "+", "x"}], ")"}]}]], " ", "x"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[148]=",ExpressionUUID->"3e4eabe7-d794-45c6-99d6-a8004508ed98"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Verdadeiro. ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]]}], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{
       RowBox[{"(", 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox["x", "2"]], ")"}], "'"}]}], "=", 
     RowBox[{
      FractionBox["1", "2"], 
      SuperscriptBox["\[ExponentialE]", 
       FractionBox["x", "2"]]}]}]}], TraditionalForm]],
  FontSize->24,
  FontColor->GrayLevel[0.5],
  Background->None,ExpressionUUID->"632dcc73-0e0f-4197-95b3-12d4523a6d76"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"2293720a-f4e3-467d-9c34-fd23917e81c7"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]]}], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], "\[CenterDot]", 
       FractionBox["x", "2"]}], 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        FractionBox["x", "2"], "-", "1"}]]}], "=", 
     RowBox[{
      FractionBox["x", "4"], 
      SuperscriptBox["\[ExponentialE]", 
       FractionBox[
        RowBox[{"x", "-", "2"}], "2"]]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "11da902a-7da4-49d7-94cf-2b75ea52c2c5"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"aacd1572-d0ab-45cf-abfe-2790b3c17243"],

Cell[TextData[{
 "Regra da cadeia. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", "x", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"53ead85a-1466-4e8b-a1de-1028ad30c1bd"],
 " ou a \[OpenCurlyQuote]fun\[CCedilla]\[ATilde]o de dentro\[CloseCurlyQuote] \
aqui \[EAcute] ",
 Cell[BoxData[
  FormBox[
   FractionBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"66fd4e2e-f6ea-4496-b417-6b3327f25288"],
 ", e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "x", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"854cf040-69df-45cf-ac83-bc81ce0d3a19"],
 " ou a \[OpenCurlyQuote]fun\[CCedilla]\[ATilde]o de fora\[CloseCurlyQuote] \
aqui \[EAcute] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ExponentialE]", "x"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"4065e894-ad88-436b-b8b4-2472a7668188"],
 ". A derivada de ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    RowBox[{"g", "(", "x", ")"}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"8e5e37c6-5a19-4be8-8eac-5f2b6768dbb9"],
 " em ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"4c7ccfdc-5dc5-4f2e-a311-6f6bf6f51095"],
 " ser\[AAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "'"}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"g", "(", "x", ")"}], ")"}], "\[CenterDot]", 
     RowBox[{"g", "'"}]}], 
    RowBox[{"(", "x", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"2bd98f7e-0bea-47ed-97c7-8238e5da4010"],
 ", ou seja, ",
 StyleBox["a de dentro executada pela derivada da de fora, vezes a derivada \
da de dentro ",
  FontColor->GrayLevel[0.5]],
 "a derivada da de dentro em respeito \[AGrave] de fora, vezes a derivada da \
de de dentro.\nA nota\[CCedilla]\[ATilde]o de aspas n\[ATilde]o presta para \
isto, pois n\[ATilde]o indica a vari\[AAcute]vel de diferencia\[CCedilla]\
\[ATilde]o.\nMas anyway, o que quer dizer a derivada de uma fun\[CCedilla]\
\[ATilde]o de ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b2c5be16-5500-48b8-9845-457690a4eb12"],
 " em ",
 Cell[BoxData[
  FormBox[
   FractionBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"66fec2c6-2584-4062-a28d-61d080110596"],
 ", ao inv\[EAcute]s de ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"c5fae963-001e-406d-b08d-ec7234c53275"],
 "? Aqui, encontramos um limite da nota\[CCedilla]\[ATilde]o.\n",
 StyleBox["Vamos considerar que significa em ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "bc42c006-5dc4-4c67-944e-f4cf8ccf864f"],
 StyleBox[". Ou seja: ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[DifferentialD]", 
      SuperscriptBox["\[ExponentialE]", "x"]}], 
     RowBox[{"\[DifferentialD]", 
      FractionBox["x", "2"]}]], "=", 
    FractionBox[
     RowBox[{"\[DifferentialD]", 
      SuperscriptBox["\[ExponentialE]", "x"]}], 
     RowBox[{"\[DifferentialD]", "x"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "b0b098be-d78b-4090-8bdc-b392ebc514f1"],
 StyleBox[".\n",
  FontColor->GrayLevel[0.5]],
 "Est\[AAcute] errado. Significa considerar que o ",
 Cell[BoxData[
  FormBox[
   FractionBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"c41642c4-9cbc-4810-84c8-71b2910f44c1"],
 " \[EAcute] o ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"84cf8c33-0cfa-4e11-ae3d-f3eb086d5911"],
 " de ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ExponentialE]", "x"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b6b8a91c-ea07-417f-8624-47d94d598aca"],
 ". Portanto ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      SuperscriptBox["\[ExponentialE]", "x"], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", "x"], "\[Implies]", 
      RowBox[{"(", 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]], ")"}]}], "=", 
     SuperscriptBox["\[ExponentialE]", 
      FractionBox["x", "2"]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"02a0c48c-116e-4ddf-a55a-0823f588e5d4"],
 ". ",
 StyleBox["A vari\[AAcute]vel de integra\[CCedilla]\[ATilde]o \[EAcute] \
tomada como uma \[OpenCurlyDoubleQuote]constante\[CloseCurlyDoubleQuote].",
  Background->RGBColor[0.87, 0.94, 1]]
}], "Text",ExpressionUUID->"c222e2af-7639-4ee3-909f-f680abd047b8"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox[
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           FractionBox["1", "2"], 
           SuperscriptBox["\[ExponentialE]", 
            FractionBox["x", "2"]]}], ")"}], "'"}], "=", 
        RowBox[{
         RowBox[{
          FractionBox["1", "2"], 
          RowBox[{
           RowBox[{"(", 
            SuperscriptBox["\[ExponentialE]", 
             FractionBox["x", "2"]], ")"}], "'"}]}], "="}]}],
       FontColor->GrayLevel[0]], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], "\[CenterDot]", 
         RowBox[{
          RowBox[{"(", 
           SuperscriptBox["\[ExponentialE]", "x"], ")"}], "'"}]}], 
        SuperscriptBox["(", 
         FractionBox["x", "2"]]}],
       FontColor->GrayLevel[0.5]]}], 
     StyleBox[")",
      FontColor->GrayLevel[0.5]]}], 
    StyleBox["\[CenterDot]",
     FontColor->GrayLevel[0.5]], 
    StyleBox[
     RowBox[{
      RowBox[{"(", 
       FractionBox["x", "2"], ")"}], "'"}],
     FontColor->GrayLevel[0.5]]}], 
   StyleBox["=",
    FontColor->GrayLevel[0.5]], 
   StyleBox[
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], "\[CenterDot]", 
      SuperscriptBox["e", 
       SuperscriptBox["x", 
        FractionBox["x", "2"]]], "\[CenterDot]", 
      FractionBox["1", "2"]}], "=", 
     RowBox[{
      FractionBox["1", "4"], "\[CenterDot]", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        FractionBox[
         SuperscriptBox["x", "2"], "2"]], 
       StyleBox[".",
        FontSize->14], 
       StyleBox[" ",
        FontSize->14], 
       StyleBox["Errado",
        FontSize->14], 
       StyleBox[".",
        FontSize->14]}]}]}],
    FontColor->GrayLevel[0.5]]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"3b5d5e4d-b7c5-4685-b6dc-83bb83b6d7e3"]], "Text",Expres\
sionUUID->"8c6b065d-2c31-45d3-ac4f-04de93386f09"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", "2"], 
      SuperscriptBox["\[ExponentialE]", 
       FractionBox["x", "2"]]}], ")"}], "'"}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      RowBox[{"(", 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]], ")"}], "'"}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], "\[CenterDot]", 
      FractionBox[
       RowBox[{"\[DifferentialD]", 
        SuperscriptBox["\[ExponentialE]", "x"]}], 
       RowBox[{"\[DifferentialD]", 
        FractionBox["x", "2"]}]], "\[CenterDot]", 
      FractionBox[
       RowBox[{"\[DifferentialD]", 
        FractionBox["x", "2"]}], 
       RowBox[{"\[DifferentialD]", "x"}]]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], "\[CenterDot]", 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]], "\[CenterDot]", 
       FractionBox["1", "2"]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        FractionBox["1", "4"], "\[CenterDot]", 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox["x", "2"]]}], "\[NotEqual]", 
       RowBox[{
        FractionBox["1", "2"], "\[CenterDot]", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          FractionBox["x", "2"]], 
         StyleBox[".",
          FontSize->14]}]}]}]}]}]}]}], 
  TraditionalForm]],ExpressionUUID->"2d98be24-dc20-4a67-b130-195d3f682805"]], \
"Text",
 FontSize->24,ExpressionUUID->"96d37d8d-471b-4450-8874-25195c2c5644"],

Cell[CellGroupData[{

Cell[TextData[{
 "derivative of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], "*", 
    SuperscriptBox["E", 
     FractionBox["x", "2"]]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "5801328f-774a-481f-859d-84f1fbf3e7ff"]
}], "WolframAlphaLong",
 CellLabel->
  "In[149]:=",ExpressionUUID->"68bbab7d-642e-40fd-bec4-d82147cd4d72"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "derivative of (1/2)*E^(x/2)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[E^(x/2)/2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "x"}]]], "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "2"], HoldForm], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"x", "/", "2"}]], "4"], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{
                    "\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "2"], ")"}]}]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Factor \"", "\"out \"", "\"constants:\""},
                     "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], ")"}]}], TraditionalForm], 
                    ")"}]}], TraditionalForm]}, "RowDefault"]}, "RowDefault"],
                     HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                   AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], ")"}]}], "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[ExponentialE]", "u"]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    HoldForm], TraditionalForm]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    FractionBox["x", "2"]}]}, "RowWithSeparators"], "\" \""}, 
                    "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", "u"], ")"}]}], 
                    "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", "u"]}]}, 
                    "RowWithSeparators"], HoldForm], "\":\""}, "RowDefault"]},
                     "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox["1", 
                    TagBox["2", HoldForm]], 
                    FrameBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    TagBox["x", HoldForm], 
                    TagBox["2", HoldForm]]], " ", 
                    TagBox[
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    FractionBox["x", "2"], ")"}]}], TraditionalForm], 
                    HoldForm]}], FrameStyle -> GrayLevel[0.8], FrameMargins -> 
                    1, BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}]}, "RowDefault"]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Factor \"", "\"out \"", "\"constants:\""},
                     "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    FractionBox[
                    TagBox[
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], HoldForm], 
                    TagBox["2", HoldForm]], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], "\" \""},
                     "RowDefault"], 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "2"]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], ")"}]}], HoldForm]},
                     "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    TagBox["1", HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], "\" \""},
                     "RowDefault"], 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "4"]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Input__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[E^(x/2)/4, {x, -6, 6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2583$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2582$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2582$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2583$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1773671$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2582$\
1773676$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2583$1773677$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2583$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2582$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1773671$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2582$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2582$\
1773676$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2583$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2583$\
1773677$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1773649[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2582$$], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2582$$], \
-6.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2582$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2583$$]], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min2582$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2583$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2582$$ + 
                    0.012, CalculateUtilities`GraphicsUtilities`Private`\
max2583$$]], 6.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2582$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2583$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1773649]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1773649[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1773649[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkcrQ9gkJ1rExaUBJyvfeEiexcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPT0SQ9Hu9nr\
ppzAfB4mQLT8+MGYlZLgoevz/PJVGKCp7cwGf3jAmJ3icMfpDY+W4bcyDkDLQ7v8H3gUUFA02+\
asqopkRNDyXkGY1U7RlLemp+MmUiAkZ/khfD3d3tnZ2hg8FYxqA1kVxtt4XMMwmKJD0EumXMHgP+\
zR2flsdPBWMh+\
V4QHhH12HgnEmIDIzgwzMf71uvN1ANMTAOPQcZXTpOV56jtBUpLytMJmeX4xuVkDdsCg0yV4+\
Zhyc06Bbnw7+ADEdqYnMcmbc+WQL8wrhl9F2X1z7kb4PltW3gpzlYTh/\
m9Y8gbaHpK1DKdL1vXyTFSda2Nfs7VVc2XjQZ5+ZSp/\
5eOqdLLYbxqGwaZnZgar9beMvzrtvAix66fi/uRMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5XfIfo9KlghROYOMt+\
sf3xpAKvN4UQazfdgHR4PQMCkhPjii23+zSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5Qs1B10lH35o+\
JWcrnQZMj7EdckJXKt6O9ifaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqUqC7pWBzY0pz7J9EvC3xMeKqz5o7tObq82xazCcRZrbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DcxouJY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[E^(x/2)/4, {x, -36, 36}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2585$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2584$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2585$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1773762$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2584$\
1773763$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2585$1773764$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2585$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2584$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1773762$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min2584$\
1773763$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2585$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2585$\
1773764$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1773742[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$], 
                    (
                    Piecewise[{{
                    0. + 38.485618835389104` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    38.485618835389104` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$], \
-36.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2585$$]], 
                    (
                    Piecewise[{{
                    0. + 38.485618835389104` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    38.485618835389104` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2585$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$ + 
                    0.07200000000000001, 
                    CalculateUtilities`GraphicsUtilities`Private`max2585$$]], 
                    36.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2584$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2585$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1773742]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1773742[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1773742[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkbaB+\
gkJ1rExaUBJyvfeEiexcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPT0SQ9Hu9nrppzAfB4mQ\
LT8+MGYlZLgoevz/PJVGKCp7cwGf3jAmJ3icMfpDY+W4bcyDkDLQ7v8H3gUUFA02+\
asqopkRNDyXkGY1U7RlLemp+MmUiAkZ/khfbw+Hu8PWOg8FYxqA1kVzttoXMMwmKJD0EumXMHgP+\
zR2flsdPBWMh+\
V4QHhH12HgnEmIDIzgwzMf71uvN1ANMTAOPQcZXTpOV56jtBUpLytMJmeX4xuVkbbcFBpkqx83Dkpt\
1CnLh38EHIrQxOY9N2p4tgX5hXDP6Lsrqn3M3wPPbtvBSnK0mDvN7x5A30PSUqGU6X7auk2Ok6lob/\
Zyrq5ovGw3y8ilT/y8dU6WXw9hpGwaZnZgar9beMvyrtvAix66fi/uRMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5XfIfo9KlghROYOMt+\
sf3xpAKvN4UQazfdgHR4PQMCkhPjii23+zSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5Qs1B10lH35o+\
JWcrnQZMj7EdckJXKt6O9ifaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqUqC7pWBzY0pz7J9EvC3xMeKqz5o7tObq82xazCcRZrbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DUZCuJ4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form assuming x is real", "scanner" -> 
     "Simplification", "id" -> "AlternateFormAssumingAllVariablesAreReal", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ComplexExpand[E^(x/2)/4]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              SqrtBox[
               SuperscriptBox["\[ExponentialE]", "x"]], "4"], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[E^(x/2)/4 == 0, {x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "NoSolutionsFromReduce__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[D[(1/2) E^(x/2), x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[D[(1/2) E^(x/2), x], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"y", "\[Element]", 
                   TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\" : \"", 
                 RowBox[{"y", ">", "0"}], "\"}\""}, "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all positive real numbers\"", 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Injectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"injective \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"one\[Hyphen]to\[Hyphen]one\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Periodicity", "scanner" -> "FunctionProperties", "id" -> 
     "Periodicity", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"FunctionPeriod[D[(1/2) E^(x/2), x], x, Complexes]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"periodic in \"", "x", "\" with period \"", 
                  RowBox[{"4", " ", "\[ImaginaryI]", " ", "\[Pi]"}]}, 
                 "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
               DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Periodicity__Approximate form"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAt `1`x=0.", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[E^(x/2)/4, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["1", "4"], "+", 
                    FractionBox["x", "8"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "32"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "3"], "192"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "1536"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "5"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "4"], ",", 
                    FractionBox["1", "8"], ",", 
                    FractionBox["1", "32"], ",", 
                    FractionBox["1", "192"], ",", 
                    FractionBox["1", "1536"]}], "}"}], ",", "0", ",", "5", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[D[(1/2) E^(x/2), x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "4"], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "GlobalExtrema", "id" -> "Limit", 
     "position" -> "900", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Limit[E^(x/2)/4, x -> -Infinity]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 UnderscriptBox["lim", 
                  RowBox[{"x", "\[Rule]", 
                    RowBox[{"-", "\[Infinity]"}]}]], "\[ThinSpace]", 
                 FractionBox[
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"x", "/", "2"}]], "4"]}], HoldForm], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "1000", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[E^(x/2)/4, {x, -Infinity, 0}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "\[Infinity]"}], "0"], 
                 RowBox[{
                   FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "4"], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a half-period", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> 
     "DefiniteIntegralOverAHalfPeriod", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[E^(x/2)/4, {x, 0, (2 I) Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]"}]], 
                 RowBox[{
                   FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "4"], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              RowBox[{"-", "1"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1200", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.05549850524571683, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.05549850524571683, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, 
                 CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.05549850524571683, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.05549850524571683, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.05549850524571683, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.05549850524571683, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.05549850524571683, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.05549850524571683, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.05549850524571683, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.05549850524571683, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5435536$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$5435541$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$5435542$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$5435543$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$5435544$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$5435545$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$5435546$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$5435547$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$5435548$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$5435549$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
5435550$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
5435551$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$5435552$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$5435553$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.05549850524571683, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.05549850524571683, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.05549850524571683, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.05549850524571683, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.05549850524571683, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5435536$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$5435541$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$5435542$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$5435543$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$5435544$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$5435545$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$5435546$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$5435547$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$5435548$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$5435549$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
5435550$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
5435551$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
5435552$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$5435553$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 36./100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 18.], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 18.]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(Rational[1, 4] E^(Rational[1, 2] $CellContext`x)) == 0,
                     CalculateScan`PlotterScanner`Private`X1$ < \
$CellContext`x < CalculateScan`PlotterScanner`Private`X2$], $CellContext`x, 
                    Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    18.]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 18.],
                     "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 18.], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.0625, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0,
                     0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 
                    4, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 16] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.0625, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0,
                     0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 
                    4, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 16] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.0625, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0,
                     0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 
                    4, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 16] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], 1} ((1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.0625, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0,
                     0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 
                    4, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 16] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(Rational[1, 4] E^(Rational[1, 2] $CellContext`x)) == 
                    0, $CellContext`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[Rational[1, 4] E^(Rational[
                    1, 2] $CellContext`x), $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; 
                    CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 18.]}, CalculateScan`PlotterScanner`Private`oCurve = ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 18.], CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.25, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 4] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{0.125, {3, 0, 1}}, {0.5, {3, 0, 2}}}, {0, 0, 5, 0, 
                    0}, {{16, 2, 0, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {16, 1, 4,
                     3}, {1}}, 
                    
                    Function[{$CellContext`x}, Rational[1, 8] 
                    E^(Rational[1, 2] $CellContext`x)], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"x", "/", "2"}]], "4"], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.05549850524571683, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.05549850524571683, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.05549850524571683, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.05549850524571683, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.05549850524571683, ""}, 0, 1.5393804002589986`,
                     ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkdhWviHBOjYmDShJ+\
V4vuSQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/5iQiSfq/XUzeN+\
SBYnGzh6ZkxIzHLRcHj9+\
e5BKWo4MkNfHbPmBD0PjDyA2Lnu23MgZAzot35Db5PWFQwouGrpoxqCmp6KEme0UjVnrGkp+\
YnUyYiwuhPeDHc3RkOt187GIxlTLQGydVOW8g8k0RB0kOgW8bsMcK/\
uePT8vipYCyE7wXwCNRj451IEhsYwQnDfLxvvd5MPcDENOExkfGV02TlOWp7gdKS8nQCsxzfuJysV2\
2BiUyV4+Zhyc06Bbnw7+ADEdqYnMcmbc+WQL8wrhl9F2X1z7kb4PltW3gpzlYTh/\
m9Y8gb0fQU1DKdL1vXyTFSda2Nfs7VVc2XjQZ5+ZSp/5eOqdLLYWy3DQNmJ6bGq7W3DL/\
bFl7k2PVzcT8y5rNzlICrhkMluI8iLtg8imbKAyfR9umq3Dgcxv2K7xCdPhWscAITZ9kvtj+\
eVOD1phBi7aYbkA6vZ0AAORhXbLndpynVo4xIEhng+\
XX9sskmog7F4872tac8pmaAOULWLU9ojpKFuhMdZV/+qLiVXC40GfJ+xDWkINeK/\
i7WRxpyeTwRnpGEeEFTr94cVkmNifSW/aAECXPCKULSX+Zjv7mHi5VAqg4lqks6Fge2NOf+\
SfTLAh8DT3XW3LE9R5d322I2gTirVRfQJFmcNptjut9kunFDc6D7kuBbEv+\
B3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUaM/0q/AVJtuI4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1300", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "http://www5b.wolframalpha.com/api/v2/asyncPod.jsp?id=\
MSPa117351hd074d6ci20efb400004ba3c3fi9dg75b9a435888006500396608", 
     "asyncfailed" -> "data not found"}, {}], Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`n$$ = 1, 
                 CalculateScan`PlotterScanner`Private`P$$ = {
                  23.294528238757863`, 15.979638035417484`}, 
                 CalculateScan`PlotterScanner`Private`sf$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`iter$$], 3, 
                    "backward iterations"}, {1, 2, 3, 4}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`n$$], 1, 
                    "multivalued inverses"}, {1, 2, 3}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sf$$], False, 
                    "show frame"}, {True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[CalculateScan`PlotterScanner`Private`P$$], {
                    23.294528238757863`, 15.979638035417484`}}}}, 
                 Typeset`size$$ = Automatic, Typeset`update$$ = 0, 
                 Typeset`initDone$$ = False, Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2017249$$ = 
                 False, CalculateScan`PlotterScanner`Private`iter$2017254$$ = 
                 0, CalculateScan`PlotterScanner`Private`n$2017255$$ = 0, 
                 CalculateScan`PlotterScanner`Private`sf$2017256$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`n$$ = 1, 
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    23.294528238757863`, 15.979638035417484`}, 
                    CalculateScan`PlotterScanner`Private`sf$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2017249$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`iter$$, 
                    CalculateScan`PlotterScanner`Private`iter$2017254$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`n$$, 
                    CalculateScan`PlotterScanner`Private`n$2017255$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sf$$, 
                    CalculateScan`PlotterScanner`Private`sf$2017256$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Quiet[
                    Graphics[{
                    Dynamic[{
                    AbsolutePointSize[1.5], 
                    RGBColor[0.237, 0.34, 0.575], 
                    Point[
                    Map[{
                    Re[#], 
                    Im[#]}& , 
                    Cases[
                    Flatten[
                    NestList[Union[
                    Flatten[
                    Map[
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`n}, 
                    Table[
                    2 ((Complex[0, 2] CalculateScan`PlotterScanner`Private`C1)
                     Pi + Log[4 CalculateScan`PlotterScanner`Private`y]), {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}]][#, 
                    CalculateScan`PlotterScanner`Private`n$$]& , #]]]& , {
                    Dot[CalculateScan`PlotterScanner`Private`P$$, {1, I}]}, 
                    CalculateScan`PlotterScanner`Private`iter$$]], 
                    Blank[Complex]]]]}], {
                    Locator[
                    Dynamic[
                    CalculateScan`PlotterScanner`Private`P$$, (
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    Max[
                    Min[
                    Part[#, 1], 
                    
                    Part[{{-26.080505935854813`, 
                    40.92846901540524}, {-33.74807495472814, 
                    33.26089999653192}}, 1, 2]], 
                    
                    Part[{{-26.080505935854813`, 
                    40.92846901540524}, {-33.74807495472814, 
                    33.26089999653192}}, 1, 1]], 
                    Max[
                    Min[
                    Part[#, 2], 
                    
                    Part[{{-26.080505935854813`, 
                    40.92846901540524}, {-33.74807495472814, 
                    33.26089999653192}}, 2, 2]], 
                    
                    Part[{{-26.080505935854813`, 
                    40.92846901540524}, {-33.74807495472814, 
                    33.26089999653192}}, 2, 1]]})& ]]}}, 
                    PlotRange -> {{-27.843900013519555`, 
                    42.69186309306998}, {-35.51146903239288, 
                    35.02429407419666}}, ImageMargins -> 20, ImageSize -> 240, 
                    If[
                    CalculateScan`PlotterScanner`Private`sf$$, Frame -> True, 
                    Apply[Sequence, {}]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`iter$$, 3, 
                    "backward iterations"}, {1, 2, 3, 4}, ControlType -> 
                    SetterBar, ControlPlacement -> 1}, {{
                    CalculateScan`PlotterScanner`Private`n$$, 1, 
                    "multivalued inverses"}, {1, 2, 3}, ControlType -> 
                    SetterBar, ControlPlacement -> 2}, {{
                    CalculateScan`PlotterScanner`Private`sf$$, False, 
                    "show frame"}, {True, False}, ControlPlacement -> 3}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`P$$, {
                    23.294528238757863`, 15.979638035417484`}}, ControlType -> 
                    None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEeuQEB+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3k2fLH9arjz2sFgLGPQmkiudtpC5pkERZIeAt0w5h0D/\
s0dH5fHTwVjIfleEB4R9dB4JxJiAyM4MMzH+9arzdQ9TEwDj0HGl06Tleeo7QVKS8rTCZnl+\
MbFZG23BQaZKsfN/ZKbdQpy4d/CByK0MTmPTdqeLYF+YVwx+\
s7L6p9zN8Dz27bwUpyuJg7z22XIG2h6QtQync9b18kxUnWtjX7O1WXNl40GefGUqf+\
XjqjSy2EM24ZBZsemxqu1twz/si28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgN2Rrhe"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "14", "datatypes" -> 
    "D", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.455", 
    "parsetiming" -> "0.6960000000000001", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSPa117311hd074d6ci20efb400001f71i07439ffbfgf", "host" -> 
    "http://www5b.wolframalpha.com", "server" -> "44", "related" -> 
    "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa117321hd074d6ci20efb40000482ih9947bdab70h435888006500396608", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 16, 21, 26, 16.045969`8.957940894351804}, "Line" -> 
    149, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, Typeset`failedpods$$ = {13}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "derivative of (1/2)*E^(x/2)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {1467., 1474.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"3b94bf33-d5a2-47f5-b900-\
1bcb74900039"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Falso. ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]]}], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{
       RowBox[{"(", 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox["x", "2"]], ")"}], "'"}]}], "=", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox["x", "2"]], " ", 
       RowBox[{
        RowBox[{"(", 
         FractionBox["x", "2"], ")"}], "'"}]}], "=", 
      RowBox[{
       RowBox[{
        FractionBox["1", "2"], 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox["x", "2"]], 
        FractionBox["1", "2"]}], "=", 
       RowBox[{
        FractionBox[
         StyleBox[
          SuperscriptBox["\[ExponentialE]", 
           FractionBox["x", "2"]],
          FontSize->18], "4"], "\[NotEqual]", 
        SuperscriptBox["e", 
         FractionBox["x", "2"]]}]}]}]}]}], TraditionalForm]],
  FontSize->24,
  FontColor->GrayLevel[0.5],
  Background->None,ExpressionUUID->"01f15a96-eabb-4243-a5eb-c556cd883d0f"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"b18733c3-8740-434d-9dfe-16e48650e4d8"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sin", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"3", " ", "cos", " ", 
      FractionBox["x", "3"]}], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"ce9db6ce-66d1-4e59-b1c2-561ce2dd6c55"],
 "."
}], "SubitemNumbered",ExpressionUUID->"c6f746c9-d4ef-4fde-8c69-943a444fd79d"],

Cell[TextData[{
 StyleBox["Falso. ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"-", "cos"}], " ", 
     FractionBox["x", "3"]}]}], TraditionalForm]],
  FontSize->24,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "8bf3ceb6-c74c-418f-9a3f-5c1f20f4884c"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"0e2230d3-55a5-467d-8330-4b27a7f66eb4"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"cos", "(", 
       FractionBox["x", "3"], ")"}]}], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"02902446-3475-47e4-93b9-f330312eb031"],
 ". S\[OAcute] se for a chain rule..."
}], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"11035450-1985-4099-8e0c-0127d66eee81"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"\[Integral]", 
      RowBox[{"sen", " ", 
       FractionBox["x", "3"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}],
     FontColor->GrayLevel[0.5]], 
    StyleBox["=",
     FontColor->GrayLevel[0.5]], 
    RowBox[{
     StyleBox[
      RowBox[{
       RowBox[{
        RowBox[{
         FractionBox["x", "3"], " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"sen", " ", "x"}], ")"}], "'"}]}], "+", 
        RowBox[{"sen", " ", "x", " ", 
         RowBox[{
          RowBox[{"(", 
           FractionBox["x", "3"], ")"}], "'"}]}]}], "=", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          FractionBox["x", "3"], "cos", " ", "x"}], "+", 
         RowBox[{"sen", " ", "x", " ", 
          FractionBox["1", "3"], " ", "1"}]}], "=", 
        RowBox[{
         RowBox[{
          FractionBox[
           RowBox[{
            RowBox[{"x", " ", "cos", " ", "x"}], "+", 
            RowBox[{"sen", " ", "x"}]}], "3"], 
          StyleBox[".",
           FontSize->14], 
          StyleBox[" ",
           FontSize->14], 
          StyleBox["N\[ATilde]o",
           FontSize->14]}], 
         StyleBox[" ",
          FontSize->14], 
         StyleBox[
          RowBox[{"\[EAcute]", "."}],
          FontSize->14]}]}]}],
      FontColor->GrayLevel[0.5]], 
     StyleBox[" ",
      FontSize->14], 
     StyleBox["Estou",
      FontSize->14], 
     StyleBox[" ",
      FontSize->14], 
     StyleBox["viajando",
      FontSize->14]}]}], 
   StyleBox[",",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox[
    RowBox[{
    "usando", " ", "regra", " ", "de", " ", "deriva\[CCedilla]\[ATilde]o", 
     " ", "na", " ", 
     RowBox[{"integra\[CCedilla]\[ATilde]o", "."}]}],
    FontSize->14]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"7804cc7b-b31e-4bed-bd7d-3ee3df8767ed"]], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"9a491549-c409-455d-a7d0-76faae6a53a7"],

Cell[TextData[{
 StyleBox["\[CapitalEAcute] por substitui\[CCedilla]\[ATilde]o. Em ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{"sen", " ", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"f9713b2b-484e-4b05-bd01-9ea8ff8d658d"],
 StyleBox[", \n",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "x", ")"}], "=", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b04a06bc-edbb-4da2-892d-f6e67b965d18"],
 StyleBox[" e ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{"sen", " ", "x"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"817f67e0-0749-4833-be34-5875efea7661"],
 StyleBox[".\n",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"g", "(", "x", ")"}], ")"}], "=", 
    RowBox[{"sen", " ", 
     FractionBox["x", "3"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"e78cc65d-eb0d-422e-89d8-f7ae90c468e7"],
 StyleBox[". Est\[AAcute] errado. Isto \[EAcute] a regra da cadeia, mas \
devemos identificar o ",
  FontColor->GrayLevel[0.5]],
 StyleBox["resultado",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox[" de uma regra da cadeia. Que \[EAcute] ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "'"}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"g", "(", "x", ")"}], ")"}], "\[CenterDot]", 
     RowBox[{"g", "'"}]}], 
    RowBox[{"(", "x", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "2e90224e-b6ff-449d-8a1d-262d7d65045c"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"232f2eb2-30b6-47f3-acea-d54f71671ff3"],

Cell[TextData[{
 StyleBox["N\[ATilde]o \[EAcute] substitui\[CCedilla]\[ATilde]o. \
\[CapitalEAcute] \[OpenCurlyDoubleQuote]por diferencial\
\[CloseCurlyDoubleQuote] (por partes). ",
  FontColor->GrayLevel[0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"v", "\[CenterDot]", 
      RowBox[{"\[DifferentialD]", "u"}]}]}], "=", 
    RowBox[{"\[Integral]", 
     RowBox[{
      RowBox[{
       RowBox[{"g", "(", "x", ")"}], "\[CenterDot]", 
       RowBox[{"f", "'"}]}], 
      RowBox[{"(", "x", ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}]}]}], TraditionalForm]],
  FontSize->18,
  FontColor->GrayLevel[0.5],ExpressionUUID->
  "728d004e-31d4-450b-85db-eccea1300e35"],
 StyleBox[".",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"1e58e1b1-0d82-4451-9b3f-2f3ff00c65fd"],

Cell[TextData[{
 "N\[ATilde]o \[EAcute]. \[CapitalEAcute] por substitui\[CCedilla]\[ATilde]o, \
\[OpenCurlyDoubleQuote]com diferencial\[CloseCurlyDoubleQuote] (",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"6c8712ac-22ef-49fe-bfbc-7296e906f496"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[DifferentialD]", "u"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b146dcba-c12a-4258-a182-60c8ccd8ec5d"],
 ")."
}], "Text",ExpressionUUID->"152ab94d-ec99-41be-a5ac-23ca864b439f"],

Cell[TextData[{
 "Em ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sen", " ", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"84634859-2917-4076-85cb-b1933638d6fa"],
 ", procurar uma fun\[CCedilla]\[ATilde]o que multiplique sua derivada... \
Resolvido em ",
 StyleBox["Integra\[CCedilla]\[ATilde]o", "Input"],
 "."
}], "Text",ExpressionUUID->"2c4adf54-1456-40b2-9805-1e065974431f"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"u", "=", 
    FractionBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"1e8c94b8-0b18-4996-9fe4-e6a39edc093b"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[DifferentialD]", "u"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{"\[DifferentialD]", 
        FractionBox["x", "3"]}], 
       RowBox[{"\[DifferentialD]", "x"}]], 
      RowBox[{"\[DifferentialD]", "x"}]}], "=", 
     RowBox[{
      FractionBox["1", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"86b52ed1-1d87-4b58-9250-2d6fc425fd6a"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", 
      FractionBox["x", "3"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"3", " ", "sen", " ", "u", 
       RowBox[{"\[DifferentialD]", "u"}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"3", 
       RowBox[{"\[Integral]", 
        RowBox[{"sen", " ", "u", 
         RowBox[{"\[DifferentialD]", "u"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"3", "\[CenterDot]", 
          RowBox[{"-", "cos"}]}], " ", "u"}], "+", "C"}], "=", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "3"}], "\[CenterDot]", "cos"}], " ", 
          FractionBox["x", "3"]}], "+", "C"}], "\[NotEqual]", 
        RowBox[{
         RowBox[{
          RowBox[{"3", "\[CenterDot]", "cos"}], " ", 
          FractionBox["x", "3"]}], "+", 
         RowBox[{"C", "."}]}]}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"62049318-68c4-468c-a1d1-6895602fd049"]
}], "Text",ExpressionUUID->"e4bb1c93-95b7-4bbd-9433-9bf92b3918c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cos", "[", 
       FractionBox["x", "3"], "]"}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"3", " ", 
      RowBox[{"Cos", "[", 
       FractionBox["x", "3"], "]"}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Cos", "[", 
      FractionBox["x", "3"], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", 
      RowBox[{"Cos", "[", 
       FractionBox["x", "3"], "]"}]}], ",", "x"}], "]"}]}], "}"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"5b60e978-c786-4a88-999c-8932d9c745f4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"Sin", "[", 
     FractionBox["x", "3"], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", 
     FractionBox["x", "3"], "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "3"]}], " ", 
    RowBox[{"Sin", "[", 
     FractionBox["x", "3"], "]"}]}], ",", 
   RowBox[{"Sin", "[", 
    FractionBox["x", "3"], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"4a8e705f-8fd9-44c7-98a4-94df68203593"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integral of sen x/3 with respect to x", "WolframAlphaLong",
 CellLabel->"In[1]:=",ExpressionUUID->"4b393681-e82e-49db-81b2-e1dac6329db6"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integral of sen x/3 with respect to x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x/3], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"sin", "(", 
                    FractionBox["x", "3"], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"-", "3"}], " ", 
                    RowBox[{"cos", "(", 
                    FractionBox["x", "3"], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "0", 
     "async" -> 
     "http://www4d.wolframalpha.com/api/v2/asyncPod.jsp?id=\
MSPa39951h5259gag14df86g00004872ba1i937d08e21146275927865144044", 
     "asyncfailed" -> "data not found"}, {}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[-3 Cos[x/3]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["3", "2"]}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}], ")"}], "/", 
                    "3"}]}]]}]}], "-", 
                   RowBox[{
                    FractionBox["3", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}], ")"}], "/", 
                    "3"}]]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-3 Cos[x/3], {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "6"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "648"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "3"}], ",", "0", ",", 
                    FractionBox["1", "6"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "648"]}]}], "}"}], ",", "0", ",", "6", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {
    "title" -> "Definite integral over a half-period", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralOverAHalfPeriod", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x/3], {x, 0, 3 Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"3", " ", "\[Pi]"}]], 
                 RowBox[{
                   RowBox[{"sin", "(", 
                    FractionBox["x", "3"], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", "6"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralMeanSquare", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[Sin[x/3]^2/(6 Pi), {x, 0, 6 Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"6", " ", "\[Pi]"}]], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", 
                    FractionBox["x", "3"], ")"}], 
                    RowBox[{"6", " ", "\[Pi]"}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.1280000000000001", "parsetiming" -> "0.47800000000000004", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSPa39931h5259gag14df86g000068589cfh5ded2409", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "27", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa39941h5259gag14df86g000050bh9a59254a4ahh1146275927865144044", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 15, 10, 32, 57.6537857`9.513402663181695}, "Line" -> 
    1, "SessionID" -> 25150602635982339095}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6}, Typeset`failedpods$$ = {2}, Typeset`chosen$$ = {}, Typeset`open$$ =
    False, Typeset`newq$$ = "Integral of sen x/3 with respect to x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {225., 232.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"9ea55f68-e4ca-48f9-97b8-\
e0d790cde287"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       SuperscriptBox["x", "7"]}]}], " ", "-", 
     RowBox[{
      FractionBox["1", "3"], 
      SuperscriptBox["x", 
       FractionBox["1", "3"]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["x", "8"], "4"], "-", 
     FractionBox[
      SuperscriptBox["x", 
       FractionBox["4", "3"]], "4"], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"e768a3b2-4fb0-4d5b-ad34-831bdb6fe7d9"],
 "."
}], "SubitemNumbered",ExpressionUUID->"4fe30b17-d295-4784-84eb-ef9426846ee8"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"2", 
      SuperscriptBox["x", "7"]}]}], "-", 
    RowBox[{
     FractionBox["1", "3"], 
     SuperscriptBox["x", 
      FractionBox["1", "3"]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       SuperscriptBox["x", "7"]}]}], "-", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", "3"], 
       SuperscriptBox["x", 
        FractionBox["1", "3"]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"2", 
       RowBox[{"\[Integral]", 
        SuperscriptBox["x", "7"]}]}], "-", 
      RowBox[{
       FractionBox["1", "3"], 
       RowBox[{"\[Integral]", 
        RowBox[{
         SuperscriptBox["x", 
          FractionBox["1", "3"]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "8"], "8"]}], "-", 
       RowBox[{
        FractionBox["1", "3"], "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", 
          FractionBox["4", "3"]], 
         FractionBox["4", "3"]]}], "+", "C"}], "=", "\[IndentingNewLine]", 
      RowBox[{
       FractionBox[
        SuperscriptBox["x", "8"], "4"], "-", 
       FractionBox[
        SuperscriptBox["x", 
         FractionBox["4", "3"]], "4"], "+", 
       RowBox[{"C", 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"fe58dd65-9bc2-48ae-9c92-efa439bf2244"]], "Text",\
ExpressionUUID->"6498a802-7011-49ac-9da2-4080cde41c78"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      FractionBox["2", 
       RadicalBox["x", "3"]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["x", 
       FractionBox["2", "3"]], "3"], "+", "C"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"9c557cc9-8cf8-4b2c-b9f8-87a94c564f5e"],
 "."
}], "SubitemNumbered",ExpressionUUID->"2f5586da-f412-479c-833d-871040f48063"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      FractionBox["2", 
       RadicalBox["x", "3"]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       RowBox[{"2", "\[CenterDot]", 
        FractionBox["1", 
         SuperscriptBox["x", 
          FractionBox["1", "3"]]]}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"2", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["1", 
          SuperscriptBox["x", 
           FractionBox["1", "3"]]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"2", 
        RowBox[{"\[Integral]", 
         RowBox[{
          SuperscriptBox["x", 
           RowBox[{"-", 
            FractionBox["1", "3"]}]], 
          RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"2", "\[CenterDot]", 
          FractionBox[
           SuperscriptBox["x", 
            FractionBox["2", "3"]], 
           FractionBox["2", "3"]]}], "+", "C"}], "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"2", "\[CenterDot]", 
           SuperscriptBox["x", 
            FractionBox["2", "3"]], "\[CenterDot]", 
           FractionBox["3", "2"]}], "+", "C"}], "=", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"3", 
            SuperscriptBox["x", 
             FractionBox["2", "3"]]}], "+", "C"}], "\[NotEqual]", 
          RowBox[{
           FractionBox[
            SuperscriptBox["x", 
             FractionBox["2", "3"]], "3"], "+", 
           RowBox[{"C", 
            StyleBox[".",
             FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"e02afe1f-d8bf-4bd3-b62c-068e145cba85"],
 "."
}], "Text",ExpressionUUID->"12ee0428-3a39-48c8-b517-7bd647fd47da"],

Cell[CellGroupData[{

Cell[TextData[{
 "integral of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "/", 
    RadicalBox["x", "3"]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "e962bbf4-2e1b-4714-b8a8-7c59db0784cb"],
 " with respect to x"
}], "WolframAlphaLong",
 CellLabel->"In[3]:=",ExpressionUUID->"a9ed221c-ca90-4e11-88db-7fe9086473fd"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "integral of 2/Power[x, (3)^-1] with respect to x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[2/x^3^(-1), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox["2", 
                    RadicalBox["x", "3"]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"3", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", "/", "3"}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["2", 
                    RadicalBox["x", "3"]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Factor \"", "\"out \"", "\"constants:\""},
                     "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"2", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RadicalBox["x", "3"]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RadicalBox["x", "3"]], "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", "/", "3"}]]}], "2"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", "/", "3"}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[3 x^(2/3), {x, -0.69, 0.69}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max15936$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min15935$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5810421$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min15935$\
5810426$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max15936$\
5810427$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max15936$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min15935$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5810421$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15935$\
5810426$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max15936$\
5810427$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399[
                    Plot[{
                    Re[3 $CellContext`x^Rational[2, 3]], 
                    Im[3 $CellContext`x^Rational[2, 3]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][3 $CellContext`x^Rational[2, 3], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], 
                    (
                    Piecewise[{{
                    0. + 0.74120451090379 Tan[1.5040801783846716` #], # < 0}},
                     0. + 0.74120451090379 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], \
-0.6933333333333332], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$]], 
                    (
                    Piecewise[{{
                    0. + 0.74120451090379 Tan[1.5040801783846716` #], # < 0}},
                     0. + 0.74120451090379 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$ + 
                    0.0013866666666666665`, 
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$]],
                     0.6933333333333332]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min15935$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max15936$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810399[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMKAyJL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozkvNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoT48+\
v8H3Ck4ITA18N48ww0NM9RfIZS3TtGSt2ZH8y5TIhnP2Exy9eDp/uDIceBmMZE2NACf28LWQ+\
U0RD2kOgK9a85UR888cH5fFTwXkM3wsQCeh71jtRhFoYKQjHfIJvvdhM3cbEDBGUKHruNDl5jtpeoI\
1iIpvAPMc3ziZr2BaYqEx7bu6U3GxSkA//Oj6QsYvJe1zS7uwIDAvjgtF3Wlb/nLsBnl+\
3hVfyeD1xmN8bjrwRw45Ar9L5pHWdPCNV17roF1yd13zZapBnT5n6f+\
mAabMaxrO2YcD80NZ4vfZW4Xfawsscu34h7rvWfPaOEnDdcKgE91HSgi+\
iaKY88BJtn67OrcNj3Kr4jtEZUsEKJ7Jxlv3i+uN+BV5vCjHWbroF6Yh6BkSQg3VRx+\
0uy5gZzYgiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUKzny7VnZhk9uWPilvJ5VSTIe/\
7wkAGaqPob2B9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRStadQXcqzOHClOQlPol8W+ABEZmbNHTtwdAW3LWYTyeNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/QbkFS4Pg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[3 x^(2/3), {x, -4.9, 4.9}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max15938$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min15937$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5810512$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min15937$\
5810513$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max15938$\
5810514$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max15938$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min15937$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5810512$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15937$\
5810513$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max15938$\
5810514$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492[
                    Plot[{
                    Re[3 $CellContext`x^Rational[2, 3]], 
                    Im[3 $CellContext`x^Rational[2, 3]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][3 $CellContext`x^Rational[2, 3], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], 
                    (
                    Piecewise[{{
                    0. + 5.18843157632653 Tan[1.5040801783846716` #], # < 0}},
                     0. + 5.18843157632653 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], \
-4.853333333333333], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$]], 
                    (
                    Piecewise[{{
                    0. + 5.18843157632653 Tan[1.5040801783846716` #], # < 0}},
                     0. + 5.18843157632653 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$ + 
                    0.009706666666666666, 
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$]],
                     4.853333333333333]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min15937$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max15938$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[CalculateUtilities`GraphicsUtilities`Private`lines, 
                    Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5810492[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === L\
ength[CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtsEkviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn+6+3N7a3drxMBjLCIyhSujnbSHzTIGmaQ+\
BrlnzloP45o+PyuOngvOYfi+oSKh+YL1jBcTCSAEc8wm+\
9XIzdRcTMyAIKHLhNDl5DtteoI1iYjqmsxzfOJ+s7bbAoKbac3Ov5Gadgnz4N/\
GBjF1M3uOSdmdHYFgYl4y+s7L659wN8Py6LbySJ6uJw/zecOQNDDumepnOZ63r5BmputZFP+\
fqoubLRoM8f8rU/0uHTJvlMHbahkFnR7bGq7W3DP+\
iLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AQouuEY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.1380000000000001", "parsetiming" -> "0.642", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa95414f26hdgeg0c95ga0000541ib3fiid5fi1f6", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "30", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa95514f26hdgeg0c95ga0000508780ca2c5dc9af4363898531936319487", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 19, 0, 6.7466439`8.581662760711097}, "Line" -> 3, 
    "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "integral of 2/Power[x, (3)^-1] with respect to x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {452., 459.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"7ad1327b-d985-4332-adc0-\
0bddfe2fb675"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", "x", " ", "cos", " ", "x", " ", 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox["sen", "2"], " ", "x"}], "2"], "+", "C"}]}], 
   TraditionalForm]],
  FontSize->24,ExpressionUUID->"5cd78637-8626-481a-9f9e-385b7723ccca"],
 "."
}], "SubitemNumbered",ExpressionUUID->"5d0a10ea-870f-43f2-8345-1b62196bb28e"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"u", "=", 
     RowBox[{"sen", " ", "x"}]}], ",", " ", 
    RowBox[{
     RowBox[{"\[DifferentialD]", "u"}], "=", 
     RowBox[{"cos", " ", "x", 
      RowBox[{"\[DifferentialD]", "x"}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"3a6a754c-d702-4486-8ff6-095aed42f9b8"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"sen", " ", "x", " ", "cos", " ", "x", 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"u", 
       RowBox[{"\[DifferentialD]", "u"}]}]}], "=", 
     RowBox[{
      RowBox[{
       FractionBox[
        SuperscriptBox["u", "2"], "2"], "+", "C"}], "=", 
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox["sen", "2"], "x"}], "2"], "+", "C"}]}]}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"dfbd6636-e375-4d82-921a-19dfb5082edb"],
 "."
}], "Text",ExpressionUUID->"0887d663-99d2-4d06-b6fd-e68487ebb8fb"],

Cell[TextData[{
 StyleBox["A integral de ",
  Background->RGBColor[0.87, 0.94, 1]],
 Cell[BoxData[
  FormBox[
   RowBox[{"u", 
    RowBox[{"\[DifferentialD]", "u"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  Background->RGBColor[0.87, 0.94, 1],ExpressionUUID->
  "a43a4bd8-f13e-44f9-bbdf-40f533f2fbb5"],
 StyleBox[" n\[ATilde]o \[EAcute] ",
  Background->RGBColor[0.87, 0.94, 1]],
 Cell[BoxData[
  FormBox["u", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  Background->RGBColor[0.87, 0.94, 1],ExpressionUUID->
  "c8fc7c39-c9f7-4682-8854-d39fa661059c"],
 StyleBox[". \[CapitalEAcute] ",
  Background->RGBColor[0.87, 0.94, 1]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      SuperscriptBox["u", "n"], 
      RowBox[{"\[DifferentialD]", "u"}]}]}], "=", 
    FractionBox[
     SuperscriptBox["u", 
      RowBox[{"n", "+", "1"}]], 
     RowBox[{"n", "+", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,
  Background->RGBColor[0.87, 0.94, 1],ExpressionUUID->
  "bd69e377-aab8-4aea-b298-547030c2a64c"],
 StyleBox[".",
  Background->RGBColor[0.87, 0.94, 1]]
}], "Text",ExpressionUUID->"e8333cc7-71ee-4842-bb2e-d271de325a2e"],

Cell[TextData[{
 "N\[ATilde]o concordo com o Alpha abaixo. Porqu\[EHat] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"u", "=", 
    RowBox[{"cos", " ", "x"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"9ed1b6ae-4990-434f-9a99-48bab76fc7c8"],
 " e n\[ATilde]o ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sen", " ", "x"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"23ad0fe9-f70c-4ac3-bc67-a7c5611849a9"],
 "?"
}], "Text",ExpressionUUID->"94e751f7-165b-48fc-bfe8-92baf6ebac9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], " ", 
   RowBox[{"Cos", "[", "x", "]"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"ea20b09c-9d03-4798-a290-6619c0c42d51"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", "2"]}], " ", 
  SuperscriptBox[
   RowBox[{"Cos", "[", "x", "]"}], "2"]}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"0875b676-7795-449b-8bce-c209f0594059"]
}, Open  ]],

Cell[CellGroupData[{

Cell["integral of sen(x)*cos(x) with respect to x", "WolframAlphaLong",
 CellLabel->"In[5]:=",ExpressionUUID->"69b9f31a-fd60-454d-a53d-7f3dfe9d1eb1"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "integral of sen(x)*cos(x) with respect to x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x] Cos[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\" \""}, "RowDefault"],
                     "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    RowBox[{"-", 
                    RowBox[{"sin", "(", "x", ")"}]}]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{"u", 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{"u", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FractionBox[
                    SuperscriptBox["u", "2"], "2"], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox["u", "2"], "2"]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"cos", "(", "x", ")"}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-Cos[x]^2/2, {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4176$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4175$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1956957$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4175$\
1956962$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4176$1956963$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4176$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4175$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1956957$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4175$\
1956962$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4176$\
1956963$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[-1, 2] Cos[$CellContext`x]^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, 
                    PlotRange -> {0.005, -0.505}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4175$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4176$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1956935[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNBigfUACOhiTBpSkfK8XXxoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJnLNG1Z6TYkf3JhMuEcPYTHm/tPH+xs/\
3Sw2AsI2IMKKGftYXMM0U0pD0EumLNW07EN398UB4/FZzH8L0AkYC+\
Z71jRaiFkYJwzCf41ovN1G1MzBBBiaLnTpOT57DtBdooJqZjmOX4xtlkbbUFJmqqPTd3Sm7WKciHfx\
0fyNjF5D0uaXd2BIaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+\
bDTIs6dM/b90wLRZDuNp2zBgdmhrvFp7y/DbbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l02ZGWZEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5Mkn35o+JWcjnVZMj7vjAwBbVW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DY7JuOY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-Cos[x]^2/2, {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4178$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4177$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1957048$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4177$\
1957049$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4178$1957050$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4178$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4177$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1957048$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4177$\
1957049$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4178$\
1957050$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[-1, 2] Cos[$CellContext`x]^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {0.005, -0.505}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4177$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4178$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1957028[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMGAMBH5CADsakASUp3+\
vFl9TCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z04kFHa7/V6+\
qI1HySn6RU83bdmKGe5LAR9d5wr0JpJkV7AZ9eticHsACc/\
gHrfZWveSzUjxp9f4fuEJwUnBr4axplhoCe7iuRTlujaM1Ls0P5kwmVCOPsJD7dePnv+\
ePuFh8FYRsQYUEJvt4XMp4poSHsIdMmat5yIb/54rzx+KjiP4XsBIgF9x3rHilALIwXhmE/\
wreebqZuYmCGCEkXPnCYnz2HbC7RRTGRjmOX4xulkbbUFJirTnptbJTfrFOTDv4oPZOxi8h6XtDs7A\
sPCOGf0nZTVP+dugOfXbeGVPFpNHOb3hiNvxLBD0Mt0PmpdJ89I1bUu+jlXZzVfNhrk6VOm/l/\
aZ9osh/GkbRgwO7A1Xq29ZfinbeFljl0/F/\
dtaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5UfMfoDKlghRPZOMt+\
cf1xtwKvN4UYazfZgHREPQMiyMG6qON2h2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2UsX6k5MMv3yR8Wt5HKiyZD3PWEgA7VW9NewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpVqC7lWRy40hyHJ9EvC7wPIjPT5o4dOLqC2xazieRRrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6Db/1uKY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigReduce[-Cos[x]^2/2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   FractionBox["1", "4"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}]}], "-", "1"}], ")"}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[-Cos[x]^2/2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "x"}]]}]}],
                    "-", 
                   RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "x"}]]}], "-", 
                   RowBox[{
                    FractionBox["1", "4"]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-Cos[x]^2/2, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "2"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "6"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "5"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0", ",", 
                    FractionBox["1", "2"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "6"]}]}], "}"}], ",", "0", ",", "5", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a half-period", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralOverAHalfPeriod", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[x] Sin[x], {x, 0, Pi/2}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["\[Pi]", "2"]], 
                 RowBox[{
                   RowBox[{
                    RowBox[{"cos", "(", "x", ")"}], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralMeanSquare", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[(Cos[x]^2 Sin[x]^2)/Pi, {x, 0, Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}]}], "\[Pi]"], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "8"], Identity], "\[LongEqual]", 
              TagBox["0.125`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.8880000000000001", "parsetiming" -> "0.855", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa27951c898h120ce1ih3000001ch98728c54a9hbi", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "41", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa27961c898h120ce1ih3000005g757bd3f391f0081770361261367161273", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 19, 18, 41.7634193`9.373370925810365}, "Line" -> 
    5, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "integral of sen(x)*cos(x) with respect to x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {709., 716.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"7684dbce-54c6-4a60-a1f7-\
ba5fc0e2d529"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calcule as integrais.", "ItemNumbered",ExpressionUUID->"95e34129-4a89-49a7-90aa-802286cebc82"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"4", 
        SuperscriptBox["x", "3"]}], "-", 
       RowBox[{"6", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"10", "x"}], "+", "2"}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"603e1cb7-f777-4ff3-adc7-3eb7cf42d48e"],
 "."
}], "SubitemNumbered",ExpressionUUID->"47aa9785-5318-4711-beb3-d69da05fe754"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"4", 
      SuperscriptBox["x", "3"]}]}], "-", 
    RowBox[{"6", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"10", "x"}], "+", 
    RowBox[{"2", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"4", 
       SuperscriptBox["x", "3"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "-", 
     RowBox[{"\[Integral]", 
      RowBox[{"6", 
       SuperscriptBox["x", "2"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"10", "x", 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"4", 
       RowBox[{"\[Integral]", 
        RowBox[{
         SuperscriptBox["x", "3"], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
      RowBox[{"6", 
       RowBox[{"\[Integral]", 
        RowBox[{
         SuperscriptBox["x", "2"], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
      RowBox[{"10", 
       RowBox[{"\[Integral]", 
        RowBox[{"x", 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
      RowBox[{"2", "x"}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"4", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "4"], "4"]}], "-", 
       RowBox[{"6", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "3"], "3"]}], "+", 
       RowBox[{"10", "\[CenterDot]", 
        FractionBox[
         SuperscriptBox["x", "2"], "2"]}], "+", 
       RowBox[{"2", "x"}], "+", "C"}], "=", "\[IndentingNewLine]", 
      RowBox[{
       SuperscriptBox["x", "4"], "-", 
       RowBox[{"2", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"5", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"2", "x"}], "+", 
       RowBox[{"C", 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"e0a5074b-7851-456a-8139-49bbc8ba2f9f"]], "Text",\
ExpressionUUID->"c5888815-9886-4453-ae17-9778430b5d0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"4", 
      SuperscriptBox["x", "3"]}], "-", 
     RowBox[{"6", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"10", "x"}], "+", "2"}], ")"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"6e17b4e1-c17f-43b4-85de-dbc76bfed323"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "x"}], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["x", "2"]}], "-", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "3"]}], "+", 
  SuperscriptBox["x", "4"]}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"df4a7c56-2f4b-45cc-851d-0d5ddc31abf7"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       FractionBox["1", "x"], "+", 
       FractionBox["1", 
        SuperscriptBox["x", "2"]]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"fdfdc288-7387-4caf-ac8f-6d1e4d33701f"],
 "."
}], "SubitemNumbered",ExpressionUUID->"5689158e-d0af-484c-b135-9e811571df4c"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     SuperscriptBox["x", "2"]}], "+", 
    FractionBox["1", "x"], "+", 
    RowBox[{
     FractionBox["1", 
      SuperscriptBox["x", "2"]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       SuperscriptBox["x", "2"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", "x"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", 
        SuperscriptBox["x", "2"]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      FractionBox[
       SuperscriptBox["x", "3"], "3"], "+", 
      RowBox[{"ln", 
       RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+", 
      "C", "+", 
      RowBox[{"\[Integral]", 
       RowBox[{
        SuperscriptBox["x", 
         RowBox[{"-", "2"}]], 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       FractionBox[
        SuperscriptBox["x", "3"], "3"], "+", 
       RowBox[{"ln", 
        RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+", 
       FractionBox[
        SuperscriptBox["x", 
         RowBox[{"-", "1"}]], 
        RowBox[{"-", "1"}]], "+", "C"}], "=", "\[IndentingNewLine]", 
      RowBox[{
       FractionBox[
        SuperscriptBox["x", "3"], "3"], "+", 
       RowBox[{"ln", 
        RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "-", 
       FractionBox["1", "x"], "+", 
       RowBox[{"C", 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"5e36d6d3-5542-4c0a-a0e8-f2cca3eaca42"]], "Text",\
ExpressionUUID->"26b34f26-eaa0-4d1d-ab43-fe4b81602bc5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   SuperscriptBox["x", 
    RowBox[{"-", "1"}]], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"326ae6cb-9fa9-437f-bb51-2f366ef0fe5e"],

Cell[BoxData[
 RowBox[{"Log", "[", "x", "]"}]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"970a4a9d-6c20-404e-979b-33860b6814c5"]
}, Open  ]],

Cell[TextData[{
 "Cai no ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     FractionBox[
      RowBox[{"\[DifferentialD]", "x"}], "x"]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["1", "x"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
     RowBox[{
      RowBox[{"ln", 
       RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], "+", 
      "C"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"f9b1a418-991f-4744-b906-44ec1a7b2d59"],
 "."
}], "Text",ExpressionUUID->"5e31ed44-25c9-49b7-868d-459850a1363a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     FractionBox["1", "x"], "+", 
     FractionBox["1", 
      SuperscriptBox["x", "2"]]}], ")"}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"1320fccd-02e7-410f-a8ad-9910b7833674"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", "x"]}], "+", 
  FractionBox[
   SuperscriptBox["x", "3"], "3"], "+", 
  RowBox[{"Log", "[", "x", "]"}]}]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"94abe28e-b2b4-4245-9ce5-5d0c6a0602c7"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    FractionBox[
     RowBox[{"x", " ", 
      RowBox[{"\[DifferentialD]", "x"}]}], 
     RadicalBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", "1"}], "3"]]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"e4aab273-0e46-4ab5-ba7e-cba278ea365a"],
 "."
}], "SubitemNumbered",ExpressionUUID->"ae318266-bcf0-431c-addb-b9e0520a620f"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"\[Integral]", 
    FractionBox[
     RowBox[{"x", 
      RowBox[{"\[DifferentialD]", "x"}]}], 
     RadicalBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", "1"}], "3"]]}], "=", 
   RowBox[{"\[Integral]", 
    RowBox[{
     FractionBox["x", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["x", "2"], "+", "1"}], ")"}], 
       FractionBox["1", "3"]]], 
     RowBox[{
      RowBox[{"\[DifferentialD]", "x"}], 
      StyleBox[".",
       FontSize->14]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"1a560a0a-bd77-468c-bcbe-c9d4ee1248fd"]], "Text",\
ExpressionUUID->"e6ebf761-470c-4756-825d-a74b447e1ca6"],

Cell[TextData[StyleBox["O denominador n\[ATilde]o \[EAcute] um \
polin\[OHat]mio. N\[ATilde]o \[EAcute] por fra\[CCedilla]\[OTilde]es \
parciais.",
 FontColor->GrayLevel[0]]], "Text",ExpressionUUID->"2a813ab6-89ca-4204-a432-\
3c5b88646eb4"],

Cell["\[CapitalEAcute] o seguinte...", "Text",ExpressionUUID->"628d27cf-bbf5-4b78-bcbf-9a1a262ee12d"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     FractionBox[
      RowBox[{"x", 
       RowBox[{"\[DifferentialD]", "x"}]}], 
      RadicalBox[
       RowBox[{
        SuperscriptBox["x", "2"], "+", "1"}], "3"]]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox["x", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["x", "2"], "+", "1"}], ")"}], 
         FractionBox["1", "3"]]], 
       RowBox[{
        RowBox[{"\[DifferentialD]", "x"}], 
        StyleBox[".",
         FontSize->14], 
        StyleBox["\[IndentingNewLine]",
         FontSize->14], "u"}]}]}], "=", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", "1"}]}]}], 
   StyleBox[",",
    FontSize->14], 
   RowBox[{
    RowBox[{"\[DifferentialD]", "u"}], "=", 
    RowBox[{
     RowBox[{"2", "x", 
      RowBox[{
       RowBox[{"\[DifferentialD]", "x"}], 
       StyleBox[".",
        FontSize->14], 
       StyleBox["\[IndentingNewLine]",
        FontSize->14], 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["x", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["x", "2"], "+", "1"}], ")"}], 
           FractionBox["1", "3"]]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{
        RowBox[{
         FractionBox["1", 
          SuperscriptBox["u", 
           FractionBox["1", "3"]]], "\[CenterDot]", "x"}], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
      RowBox[{
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox[
          SuperscriptBox["u", 
           RowBox[{"-", 
            FractionBox["1", "3"]}]], "2"], 
         RowBox[{"\[DifferentialD]", "u"}]}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], 
         RowBox[{"\[Integral]", 
          RowBox[{
           SuperscriptBox["u", 
            RowBox[{"-", 
             FractionBox["1", "3"]}]], 
           RowBox[{"\[DifferentialD]", "u"}]}]}]}], "=", 
        RowBox[{
         RowBox[{
          RowBox[{
           FractionBox["1", "2"], "\[CenterDot]", 
           FractionBox[
            SuperscriptBox["u", 
             FractionBox["2", "3"]], 
            FractionBox["2", "3"]]}], "+", "C"}], "=", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox["1", "2"], "\[CenterDot]", 
            FractionBox[
             RowBox[{"3", 
              SuperscriptBox["u", 
               FractionBox["2", "3"]]}], "2"]}], "+", "C"}], "=", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"3", 
              SuperscriptBox["u", 
               FractionBox["2", "3"]]}], "4"], "+", "C"}], "=", 
           RowBox[{
            FractionBox[
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"3", 
                 SuperscriptBox["x", "2"]}], "+", "3"}], ")"}], 
              FractionBox["2", "3"]], "4"], "+", 
            RowBox[{"C", 
             StyleBox[".",
              FontSize->14]}]}]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"ea1c0914-e441-49db-a71f-dcf5c6b7ab10"]], "Text",\
ExpressionUUID->"a1cbe1c7-dac0-4c24-ae60-a1cd102da65c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Expand", "@", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"a", "+", "b"}], ")"}], "2"]}], ",", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"Expand", "@", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", "b"}], ")"}]}], ")"}], 
    FractionBox["1", "3"]], ",", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RadicalBox[
       RowBox[{
        SuperscriptBox["x", "2"], "+", "1"}], "3"], "\[Equal]", "0"}], ",", 
     "x"}], "]"}], ",", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"Simplify", "@", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", "1"}], ")"}]}], ")"}], 
    FractionBox["1", "3"]]}], "}"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"5f8e8f29-2bb8-4f87-919f-1c9022180b61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SuperscriptBox["a", "2"], "+", 
    RowBox[{"2", " ", "a", " ", "b"}], "+", 
    SuperscriptBox["b", "2"]}], ",", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["a", "2"], "+", "b"}], ")"}], 
    RowBox[{"1", "/", "3"}]], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", "\[Rule]", 
       RowBox[{"-", "\[ImaginaryI]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", "\[Rule]", "\[ImaginaryI]"}], "}"}]}], "}"}], ",", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["x", "2"]}], ")"}], 
    RowBox[{"1", "/", "3"}]]}], "}"}]], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"9a373959-42b2-443e-b5f8-bd0bb9823b32"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "integral of ",
 Cell[BoxData[
  FormBox[
   FractionBox["x", 
    RadicalBox[
     RowBox[{
      SuperscriptBox["x", "2"], "+", "1"}], "3"]], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "6f2f5b53-36d2-4f03-894a-dcc5f013da87"],
 "with respect to x"
}], "WolframAlphaLong",
 CellLabel->"In[13]:=",ExpressionUUID->"d321fc46-6d75-4989-b4c3-9f21ae46909c"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "integral of x/Power[x^2 + 1, (3)^-1]with respect to x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[x/(x^2 + 1)^3^(-1), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox["x", 
                    RadicalBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}], "3"]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["3", "4"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["x", 
                    RadicalBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}], "3"]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    FractionBox["x", 
                    RadicalBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}], "3"]], "\",\"", 
                    "\" \""}, "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}]}], "\" \""}, 
                    "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    RowBox[{"2", " ", "x"}]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RadicalBox["u", "3"]], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    FractionBox["1", 
                    RadicalBox["u", "3"]], "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"2", "/", "3"}]]}], "2"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"2", "/", "3"}]]}], "4"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["3", "4"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(3 (1 + x^2)^(2/3))/4, {x, -1.3, 1.3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7593$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min7592$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7593$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2904099$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7592$\
2904104$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7593$2904105$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7593$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min7592$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2904099$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7592$\
2904104$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7593$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7593$\
2904105$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2904077[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[3, 4] (1 + $CellContext`x^2)^
                    Rational[2, 3], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$], 
                    (
                    Piecewise[{{
                    0. + 1.3588749366569488` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.3588749366569488` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$], \
-1.2711111111111113`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7593$$]], 
                    (
                    Piecewise[{{
                    0. + 1.3588749366569488` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.3588749366569488` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7593$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$ + 
                    0.0025422222222222226`, 
                    CalculateUtilities`GraphicsUtilities`Private`max7593$$]], 
                    1.2711111111111113`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7592$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7593$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 
                    All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2904077]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2904077[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2904077[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbim/f8N/\
gMQzGmMP7AEJ6GBMGlCS8t5b7DQWrh1sZxv88+Czm6RZu0oxHaApfTjVl+bz3XffXe/JkYzSfq/\
X01et+SA5SW/\
g6bE1QznLZSHIu9NcUa2ZFOkVfHbbmpiaPcrhByXed92a91LNwPjzK3wfeFJwMPSrYZwZRvVkX0Ges\
UTXnpFix/YnEy4T4Ownfbq9u7Wz9XLXw2AsIzCGKqFftIXMMwWapj0EumbNWw7imz8+Ko+fCs5j+\
r2gIqH6gfWOFRALIwVwzCf41svN1F1MzIAgoMiF0+\
TkOWx7gTaKiemYznJ843yynrcFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7AsPCuGT0nZXVP+\
dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh7HdNgw6O7I1Xq29ZfidtvAyx66fi/u+NZ+9owRcNRwqwX2UpODzKJopD7xE26erc+\
vwGHcqvmN0hlSwwolsnGW/\
uP54WIHXm0KMtZtsQDqingERzal1EcftHpsyM8xAQWKB59f1yyYbyzqUgDvb154JwuwA84SsW57QHK\
QLdQeTZF/+qLiVXM40GfJ+IAydUrVW9LewPsqSK8hYBkYS4wVNvQZzWCU1AhUs+0EJEucgGEKyX/\
bjvvmHi5VAqvYVqkt5FgeuNKfhSfTLAh9SMTVZc8cOHF3BbYvZRPKkVl3E0nRx2myO6X6T6cYNzYEe\
SkJoScIHercpdJvCX90Ulvbgbk3o1oRuTejWhG5N+H/XBBcx/iv9BkWiuJ4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(3 (1 + x^2)^(2/3))/4, {x, -8.9, 8.9}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7595$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min7594$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7595$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2904190$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7594$\
2904191$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7595$2904192$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7595$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min7594$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2904190$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7594$\
2904191$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7595$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7595$\
2904192$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2904170[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[3, 4] (1 + $CellContext`x^2)^
                    Rational[2, 3], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$], 
                    (
                    Piecewise[{{
                    0. + 9.512124556598643 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    9.512124556598643 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$], \
-8.89777777777778], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7595$$]], 
                    (
                    Piecewise[{{
                    0. + 9.512124556598643 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 9.512124556598643 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7595$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$ + 
                    0.01779555555555556, 
                    CalculateUtilities`GraphicsUtilities`Private`max7595$$]], 
                    8.89777777777778]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7594$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7595$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2904170]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2904170[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2904170[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbim/f8N/\
gMQz2sYe4AEJ6GBMGlCS8t5b7DQWrh1sZxv88+Czm6RZu0oxHaApfTjVl+bz3XffXe/JkYzSfq/\
X01et+SA5SW/\
g6bE1QznLZSHIu9NcUa2ZFOkVfHbbmpiaPcrhByXed92a91LNwPjzK3wfeFJwMPSrYZwZRvVkX0Ges\
UTXnpFix/YnEy4T4Ownfbrzcmt3+8WWh8FYRmAMVUI/bwuZZwo0TXsIdM2atxzEN398VB4/\
FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbcFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh7HTNgw6O7I1Xq29ZfjdtvAyx66fi/u+NZ+9owRcNRwqwX2UpODzKJopD7xE26erc+\
vwGHcqvmN0hlSwwolsnGW/\
uP54WIHXm0KMtZtsQDqingERzal1EcftHpsyM8xAQWKB59f1yyYbyzqUgDvb154JwuwA84SsW57QHK\
QLdQeTZF/+qLiVXM40GfJ+IAydUrVW9LewPsqSK8hYBkYS4wVNvQZzWCU1AhUs+0EJEucgGEKyX/\
bjvvmHi5VAqvYVqkt5FgeuNKfhSfTLAh9SMTVZc8cOHF3BbYvZRPKkVl3E0nRx2myO6X6T6cYNzYEe\
SkJoScIHercpdJvCX90Ulvbgbk3o1oRuTejWhG5N+H/XBBcx/iv9BndeuF4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[(3 (1 + x^2)^(2/3))/4, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["3", "4"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "2"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "12"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "5"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["3", "4"], ",", "0", ",", 
                    FractionBox["1", "2"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "12"]}]}], "}"}], ",", "0", ",", "5", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=-i", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0. - 1.I", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(3 (1 + x^2)^(2/3))/4, {x, -I, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2", " ", 
                    RadicalBox["2", "3"]}]], "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    RadicalBox["2", "3"]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "2"]}], 
                    RowBox[{"24", " ", 
                    RadicalBox["2", "3"]}]], "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "3"]}], 
                    RowBox[{"108", " ", 
                    RadicalBox["2", "3"]}]], "-", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "4"]}], 
                    RowBox[{"2592", " ", 
                    RadicalBox["2", "3"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "5"], ")"}], 
                    SeriesData[$CellContext`x, 
                    Complex[0, -1], {}, 0, 5, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", "\[ImaginaryI]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]], ",", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]], ",", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], 
                    RowBox[{"24", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"108", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]]}], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2592", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]]}]}], "}"}], ",", "0", ",", 
                    "5", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=i", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0. + 1.I", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[(3 (1 + x^2)^(2/3))/4, {x, I, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2", " ", 
                    RadicalBox["2", "3"]}]], "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    RadicalBox["2", "3"]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "2"]}], 
                    RowBox[{"24", " ", 
                    RadicalBox["2", "3"]}]], "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "3"]}], 
                    RowBox[{"108", " ", 
                    RadicalBox["2", "3"]}]], "-", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "4"]}], 
                    RowBox[{"2592", " ", 
                    RadicalBox["2", "3"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "5"], ")"}], 
                    SeriesData[$CellContext`x, 
                    Complex[0, 1], {}, 0, 5, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[ImaginaryI]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]]}], ",", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]], 
                    RowBox[{"24", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]], ",", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"108", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], 
                    RowBox[{"2592", " ", 
                    SuperscriptBox["2", 
                    RowBox[{"1", "/", "3"}]]}]]}]}], "}"}], ",", "0", ",", 
                    "5", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=\[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAt `1`x=Infinity", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(3 (1 + x^2)^(2/3))/4, {x, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"4", "/", "3"}]]}], "4"], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], "-", 
                    RowBox[{
                    FractionBox["1", "12"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"8", "/", "3"}]]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"10", "/", "3"}]], ")"}], 
                    SeriesData[$CellContext`x, 
                    DirectedInfinity[1], {}, -4, 10, 3], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["3", "4"], ",", "0", ",", "0", ",", "0", ",", 
                    "0", ",", "0", ",", 
                    FractionBox["1", "2"], ",", "0", ",", "0", ",", "0", ",", 
                    "0", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "12"]}]}], "}"}], ",", 
                    RowBox[{"-", "4"}], ",", "10", ",", "3"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> 
     "Definite integral after subtraction of diverging parts", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralAfterSubtractionOfDivergingParts", 
     "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[x/(1 + x^2)^(1/3) - x^(1/3), {x, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                 RowBox[{
                   RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    FractionBox["x", 
                    RadicalBox[
                    RowBox[{"1", "+", 
                    SuperscriptBox["x", "2"]}], "3"]], "-", 
                    RadicalBox["x", "3"]}], HoldForm], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["3", "4"]}], Identity], "\[LongEqual]", 
              TagBox[
               RowBox[{"-", "0.75`"}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "3.511", 
    "parsetiming" -> "1.113", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa117151eb50322e61g6e490000317548ihbd6d4fd5", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "53", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa117161eb50322e61g6e4900004f64f8db4259h2cc4958237475075997809", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 17, 8, 30, 17.168062`8.987296215809051}, "Line" -> 13,
     "SessionID" -> 23115481321583053775}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "integral of x/Power[x^2 + 1, (3)^-1]with respect to x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{607., {902., 909.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"e8eddbc6-80d7-4907-9398-\
c16c91840d77"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{"x", " ", "sen", " ", "5", "x", " ", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"2a7e7084-d826-47a5-b60c-8500cb71f39f"],
 "."
}], "SubitemNumbered",ExpressionUUID->"cc131665-69b9-4696-b6e5-b03c60b85081"],

Cell[TextData[{
 "Como ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"f", "(", 
       RowBox[{"g", "(", "x", ")"}], ")"}], ")"}], "'"}], "=", 
    RowBox[{
     RowBox[{"f", "'"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"g", "(", "x", ")"}], ")"}], "\[CenterDot]", 
      RowBox[{"g", "'"}]}], 
     RowBox[{"(", "x", ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"73d30d47-7bd6-4ce4-9c7a-12e73b15b7b9"],
 ", \nou ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{"f", "'"}], 
     RowBox[{"(", 
      RowBox[{"g", "(", "x", ")"}], ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"5e78df8d-386a-4ffc-827a-ad84c3ec5fce"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"sen", " ", "5", "x"}], "=", 
    RowBox[{
     RowBox[{"g", "'"}], 
     RowBox[{"(", "x", ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"af0a99a6-64b5-4c21-be21-c53127f1afbb"],
 " \nou ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{"g", "'"}], 
     RowBox[{"(", "x", ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"0d80923e-0554-47b4-aaa4-1f8a72ff8bde"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"sen", " ", "5", "x"}], "=", 
    RowBox[{
     RowBox[{"f", "'"}], 
     RowBox[{"(", 
      RowBox[{"g", "(", "x", ")"}], ")"}]}]}], TraditionalForm]],
  FontSize->18,ExpressionUUID->"3692b208-1021-4d1e-a90a-c9e435947dc2"],
 ".\nNo primeiro caso, (...)"
}], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"efcbdf10-bafb-46b4-a94f-ef85a1986e96"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"u", "=", "x"}], ",", " ", 
   RowBox[{
    RowBox[{"\[DifferentialD]", "v"}], "=", 
    RowBox[{
     RowBox[{"sen", " ", "5", "x", 
      RowBox[{
       RowBox[{"\[DifferentialD]", "x"}], 
       StyleBox[".",
        FontSize->14], "\[IndentingNewLine]", 
       RowBox[{"\[Integral]", 
        RowBox[{"u", " ", 
         RowBox[{"\[DifferentialD]", "v"}]}]}]}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"u", " ", "v"}], "-", 
        RowBox[{"\[Integral]", 
         RowBox[{"v", " ", 
          RowBox[{"\[DifferentialD]", "u"}]}]}]}], "\[Implies]", 
       "\[IndentingNewLine]", 
       RowBox[{"\[Integral]", 
        RowBox[{"x", " ", "sen", " ", "5", "x", 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"x", "\[CenterDot]", "sen"}], " ", "5", "x"}], "-", 
        RowBox[{"\[Integral]", 
         RowBox[{"sen", " ", "5", "x", " ", 
          RowBox[{"\[DifferentialD]", "u"}]}]}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"x", "\[CenterDot]", "sen"}], " ", "5", "x"}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "cos"}], " ", "5", "x"}], ")"}], 
          StyleBox[".",
           FontSize->14], "\[IndentingNewLine]", "u"}]}], "=", 
        RowBox[{"5", "x"}]}]}]}]}]}], 
   StyleBox[",",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   RowBox[{
    RowBox[{"\[DifferentialD]", "u"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"5", "x"}], ")"}], "'"}], 
      RowBox[{"\[DifferentialD]", "x"}]}], "=", 
     RowBox[{
      RowBox[{"5", 
       RowBox[{
        RowBox[{"\[DifferentialD]", "x"}], 
        StyleBox[".",
         FontSize->14], "\[IndentingNewLine]", 
        RowBox[{"\[Integral]", 
         RowBox[{"cos", " ", "5", "x", 
          RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
      RowBox[{
       RowBox[{"\[Integral]", 
        FractionBox[
         RowBox[{"cos", " ", "u", 
          RowBox[{"\[DifferentialD]", "u"}]}], "5"]}], "=", 
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{"sen", " ", "5", "x"}], "5"], "+", 
         RowBox[{
          RowBox[{
           RowBox[{"C", 
            StyleBox[".",
             FontSize->14], "\[IndentingNewLine]", "x"}], "\[CenterDot]", 
           "sen"}], " ", "5", "x"}], "-", 
         RowBox[{"\[Integral]", 
          RowBox[{"cos", " ", "5", "x", 
           RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", 
        "\[IndentingNewLine]", 
        RowBox[{
         StyleBox[
          RowBox[{
           RowBox[{"x", "\[CenterDot]", "sen"}], " ", "5", "x"}],
          FontColor->RGBColor[1, 0, 0]], 
         StyleBox["-",
          FontColor->RGBColor[1, 0, 0]], 
         StyleBox[
          FractionBox[
           RowBox[{"sen", " ", "5", "x"}], "5"],
          FontColor->RGBColor[1, 0, 0]], 
         StyleBox["+",
          FontColor->RGBColor[1, 0, 0]], 
         RowBox[{
          StyleBox["C",
           FontColor->RGBColor[1, 0, 0]], 
          StyleBox[".",
           FontSize->14]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"919aa9da-2153-41e3-9d6c-6b36b5394902"]], "Text",Expres\
sionUUID->"2cfad53a-a9cf-44e6-bf8f-36405c82c194"],

Cell[TextData[StyleBox["Esta estou deixando incorreta, a resposta n\[ATilde]o \
est\[AAcute] batendo.",
 FontColor->GrayLevel[0.5]]], "Text",ExpressionUUID->"3218ade7-e20e-4cd1-81c2-\
73554452d399"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"u", "=", "x"}], ",", 
   RowBox[{
    RowBox[{"\[DifferentialD]", "v"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"sen", " ", "5", "x", 
       RowBox[{"\[DifferentialD]", "x"}]}], "\[Implies]", 
      "\[IndentingNewLine]", "v"}], "=", 
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{"sen", " ", "5", "x", 
        RowBox[{
         RowBox[{"\[DifferentialD]", "x"}], 
         StyleBox[".",
          FontSize->14], 
         StyleBox["\[IndentingNewLine]",
          FontSize->14], 
         SubscriptBox["u", "2"]}]}]}], "=", 
      RowBox[{"5", "x"}]}]}]}], ",", 
   RowBox[{
    RowBox[{"\[DifferentialD]", 
     SubscriptBox["u", "2"]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"5", 
       RowBox[{"\[DifferentialD]", "x"}]}], "\[Implies]", 
      "\[IndentingNewLine]", "v"}], "=", 
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{
        FractionBox[
         RowBox[{"sen", " ", 
          SubscriptBox["u", "2"]}], "5"], 
        RowBox[{"\[DifferentialD]", 
         SubscriptBox["u", "2"]}]}]}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          FractionBox["1", "5"], "\[CenterDot]", 
          RowBox[{"-", "cos"}]}], " ", 
         SubscriptBox["u", "2"]}], "+", "C"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox[
           RowBox[{"cos", " ", "5", "x"}], "5"]}], "+", 
         RowBox[{"C", 
          StyleBox[".",
           FontSize->14], "\[IndentingNewLine]", 
          RowBox[{"\[Integral]", 
           RowBox[{"u", 
            RowBox[{"\[DifferentialD]", "v"}]}]}]}]}], "=", 
        RowBox[{
         RowBox[{
          RowBox[{"u", " ", "v"}], "-", 
          RowBox[{"\[Integral]", 
           RowBox[{"v", 
            RowBox[{"\[DifferentialD]", "u"}]}]}]}], "=", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "\[CenterDot]", 
            FractionBox[
             RowBox[{
              RowBox[{"-", "cos"}], " ", "5", "x"}], "5"]}], "-", 
           RowBox[{"\[Integral]", 
            RowBox[{
             RowBox[{
              RowBox[{"-", 
               FractionBox[
                RowBox[{"cos", " ", "5", "x"}], "5"]}], "\[CenterDot]", 
              RowBox[{
               RowBox[{"(", "x", ")"}], "'"}]}], 
             RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"-", "x"}], " ", 
             FractionBox[
              RowBox[{"cos", " ", "5", "x"}], "5"]}], "-", 
            RowBox[{"\[Integral]", 
             RowBox[{
              RowBox[{"-", 
               FractionBox[
                RowBox[{"cos", " ", "5", "x"}], "5"]}], 
              RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"-", "x"}], " ", 
              FractionBox[
               RowBox[{"cos", " ", "5", "x"}], "5"]}], "-", 
             RowBox[{
              FractionBox["1", "5"], 
              RowBox[{"\[Integral]", 
               RowBox[{
                RowBox[{"-", "cos"}], " ", "5", "x", 
                RowBox[{
                 RowBox[{"\[DifferentialD]", "x"}], 
                 StyleBox[".",
                  FontSize->14], "\[IndentingNewLine]", 
                 SubscriptBox["u", "3"]}]}]}]}]}], "=", 
            RowBox[{"5", "x"}]}]}]}]}]}]}]}]}]}], ",", 
   RowBox[{
    RowBox[{"\[DifferentialD]", 
     SubscriptBox["u", "3"]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"5", 
       RowBox[{"\[DifferentialD]", "x"}]}], "\[Implies]", 
      "\[IndentingNewLine]", 
      RowBox[{"\[Integral]", 
       RowBox[{
        RowBox[{"-", "cos"}], " ", "5", "x", 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", 
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"-", "cos"}], " ", 
          SubscriptBox["u", "3"]}], "5"], 
        RowBox[{"\[DifferentialD]", 
         SubscriptBox["u", "3"]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "5"]}], " ", "sen", " ", 
         SubscriptBox["u", "3"]}], "+", "C"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", 
           FractionBox["1", "5"]}], "sen", " ", "5", "x"}], "+", 
         RowBox[{
          RowBox[{"C", 
           StyleBox[".",
            FontSize->14], 
           StyleBox["\[IndentingNewLine]",
            FontSize->14], 
           RowBox[{"-", "x"}]}], " ", 
          FractionBox[
           RowBox[{"cos", " ", "5", "x"}], "5"]}], "-", 
         RowBox[{
          FractionBox["1", "5"], 
          RowBox[{"\[Integral]", 
           RowBox[{
            RowBox[{"-", "cos"}], " ", "5", "x", 
            RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "x"}], " ", 
           FractionBox[
            RowBox[{"cos", " ", "5", "x"}], "5"]}], "-", 
          RowBox[{
           RowBox[{
            FractionBox["1", "5"], "\[CenterDot]", 
            RowBox[{"(", 
             RowBox[{"-", 
              FractionBox["1", "5"]}], ")"}]}], "sen", " ", "5", "x"}], "+", 
          "C"}], "=", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "x"}], " ", 
           FractionBox[
            RowBox[{"cos", " ", "5", "x"}], "5"]}], "+", 
          RowBox[{
           FractionBox["1", "25"], " ", "sen", " ", "5", "x"}], "+", 
          RowBox[{"C", 
           StyleBox[".",
            FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"d0f6b65f-11a2-4eb7-8e17-6154849be44c"]], "Text",\
ExpressionUUID->"0f2b9233-d852-4920-84d9-5600c9218b2c"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[DifferentialD]", "u"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"162a5898-7a15-409e-af0f-a9373207746d"],
 " \[EAcute] substitu\[IAcute]do por ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"u", "'"}], "=", 
    RowBox[{"n", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"454c606a-5c06-47b1-aab5-9c85b42224b3"],
 ", mas ",
 StyleBox["multiplicando",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"43e1d16a-387b-4c63-894f-1b91f5face23"],
 " em ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{"v", 
     RowBox[{"\[DifferentialD]", "u"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b4d75d4a-e88f-4a72-aea0-31b9488f6e22"],
 ". ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{"v", 
      RowBox[{"\[DifferentialD]", "u"}]}]}], "=", 
    RowBox[{"\[Integral]", 
     RowBox[{
      RowBox[{"v", "\[CenterDot]", 
       RowBox[{"(", 
        RowBox[{"x", "'"}], ")"}]}], 
      RowBox[{"\[DifferentialD]", "x"}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"ddf82d00-6af7-450a-b67d-cfa3d1d8f9c2"],
 "."
}], "Text",
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"62c975f7-5b19-43d6-9a03-b41b285232fa"],

Cell[TextData[{
 "A resposta \[EAcute] ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     StyleBox[
      RowBox[{
       FractionBox["1", "25"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"sin", "(", 
          RowBox[{"5", " ", "x"}], ")"}], "-", 
         RowBox[{"5", " ", "x", " ", 
          RowBox[{"cos", "(", 
           RowBox[{"5", " ", "x"}], ")"}]}]}], ")"}]}],
      StripOnInput->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100},
      LineColor->GrayLevel[0],
      FrontFaceColor->GrayLevel[0],
      BackFaceColor->GrayLevel[0],
      GraphicsColor->GrayLevel[0],
      FontColor->GrayLevel[0]], "+", 
     StyleBox["\"\<constant\>\"",
      StripOnInput->False,
      LineIndent->0,
      LinebreakAdjustments->{1, 100, 1, 0, 100},
      FontFamily->"Helvetica",
      Magnification->0.9 Inherited]}],
    StripOnInput->False,
    LineIndent->0,
    LinebreakAdjustments->{1, 100, 1, 0, 100},
    LineColor->GrayLevel[0.6],
    FrontFaceColor->GrayLevel[0.6],
    BackFaceColor->GrayLevel[0.6],
    GraphicsColor->GrayLevel[0.6],
    FontColor->GrayLevel[0.6]], TraditionalForm]], "WolframAlphaFullOutput",
  ExpressionUUID->"4621e546-b06c-4066-b19d-4ec87933e9dd"],
 "."
}], "Text",
 CellDingbat->
  "\[LightBulb]",ExpressionUUID->"b2f9d0e6-68ee-48d1-9b36-b0c011f02667"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"Cos", "[", "x", "]"}], "5"], ",", "x"}], "]"}], ",", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"5", "x"}], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"5", "x"}], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"5", "x"}], "]"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cos", "[", 
       RowBox[{"5", "x"}], "]"}]}], ",", "x"}], "]"}]}], "}"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"3df803a0-032f-4fd7-9739-0d2fb74c356b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"Sin", "[", "x", "]"}], "5"], ",", 
   RowBox[{"5", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"5", " ", "x"}], "]"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"5", " ", "x"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "5"]}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"5", " ", "x"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "5"]}], " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"5", " ", "x"}], "]"}]}]}], "}"}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"f426d69f-bfc2-4e30-b64f-9b1d4087ab2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[Integral]x*sen(5x)\[DifferentialD]x", "WolframAlphaLong",
 CellLabel->"In[36]:=",ExpressionUUID->"131b2c6b-1ffe-4770-8f2d-61dd118cc1a1"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "\[Integral]x*sen(5x)\[DifferentialD]x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[x Sin[5 x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], "-", 
                    RowBox[{"5", " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"integrate \"", "\"by \"", "\"parts, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{"f", 
                    RowBox[{"\[DifferentialD]", "g"}]}]}], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"f", " ", "g"}], "-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{"g", 
                    RowBox[{"\[DifferentialD]", "f"}]}]}]}]}], "\",\"", 
                    "\" \""}, "RowDefault"], "\"where \"", "\"\\n \"", 
                    TemplateBox[{
                    RowBox[{"f", "\[LongEqual]", "x"}], "\",\"", "\" \"", 
                    "\" \"", "\" \"", "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "g"}], "\[LongEqual]", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    RowBox[{"\[DifferentialD]", "x"}], "\",\"", "\"\\n\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "f"}], "\[LongEqual]", 
                    "\"\""}], "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}]}, "RowDefault"], 
                    "\",\"", "\" \"", "\" \"", "\" \"", "\" \"", "\" \""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"g", "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "5"]}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "5"]}], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "5"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"substitute \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"5", " ", "x"}]}], "\" \""}, "RowDefault"], 
                    "\"and \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", "5"}], 
                    "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "5"]}], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "25"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", "u", ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"integral \"", "\"of \"", 
                    TemplateBox[{
                    RowBox[{"cos", "(", "u", ")"}], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{
                    RowBox[{"sin", "(", "u", ")"}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"sin", "(", "u", ")"}], "25"], "-", 
                    RowBox[{
                    FractionBox["1", "5"], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", "\"back \"", "\"for \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"5", " ", "x"}]}], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "5"], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Which \"", "\"is \"", "\"equal \"", "\"to:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}], "-", 
                    RowBox[{"5", " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-5 x Cos[5 x] + Sin[5 x])/25, {x, -1.3, 1.3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4874$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4873$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3276786$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4873$\
3276791$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4874$3276792$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4874$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4873$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3276786$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4873$\
3276791$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4874$\
3276792$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[
                    1, 25] (((-5) $CellContext`x) Cos[5 $CellContext`x] + 
                    Sin[5 $CellContext`x]), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], 
                    (
                    Piecewise[{{
                    0. + 1.3434015266901709` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.3434015266901709` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], \
-1.2566370614359172`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$]], 
                    (
                    Piecewise[{{
                    0. + 1.3434015266901709` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.3434015266901709` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$ + 
                    0.0025132741228718345`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$]], 
                    1.2566370614359172`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4873$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4874$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276764[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbikw3t/+ARKfkdjQ+\
gkJ1rExaUBJyvfeEiexcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPT0SQ9Hu9nrppzAfB4mQ\
LT8+MGYlZLgoevz/PJVGKCp7cwGf3jAmJ3icMfpDY+W4bcyDkDLQ7v8H3gUUFA02+\
asqopkRNDyXkGY1U7RlLemp+MmUiAkZ/khc728Pd4XDXwWAsY9CaSK522kLmmQRFkh4C3TJmjwH/\
5o5Py+OngrGQfC8Ij4h6bLwTCbGBERwY5uN96/\
Vm6gEmpoHHIOMrp8nKc9T2AqUl5emEzHJ843KyXrUFBpkqx83Dkpt1CnLh38EHIrQxOY9N2p4tgX5h\
XDP6Lsrqn3M3wPPbtvBSnK0mDvN7x5A30PSUqGU6X7auk2Ok6lob/Zyrq5ovGw3y8ilT/\
y8dU6WXw9huGwaZnZgar9beMvzrtvAix66fi/uRMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5XfIfo9KlghROYOMt+\
sf3xpAKvN4UQazfdgHR4PQMCkhPjii23+zSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5Qs1B10lH35o+\
JWcrnQZMj7EdckJXKt6O9ifaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqUqC7pWBzY0pz7J9EvC3xMeKqz5o7tObq82xazCcRZrbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DSDxuM4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-5 x Cos[5 x] + Sin[5 x])/25, {x, -7.5, 7.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4876$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4875$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3276877$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4875$\
3276878$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4876$3276879$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4876$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4875$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3276877$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4875$\
3276878$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4876$\
3276879$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[
                    1, 25] (((-5) $CellContext`x) Cos[5 $CellContext`x] + 
                    Sin[5 $CellContext`x]), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], 
                    (
                    Piecewise[{{
                    0. + 8.060409160141026 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    8.060409160141026 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], \
-7.5398223686155035`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$]], 
                    (
                    Piecewise[{{
                    0. + 8.060409160141026 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 8.060409160141026 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$ + 
                    0.015079644737231007`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$]], 
                    7.5398223686155035`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4875$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4876$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3276857[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMxIY2viABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn25v7e683Nn1MBjLCIyhSujttpB5pkDTtIdA16x5y0F888\
dH5fFTwXlMvxdUJFQ/sN6xAmJhpACO+QTfermZuouJGRAEFLlwmpw8h20v0EYxMR3TWY5vnE/\
W87bAoKbac3Ov5Gadgnz4N/GBjF1M3uOSdmdHYFgYl4y+s7L659wN8Py6LbySJ6uJw/\
zecOQNDDumepnOZ63r5BmputZFP+fqoubLRoM8f8rU/0uHTJvlMLbahkFnR7bGq7W3DP+\
iLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AZq8uNY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[(-5 x Cos[5 x] + Sin[5 x])/25]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "10"]}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "5"}], " ", "\[ImaginaryI]", " ", "x"}]], 
                    " ", "x"}]}], "-", 
                   RowBox[{
                    FractionBox["1", "10"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"5", " ", "\[ImaginaryI]", " ", "x"}]], " ", 
                    "x"}], "+", 
                   RowBox[{
                    FractionBox["1", "50"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "5"}], " ", "\[ImaginaryI]", " ", "x"}]]}], 
                   "-", 
                   RowBox[{
                    FractionBox["1", "50"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"5", " ", "\[ImaginaryI]", " ", "x"}]]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"TrigExpand[(-5 x Cos[5 x] + Sin[5 x])/25]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  FractionBox[
                   RowBox[{
                    SuperscriptBox["sin", "5"], "(", "x", ")"}], "25"], "-", 
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "5"]}], " ", "x", " ", 
                    RowBox[{
                    SuperscriptBox["cos", "5"], "(", "x", ")"}]}], "+", 
                  RowBox[{
                    FractionBox["1", "5"], " ", 
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "4"], "(", "x", ")"}]}], "+", 
                  RowBox[{"2", " ", "x", " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "3"], "(", "x", ")"}]}], "-", 
                  RowBox[{
                    FractionBox["2", "5"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "3"], "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}]}], "-", 
                  RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox["sin", "4"], "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], {
                 GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], "+", 
               StyleBox[
               "\"constant\"", {
                Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                 FontSize -> Inherited, 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}, StripOnInput -> False]}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded form of the integral", "scanner" -> 
     "Integral", "id" -> "ExpandedForm", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "25"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], "-", 
                   RowBox[{
                    FractionBox["1", "5"], " ", "x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}, StripOnInput -> False], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}, StripOnInput -> False], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedForm__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(-5 x Cos[5 x] + Sin[5 x])/25, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["x", "3"]}], "3"], "-", 
                    FractionBox[
                    RowBox[{"25", " ", 
                    SuperscriptBox["x", "5"]}], "6"], "+", 
                    FractionBox[
                    RowBox[{"625", " ", 
                    SuperscriptBox["x", "7"]}], "168"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "8"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 3, 8, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["5", "3"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["25", "6"]}], ",", "0", ",", 
                    FractionBox["625", "168"]}], "}"}], ",", "3", ",", "8", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "DefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[x Sin[5 x], {x, 0, Pi/5}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["\[Pi]", "5"]], 
                 RowBox[{
                   RowBox[{"x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"5", " ", "x"}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["\[Pi]", "25"], Identity], "\[TildeTilde]", 
              TagBox["0.12566370614359174`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral__1_More digits"}, {}]}]}]}], Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
   Typeset`pod36$$, Typeset`aux1$$ = {True, False, {False, False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
     "", "timedout" -> "Integral", "timedoutpods" -> "", "timing" -> "2.634", 
     "parsetiming" -> "0.421", "parsetimedout" -> "false", "recalculate" -> 
     "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa106014gab7h5bh50f0id00001cbh94fdi9g853ie2689526546027549574", "id" -> 
     "MSPa106114gab7h5bh50f0id00003d9di0g86eh48459", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "49", "related" -> 
     "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa106214gab7h5bh50f0id000019hbafd928868da62689526546027549574", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "", "timedout" -> "Integral", "timedoutpods" -> "", 
     "timing" -> "2.204", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4b.wolframalpha.com", "server" -> "39", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 12, 20, 24, 53.3455808`9.479673292472572}, "Line" -> 
    36, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
   36}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "\[Integral]x*sen(5x)\[DifferentialD]x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
         Typeset`pod36$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{606., {874., 880.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
          Typeset`pod36$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www4b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa106014gab7h5bh50f0id00001cbh94fdi9g853ie2689526546027549574", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"3a33ba37-cc5e-4546-8bb6-\
84ae6e796660"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    RowBox[{
     FractionBox[
      RowBox[{"x", "+", "1"}], 
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"6", "x"}]}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"029543f9-07d6-4263-b729-04c13a76136e"],
 "."
}], "SubitemNumbered",ExpressionUUID->"4e436a9a-0d2d-4343-8196-0cdb31979495"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FullSimplify", "@", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x", "3"], "+", 
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"6", "x"}]}], ")"}]}], "/", 
  RowBox[{"(", 
   RowBox[{"x", "+", "1"}], ")"}]}]], "Input",ExpressionUUID->"3bdf4a63-1f32-\
413c-9c45-e70d0af4a122"],

Cell[BoxData[
 FractionBox[
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "6"}], "+", "x", "+", 
     SuperscriptBox["x", "2"]}], ")"}]}], 
  RowBox[{"1", "+", "x"}]]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"58724239-3969-4147-8a6f-7155a6738e38"]
}, Open  ]],

Cell["N\[ATilde]o \[EAcute] fator.", "Text",ExpressionUUID->"2e9531ca-1d3c-4eaa-8c71-4623d80d97c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "3"], "+", 
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"6", "x"}]}], "\[Equal]", "0"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"59b831d2-f584-447f-91b9-faf74e75ba73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"b8fb1b2e-a3b2-48e9-80ea-aa04606e117b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Simplify", "@", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["x", "3"], "+", 
      SuperscriptBox["x", "2"], "-", 
      RowBox[{"6", "x"}]}], ")"}]}], "/", "x"}], "//", 
  "TraditionalForm"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"7a516cee-27c8-4dcf-bd9c-e383ff40e221"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["x", "2"], "+", "x", "-", "6"}], TraditionalForm]], "Output",
 CellLabel->
  "Out[72]//TraditionalForm=",ExpressionUUID->"fa5a0745-7049-49b1-9195-\
bbfdda787484"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "3"}], ")"}], "*", 
   RowBox[{"(", 
    RowBox[{"x", "-", "2"}], ")"}], "*", "x"}], "//", 
  "TraditionalForm"}]], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"d8f7909c-68a6-4a13-8a11-7a0a583a9649"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "-", "2"}], ")"}], " ", "x", " ", 
   RowBox[{"(", 
    RowBox[{"x", "+", "3"}], ")"}]}], TraditionalForm]], "Output",
 CellLabel->
  "Out[88]//TraditionalForm=",ExpressionUUID->"3fbe9c95-0f33-4470-942e-\
e36efc967113"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    SuperscriptBox["x", "2"], "-", 
    RowBox[{"6", "x"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", "x", "-", "6"}], ")"}], "\[Implies]", 
     "\[IndentingNewLine]", "x"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"0", " ", "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SuperscriptBox["x", "2"], "+", "x", "-", "6"}], "=", "0"}], ")"}]}],
       "\[Implies]", "\[IndentingNewLine]", "x"}], "=", 
     RowBox[{
      RowBox[{"0", "\[Or]", "x"}], "=", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "\[PlusMinus]", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["1", "2"], "-", 
           RowBox[{"4", "\[CenterDot]", "1", "\[CenterDot]", " ", 
            RowBox[{"-", "6"}]}]}]]}], "2"], "=", 
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"-", "1"}], "\[PlusMinus]", 
          SqrtBox[
           RowBox[{"1", "+", "24"}]]}], "2"], "=", 
        RowBox[{
         StyleBox["{",
          StripOnInput->False,
          SpanMaxSize->DirectedInfinity[1]], 
         RowBox[{
          StyleBox[GridBox[{
             {
              FractionBox[
               RowBox[{
                RowBox[{"-", "1"}], "+", "5"}], "2"]},
             {
              FractionBox[
               RowBox[{
                RowBox[{"-", "1"}], "-", "5"}], "2"]}
            }],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox["=",
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          RowBox[{
           StyleBox[
            RowBox[{"(", 
             RowBox[{
              StyleBox[
               StyleBox["2",
                FontColor->RGBColor[1, 0, 0]],
               StripOnInput->False,
               SpanMaxSize->DirectedInfinity[1]], ",", 
              RowBox[{"-", "3"}]}], ")"}],
            StripOnInput->False,
            SpanMaxSize->DirectedInfinity[1]], 
           StyleBox[".",
            FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"95952710-2d20-45a0-88dc-b67e6f748548"]], "Text",\
ExpressionUUID->"646de3a8-0f3a-4bff-b062-53de89da9841"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"x", "+", "1"}], 
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"6", "x"}]}]], "\[Congruent]", 
     RowBox[{
      FractionBox["A", 
       RowBox[{"x", "+", "3"}]], "+", 
      FractionBox["B", 
       StyleBox[
        RowBox[{"x", "-", "2"}],
        FontColor->RGBColor[1, 0, 0]]], "+", 
      FractionBox["D", "x"]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"A", "(", 
         RowBox[{"x", "-", "2"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"B", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"D", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "+", "3"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], 
       RowBox[{"(", "x", ")"}]}]], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{
      StyleBox["{",
       StripOnInput->False,
       SpanMaxSize->DirectedInfinity[1]], 
      RowBox[{GridBox[{
         {
          RowBox[{"x", "=", 
           RowBox[{
            RowBox[{"2", "\[Implies]", "3"}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{"10", "B"}], "\[Implies]", "B"}], "=", 
             FractionBox["3", "10"]}]}]}]},
         {
          RowBox[{"x", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "3"}], "\[Implies]", 
             RowBox[{"-", "2"}]}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{"15", "A"}], "\[Implies]", "A"}], "=", 
             RowBox[{"-", 
              FractionBox["2", "15"]}]}]}]}]},
         {
          RowBox[{"x", "=", 
           RowBox[{
            RowBox[{"0", "\[Implies]", "1"}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", "6"}], "D"}], "\[Implies]", "D"}], "=", 
             RowBox[{"-", 
              FractionBox["1", "6"]}]}]}]}]}
        }], 
       StyleBox[".",
        FontSize->14]}]}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"a5404fd9-1760-4ae2-aeaa-b558a710c91f"],
 "\n"
}], "Text",ExpressionUUID->"9155a537-8b04-4d6f-93b2-818b5110c5e0"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    SuperscriptBox["x", "2"], "-", 
    RowBox[{"6", "x"}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "2"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"x", "+", "3"}], ")"}], 
      RowBox[{"(", "x", ")"}]}], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox[
        RowBox[{"x", "+", "1"}], 
        RowBox[{
         SuperscriptBox["x", "3"], "+", 
         SuperscriptBox["x", "2"], "-", 
         RowBox[{"6", "x"}]}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Integral]", 
       FractionBox["A", 
        RowBox[{"x", "+", "3"}]]}], "+", 
      FractionBox["B", 
       StyleBox[
        RowBox[{"x", "-", "2"}],
        FontColor->RGBColor[1, 0, 0]]], "+", 
      RowBox[{
       FractionBox["D", "x"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["A", 
          RowBox[{"x", "+", "3"}]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["B", 
          RowBox[{"x", "-", "2"}]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["D", "x"], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Integral]", 
         RowBox[{
          FractionBox[
           RowBox[{"-", 
            FractionBox["2", "15"]}], 
           RowBox[{"x", "+", "3"}]], 
          RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
        RowBox[{"\[Integral]", 
         RowBox[{
          FractionBox[
           FractionBox["3", "10"], 
           RowBox[{"x", "-", "2"}]], 
          RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", 
       RowBox[{
        RowBox[{"\[Integral]", 
         RowBox[{
          FractionBox[
           RowBox[{"-", 
            FractionBox["1", "6"]}], "x"], 
          RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            FractionBox["2", "15"]}], 
           RowBox[{"\[Integral]", 
            RowBox[{
             FractionBox["1", 
              RowBox[{"x", "+", "3"}]], 
             RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
          RowBox[{
           FractionBox["3", "10"], 
           RowBox[{"\[Integral]", 
            RowBox[{
             FractionBox["1", 
              RowBox[{"x", "-", "2"}]], 
             RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
          RowBox[{
           FractionBox["1", "6"], 
           RowBox[{"\[Integral]", 
            RowBox[{
             FractionBox["1", "x"], 
             RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "=", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            FractionBox["2", "15"]}], "ln", 
           RowBox[{"\[LeftBracketingBar]", 
            RowBox[{"x", "+", "3"}], "\[RightBracketingBar]"}]}], "+", 
          StyleBox[
           RowBox[{
            FractionBox["3", "10"], "ln", 
            RowBox[{"\[LeftBracketingBar]", 
             RowBox[{"x", "-", "2"}], "\[RightBracketingBar]"}]}],
           FontColor->RGBColor[1, 0, 0]], "-", 
          RowBox[{
           FractionBox["1", "6"], "ln", 
           RowBox[{"\[LeftBracketingBar]", "x", "\[RightBracketingBar]"}]}], 
          "+", 
          RowBox[{"C", 
           StyleBox[".",
            FontSize->14]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"77cbaa50-4d13-4e9d-ae66-5cbfb1555c5a"]], "Text",\
ExpressionUUID->"bf49d9c4-b263-4ffd-b849-2e7833d0ea7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox["1", "x"], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox["2", "x"], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox["1", 
      RowBox[{
       RowBox[{"5", "x"}], "+", "15"}]], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"x", "+", "1"}], 
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"6", "x"}]}]], ",", "x"}], "]"}], ",", 
   RowBox[{"Apart", "[", 
    FractionBox[
     RowBox[{"x", "+", "1"}], 
     RowBox[{
      SuperscriptBox["x", "3"], "+", 
      SuperscriptBox["x", "2"], "-", 
      RowBox[{"6", "x"}]}]], "]"}]}], "}"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"623643a7-aa18-4e49-af50-0cd89bc4701b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Log", "[", "x", "]"}], ",", 
   RowBox[{"2", " ", 
    RowBox[{"Log", "[", "x", "]"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"Log", "[", 
     RowBox[{"15", "+", 
      RowBox[{"5", " ", "x"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     FractionBox["3", "10"], " ", 
     RowBox[{"Log", "[", 
      RowBox[{"2", "-", "x"}], "]"}]}], "-", 
    FractionBox[
     RowBox[{"Log", "[", "x", "]"}], "6"], "-", 
    RowBox[{
     FractionBox["2", "15"], " ", 
     RowBox[{"Log", "[", 
      RowBox[{"3", "+", "x"}], "]"}]}]}], ",", 
   RowBox[{
    FractionBox["3", 
     RowBox[{"10", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2"}], "+", "x"}], ")"}]}]], "-", 
    FractionBox["1", 
     RowBox[{"6", " ", "x"}]], "-", 
    FractionBox["2", 
     RowBox[{"15", " ", 
      RowBox[{"(", 
       RowBox[{"3", "+", "x"}], ")"}]}]]}]}], "}"}]], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"f7f75a7e-489b-4a56-b0d7-7480314c1459"]
}, Open  ]],

Cell[TextData[{
 "A fatora\[CCedilla]\[ATilde]o da raz\[ATilde]o de polin\[OHat]mios n\
\[ATilde]o est\[AAcute] correspondendo com a raiz na \
solu\[CCedilla]\[ATilde]o final, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", "2"}], "+", "x"}], "\[NotEqual]", 
    RowBox[{"2", "-", "x"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"0e70fbb7-c4d8-4c0d-87c5-554ef3f6ccd0"],
 ". Mantendo ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "-", "2"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"0aa254c9-5a12-4b97-82d7-857c9d25d641"],
 "."
}], "Text",ExpressionUUID->"cff2b43f-c70f-414b-b33b-7df48028619b"],

Cell["Resolu\[CCedilla]\[ATilde]o alternativa sem o truque da p\[AAcute]g. \
35:", "Text",ExpressionUUID->"7728d98e-4eee-476c-a66d-71aacf43f9e8"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"x", "+", "1"}], 
    RowBox[{
     SuperscriptBox["x", "3"], "+", 
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"6", "x"}]}]], "=", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"A", "(", 
         RowBox[{"x", "-", "2"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"B", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", "x", ")"}]}], "+", 
       RowBox[{
        RowBox[{"D", "(", 
         RowBox[{"x", "+", "3"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "+", "3"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], 
       RowBox[{"(", "x", ")"}]}]], "\[Implies]", 
     StyleBox["\[IndentingNewLine]",
      FontSize->14], 
     RowBox[{"x", "+", "1"}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"A", "(", 
       RowBox[{
        SuperscriptBox["x", "2"], "-", 
        RowBox[{"2", "x"}]}], ")"}], "+", 
      RowBox[{"B", "(", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        RowBox[{"3", "x"}]}], ")"}], "+", 
      RowBox[{"D", "(", 
       RowBox[{
        SuperscriptBox["x", "2"], "-", 
        RowBox[{"2", "x"}], "+", 
        RowBox[{"3", "x"}], "-", "6"}], ")"}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"A", " ", 
        SuperscriptBox["x", "2"]}], "-", 
       RowBox[{"2", "A", " ", "x"}], "+", 
       RowBox[{"B", " ", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"3", " ", "B", " ", "x"}], "+", 
       RowBox[{"D", " ", 
        SuperscriptBox["x", "2"]}], "-", 
       RowBox[{"2", " ", "D", " ", "x"}], "+", 
       RowBox[{"3", " ", "D", " ", "x"}], "-", 
       RowBox[{"6", "D"}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"x", "(", 
        RowBox[{
         RowBox[{"A", " ", "x"}], "-", 
         RowBox[{"2", " ", "A"}], "+", 
         RowBox[{"B", " ", "x"}], "+", 
         RowBox[{"3", " ", "B"}], "+", 
         RowBox[{"D", " ", "x"}], "-", 
         RowBox[{"2", "D"}], "+", 
         RowBox[{"3", " ", "D"}]}], ")"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "6"}], " ", "D"}], ")"}], 
        StyleBox[".",
         FontSize->14]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"7db5f4a4-dbe2-48ae-bbff-abf3949131ce"]], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"76c44c0c-a181-46d8-8c02-3e0bd5935e0c"],

Cell[TextData[{
 "Seria interessante ver onde daria montar o sistema abaixo com os \
quadrados... Com um sistema para cada ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FontSize->24,ExpressionUUID->"1836e61f-9c95-48ca-96fd-baa57ab3790b"],
 " raiz."
}], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"32cb433a-5ae7-4b8f-9e35-b6a39d9a157d"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox["{",
    StripOnInput->False,
    SpanMaxSize->DirectedInfinity[1]], 
   RowBox[{
    RowBox[{GridBox[{
       {
        RowBox[{
         RowBox[{"A", "+", "B", "+", "C"}], "=", "1"}]},
       {
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], "A"}], "+", 
          RowBox[{"3", "B"}]}], "=", "1"}]}
      }], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"-", "A"}], "+", 
      RowBox[{"4", "B"}]}]}], "=", 
    RowBox[{
     RowBox[{"2", "\[Implies]", 
      RowBox[{"-", "A"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "-", 
        RowBox[{"4", "B"}]}], "\[Implies]", "A"}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], "+", 
         RowBox[{"4", "B"}]}], "\[Implies]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"-", "2"}], "+", 
         RowBox[{"4", "B"}], "+", "B"}]}], "=", 
       RowBox[{
        RowBox[{"1", "\[Implies]", 
         RowBox[{"5", "B"}]}], "=", 
        RowBox[{
         RowBox[{"3", "\[Implies]", "B"}], "=", 
         RowBox[{
          RowBox[{
           FractionBox["3", "5"], "\[Implies]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], "A"}], "+", 
            FractionBox["9", "5"]}]}], "=", 
          RowBox[{
           RowBox[{"1", "\[Implies]", 
            RowBox[{
             RowBox[{"-", "2"}], "A"}]}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"-", 
              FractionBox["4", "5"]}], "\[Implies]", "A"}], "=", 
            RowBox[{
             FractionBox["4", "10"], "=", 
             RowBox[{
              FractionBox["2", "5"], 
              StyleBox[".",
               FontSize->14]}]}]}]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"830e0fb1-f18d-4693-9570-5e5f7e52540e"]], "Text",
 FontColor->GrayLevel[
  0.5],ExpressionUUID->"5a42c6db-e233-4788-85e6-7e3c8d4c3777"],

Cell[CellGroupData[{

Cell[TextData[{
 "roots of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    SuperscriptBox["x", "2"], "-", 
    RowBox[{"6", "x"}]}], TraditionalForm]],ExpressionUUID->
  "e57c8c4a-504a-4c08-bb3d-d6bba86e33a8"]
}], "WolframAlphaLong",
 CellLabel->"In[77]:=",ExpressionUUID->"5733e629-96d7-475d-a41e-b32027084e0e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "roots of x^3 + x^2 - 6 x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"roots\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "3"], "+", 
                    SuperscriptBox["x", "2"], "-", 
                    RowBox[{"6", " ", "x"}]}], HoldForm], "\[LongEqual]", 
                    "0"}]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "4", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-6 x + x^2 + x^3 == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              RowBox[{"-", "3"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-6 x + x^2 + x^3 == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-6 x + x^2 + x^3 == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", "2"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve for \"", "x"}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "3"], "+", 
                    SuperscriptBox["x", "2"], "-", 
                    RowBox[{"6", " ", "x"}]}], HoldForm], "\[LongEqual]", 
                    "0"}], HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"The \"", "\"left \"", "\"hand \"", "\"side \"", 
                    "\"factors \"", "\"into \"", "\"a \"", "\"product \"", 
                    "\"with \"", "\"three \"", "\"terms\""}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "-", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}], HoldForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Split \"", "\"into \"", "\"three \"", "\"equations\""},
                     "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox["\" or \"", 
                    GrayLevel[0.7], StripOnInput -> False], 
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"x", "-", "2"}], HoldForm], "\[LongEqual]", "0"}],
                     HoldForm], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "0"}], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], "\[LongEqual]", "0"}],
                     HoldForm]}, "RowWithSeparator"], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Add \"", 
                    TemplateBox[{"2", "\" \""}, "RowDefault"], "\"to \"", 
                    "\"both \"", "\"sides\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    StyleBox["\" or \"", 
                    GrayLevel[0.7], StripOnInput -> False], 
                    FrameBox[
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "2"}], HoldForm], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "0"}], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], "\[LongEqual]", "0"}],
                     HoldForm]}, "RowWithSeparator"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Subtract \"", 
                    TemplateBox[{"3", "\" \""}, "RowDefault"], "\"from \"", 
                    "\"both \"", "\"sides\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    StyleBox["\" or \"", 
                    GrayLevel[0.7], StripOnInput -> False], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "2"}], HoldForm], 
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", "0"}], HoldForm], 
                    FrameBox[
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", 
                    RowBox[{"-", "3"}]}], HoldForm], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> 
                    False]}, "RowWithSeparator"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Root plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[{x (-6 + x + x^2), 0}, {x, -5.5, 4.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{{}, {}, 
                TagBox[{
                  Directive[
                   Opacity[1.], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1: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
hDdQcaKG42DnWSaQj29P/07Y9E7FA9vLTGC0TdoyciMVN5NX2xbeYQJ+TwVD
FQsqDjqVPKvyjAlUtxWeTCcs3iOecSWbCRRCX08ts6TizF3n97NKmCD2YENe
GGEbPCpyqJIJyEF9jzDhXsOD72oamEBDJy9tmnDks7qjRl1MED69UCm/iYpV
pDYoJQ8zwSvHO0w64dKIzDrhGSbYkLVBbRnhfROK4cF8LPD97AcwR1zPOhSn
1yXJAmyjPrtKwgnfZztslVlgq91/xuGE9Sz94wt1WOCg8XqmCuHanJ8WqsYs
8MWXE5pJrN9HxWb8CmSBlXuiSuiEyfFFySx7FpA4dTcrmnj+pwtaDocOsICU
Mde6nshnw7F7izW+LFBNvXRGiPCvdv48o2DC4QyLlUS+/9mFeCRHsEDmsPhl
YyJ/almvlMh1FuCvT9mmR8znte5uHPyQBU6k/HdW3JSK7R5/DOpKY4HzTbsk
2oh5DoqsVd+WzwJVv3lzN4h5XzqT0lhYzgJ9q7asXU30odwl0iiulQVY5ytc
DYj+HKiZ6GX1sICM/yWTeKJfM6budw9NsMChE/xrWvWo2FDBkm0kPAV+pzi7
aBP9/Babk54sOwVMS8pO6BP9PTKtvE+EPgVUyhfCVIl+p7ZwirrMp0CHt6nJ
BxoVb9oS4Ldt6xTomcTNx1SpuOPNb4U3TlPgm4WduYAyFcvdLT0dFzAF0kfP
rWDJU/EVp7D165KI7x+yOvRRjIpvfVt1PCdzChyIXat3Tpjom+3fp9olU6Bg
e76XogAV51puE1BsmgKZ38WzRDlS+KeuUj1XmA2YtknHzDukcHf6D3KYPBt8
qW67wGuSwiO0S8aTGoTDBi7E10nhRfmxxz2WbDAzUNsi/E4Kr+Cr8KkOYYNl
3qveB92VwmsuBD8EF9nA6Lvr8uirUnjD3Iq60gQ26POQjHKLlMIOEzcNszPZ
IP/cfvaxACkc2n6Yc/MvG2gOjexjWRLnXaHgrQM7pgGz4MnQpXbifDUo+9S0
fxq81Ar3UPwuidsyAqd3+E2Dr7nWcv8hSTz29JfrpovTQDx2uDIqTRLLXc/U
1iyZBiefcGhjRySxt/fO92MaMyA2siqDOSSBj/8hT/iumQGOQ4UJY78kcNiB
Yvpfyxng6jL5L6daAl9zpF1u3D8D2J9zL15Ik8CFG5m7ihNmgNL6MsODrhKY
T+7+YCRnBsinPTg8WS6OpSciJGWEZ8Fb5wOnHmeKY3rtEdN02VlQCZ4vSD4Q
x5bnLS7X6s+CrMXnGm6B4vhMf5+2tMcseGdza/V5FXE8/tbIN/XzLEh5d+Rv
RSAFcxNUbhg3zALOu4HX8vspWOyoUFF15yx4qn4i2tSKgleqtguMTs8C9ZDz
3a0yFOwVezF93co5cNa0uj/ujRhu29fQVxk/B6ZmHfKyR0TxoGEZxeXxHPDy
+s1+2CCKp0XT1w2/mAOTvlNf7YtFsUzF6UsSaA58jSlplLooineuoGk6M+dA
nXlm3pysKP40c8Lr37558HpduLOVoQh+/ZDSI0rjAPfNNFfKRiG88sKG61n6
HNAWWCRIXSaE072OmuzYwAHbEsxoDSxBnGRQczV+HwecFnfXjs4UxPGfo42k
4jmgp6kWZMkK4uOT85fk5jnAauL9O0Y7P9azHVpBa14A8M4OnSvGZPxSf1kj
6l4AziXLlbAwGWvI2IR7TiyARL6aqvx2ElbqSqt/LsoFpGDVxtJIEhYL8Tij
BbngJF8yC8cvoZGnP7/ovuYC95v15kPXuShzpvK48RUeKHPcq12mNINWbdQV
n7jLA1EPdzi2FE2jrMgb2a9SeICdW8g5umsa5Yg4jyiV8cDo6jQ54Rg2ylX6
508e5wG7tEZx/gEWertJ1PvH7kVgV0J5nKc8ifDlnQeOqC2B97O57C1T3cjq
a8Gcut4S8H/aGfVUuBt9klJ41GG2BCqpazhVJn/Q50d/fjo4LYGY1veXnc+3
o+qsk3tNYpaA9223cbfJJvT1x21HvpElEHXQxi7PKxsdo4xq/HAlwekp/hRH
6y4wcrZMgHKYBJcXvNcvcP4LjgxdHbT1J8ENaau20Iq7gV/VyqyPISSox9X9
NPmjF3hF+q0tiifBrflbLF5J/AP7p3pAUgUJOtZJf0doEmztaHML0CDDcREt
q2vcOUDLrn4gNEKGHxusnSRCheDeZ6Xv6hhkmLJF/WVxgxC8djerM2GWDNPU
xU+U6gtDdniCxjJBPihDX1dVNSAM6+ydc3XofLDn5MBXMTdRGDYxULXNmQ9W
erY+cTkgDr+vFZy+9okPxh38Xd23QxqGl1rvkXrCDxn7WeEG8orQyK2B4fGc
H56pEPbNtVOEI0tuCfmv+OHpPRLc/VGK0NU27IvTW354Mo/urTemCDf8zAD3
vvND28xxj+qq5XBuSkJ/OUkAMkLsj/yNUoZhhm0Cmr4C0KEnfB9DgQaDXh4v
NjUUhHt5ds63vTThn3rl+5KmgtD2ccE5/1hNuHO+LmTQQhBezbNtccnQhKvs
ddc+sBOE6dcktl6Z0IT9zIHsaV9B6PvOYVL9vBZ0sfR4/jZJEE4Nq8zbJ2nD
TS1O8UZiRE5qj0JzGTpQnM/Ma/WAEJSRupxnPaoPey+1aHk5isDng1e2vlNb
B/8HEzrHzQ==
                   "]]}, Annotation[#, "Charting`Private`Tag$2274916#1"]& ], 
                
                TagBox[{}, 
                 Annotation[#, 
                  "Charting`Private`Tag$2274916#2"]& ]}}, {}, {}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
              AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, {{-15., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-10., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {10., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {15., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-20., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-19., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-18., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-17., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-16., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-14., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-13., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-12., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-11., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-9., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-8., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-7., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {7., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {8., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {9., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {11., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {12., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {13., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {14., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {16., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {17., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {18., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {19., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {20., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{-4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {None, None}, 
              DisplayFunction -> Identity, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
              All, DisplayFunction -> Identity, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, Epilog -> {
                AbsolutePointSize[5], 
                Hue[0], {
                 TagBox[
                  TooltipBox[
                   PointBox[{-3, 0}], 
                   TemplateBox[{"\"(\"", 
                    RowBox[{"-", "3"}], "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", -3, ",", 0, ")"}], "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PointBox[{0, 0}], 
                   
                   TemplateBox[{"\"(\"", "0", "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", 0, ",", 0, ")"}], "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PointBox[{2, 0}], 
                   
                   TemplateBox[{"\"(\"", "2", "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", 2, ",", 0, ")"}], "Tooltip"]& ]}}, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, GridLinesStyle -> {
                GrayLevel[0.85], 
                GrayLevel[0.9]}, ImageSize -> 330., 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                PointSize[Medium], "PointSizeFunction" -> "SmallPointSize", 
                "ScalingFunctions" -> None, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{-5.5, 4.5}, {-15.752256658984564`, 
               19.120014520338945`}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "Solve", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"NumberLinePlot[x == -3 || x == 0 || x == 2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{-3., 0.16499999999999998`}]}, 
                   RowBox[{"-", "3"}]], Annotation[#, -3., "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{0., 0.16499999999999998`}]}, "0"], 
                  Annotation[#, 0., "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[{
                    PointSize[0.02], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    PointBox[{2., 0.16499999999999998`}]}, "2"], 
                  Annotation[#, 2., "Tooltip"]& ]}}, ImageSize -> 330., 
               Axes -> {True, False}, PlotRange -> {{-3.25, 2.25}, Automatic},
                AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Product of roots", "scanner" -> "Solve", "id" -> 
     "ProductOfRoots", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(((-1)^Exponent[-6 x + x^2 + x^3, x] First[#1])/Last[#1] & \
)[CoefficientList[-6 x + x^2 + x^3, x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["0", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Sum of roots", "scanner" -> "Solve", "id" -> 
     "SumOfRoots", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(-(#1[[-2]]/Last[#1]) & )[CoefficientList[-6 x + x^2 + x^3, x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"-", "1"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.1400000000000001", "parsetiming" -> "0.657", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa50431i3h0248ef5b88bc0000680h4ge404b4h22i", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "35", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa50441i3h0248ef5b88bc0000536ehf010a8h9a0b1772263090609295160", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2019, 5, 14, 20, 52, 13.278526`8.875724821987426}, "Line" -> 
    77, "SessionID" -> 23112705217405443218}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "roots of x^3 + x^2 - 6 x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{607., {527., 534.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", \
"WolframAlphaFullOutput",ExpressionUUID->"9378bc9c-baab-493c-86f0-\
9baba2fd225c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CreatePalette", "[", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Extensible Brackets\>\"", ",", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"Grid", "[", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"PasteButton", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"RawBoxes", "@", 
                    RowBox[{"RowBox", "@", 
                    RowBox[{"Insert", "[", 
                    RowBox[{
                    "#", ",", "\"\<\[SelectionPlaceholder]\>\"", ",", "2"}], 
                    "]"}]}]}], ",", 
                    RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}], 
                  "]"}], "&"}], ",", 
                RowBox[{"Most", "@", 
                 RowBox[{"Tuples", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<[\>\"", ",", "\"\<{\>\"", ",", "\"\<\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<]\>\"", ",", "\"\<}\>\"", ",", "\"\<\>\""}], 
                    "}"}]}], "}"}], "]"}]}]}], "]"}], ",", "4"}], "]"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"PasteButton", "[", 
                RowBox[{"RawBoxes", "[", "#", "]"}], "]"}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[UnderBrace]\>\""}], "]"}], ",", 
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[UnderParenthesis]\>\""}], "]"}], ",", 
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[UnderBracket]\>\""}], "]"}], ",", 
                  RowBox[{"UnderscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", "\"\<_\>\""}], 
                   "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[OverBrace]\>\""}], "]"}], ",", 
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[OverParenthesis]\>\""}], "]"}], ",", 
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", 
                    "\"\<\[OverBracket]\>\""}], "]"}], ",", 
                  RowBox[{"OverscriptBox", "[", 
                   RowBox[{
                   "\"\<\[SelectionPlaceholder]\>\"", ",", "\"\<_\>\""}], 
                   "]"}]}], "}"}]}], "}"}], ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
          RowBox[{"Spacings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"FontSize", "\[Rule]", "8"}]}], "]"}]}], "}"}], "]"}], "]"}], 
  "\n"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"4f2a5e47-2777-4892-a432-ef784e3f64f6"],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["pmun8_shm", 3, 1]],15,
   "FrontEndObject[LinkObject[\"pmun8_shm\", 3, 1]]","15","\"Untitled-2\""},
  "NotebookObjectUnsaved"]], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"b69b456e-8d2a-44d6-8e62-84aa0cfa1bd2"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SuperscriptBox["x", "3"]}], ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}], 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}]]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"940e53c5-1b12-4c2b-9d78-fe34de4309d0"],
 "."
}], "SubitemNumbered",ExpressionUUID->"60729844-93bd-43c1-bbb3-6de130f96267"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Integral]", 
     RowBox[{
      FractionBox[
       RowBox[{"1", "-", 
        SuperscriptBox["x", "3"]}], 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        RowBox[{"4", "x"}], "+", "3"}]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{"-", 
          SuperscriptBox["x", "3"]}], "+", "1"}], 
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         RowBox[{"4", "x"}], "+", "3"}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
     RowBox[{
      RowBox[{"\[Integral]", 
       FractionBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "13"}], "x"}], "-", "11"}], 
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         RowBox[{"4", "x"}], "+", "3"}]]}], "-", "x", "+", 
      RowBox[{"4", 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"bb6e1f2e-bb11-4d22-8159-7306c8cbcf9d"],
 "."
}], "Text",ExpressionUUID->"369ba62b-6a6d-439f-b603-0d1cfe689cbb"],

Cell[TextData[Cell[BoxData[
 FormBox[GridBox[{
    {
     RowBox[{"-", 
      SuperscriptBox["x", "3"]}], 
     RowBox[{
      RowBox[{"+", "0"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"+", "0"}], "x"}], 
     RowBox[{"+", "1"}], "\[Divide]", 
     SuperscriptBox["x", "2"], 
     RowBox[{
      RowBox[{"+", "4"}], "x"}], 
     RowBox[{"+", "3"}]},
    {
     RowBox[{"+", 
      SuperscriptBox["x", "3"]}], 
     RowBox[{
      RowBox[{"+", "4"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"+", "3"}], "x"}], " ", " ", 
     RowBox[{"-", "x"}], 
     RowBox[{"+", "4"}], " "},
    {"0", 
     RowBox[{
      RowBox[{"+", "4"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"+", "3"}], "x"}], 
     RowBox[{"+", "1"}], " ", " ", " ", " "},
    {" ", 
     RowBox[{
      RowBox[{"-", "4"}], 
      SuperscriptBox["x", "2"]}], 
     RowBox[{
      RowBox[{"-", "16"}], "x"}], 
     RowBox[{"-", "12"}], 
     FormBox[" ",
      TraditionalForm], " ", " ", " "},
    {" ", " ", 
     RowBox[{
      RowBox[{"-", "13"}], "x"}], 
     RowBox[{"-", "11"}], " ", " ", " ", " "}
   }], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"00e88d35-cac2-495c-b04f-5210f01e9164"]], "Text",\
ExpressionUUID->"7bd8ef53-5ddf-48d3-b91f-3ff569aaf5c1"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}], "\[Implies]", "x"}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"-", "4"}], "\[PlusMinus]", 
       SqrtBox[
        RowBox[{"16", "-", "12"}]]}], "2"], "=", 
     RowBox[{
      StyleBox["{",
       StripOnInput->False,
       SpanMaxSize->DirectedInfinity[1]], GridBox[{
        {
         RowBox[{
          FractionBox[
           RowBox[{
            RowBox[{
             StyleBox["-",
              StripOnInput->False,
              SpanMaxSize->DirectedInfinity[1]], "4"}], "+", "2"}], "2"], "=", 
          RowBox[{"-", "1"}]}]},
        {
         RowBox[{
          FractionBox[
           RowBox[{
            RowBox[{"-", "4"}], "-", "2"}], "2"], "=", 
          RowBox[{"-", "3"}]}]}
       }]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"501650b9-9c09-4e62-9406-1dbc56c0e4ba"],
 "."
}], "Text",ExpressionUUID->"367143d3-8a6f-4060-8022-298e6fbde2cb"],

Cell[TextData[{
 "Agora vamos achar como representar o polin\[OHat]mio do denominador (",
 Cell[BoxData[
  FormBox[
   RowBox[{"Q", "(", "x", ")"}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"cb3d0fbb-8159-4959-863f-cc0d78313013"],
 ") como seus fatores. Isso \[EAcute] para simplificar a parte racional da \
integral, portanto n\[ATilde]o estamos ignorando o resto (",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "x"}], "+", "4"}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"f8de0a28-081b-47f7-a478-2c99977ed468"],
 "), que ser\[AAcute] avaliado oportunamente."
}], "Text",ExpressionUUID->"23a37fc1-bfcd-4f0b-ae89-10a6206537d4"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{
       RowBox[{"-", "13"}], "x"}], "-", "11"}], 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}]], "\[Congruent]", 
    RowBox[{
     FractionBox["A", 
      RowBox[{"x", "+", "1"}]], "+", 
     FractionBox["B", 
      RowBox[{"x", "+", "3"}]]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"A", "(", 
       RowBox[{"x", "+", "3"}], ")"}], "+", 
      RowBox[{"B", "(", 
       RowBox[{"x", "+", "1"}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "+", "1"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"x", "+", "3"}], ")"}]}]], "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"A", " ", "x"}], "+", 
        RowBox[{"3", "A"}], "+", 
        RowBox[{"B", " ", "x"}], "+", "B"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "+", "1"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"x", "+", "3"}], ")"}]}]], "\[Implies]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"A", " ", "x"}], "+", 
        RowBox[{"3", "A"}], "+", 
        RowBox[{"B", " ", "x"}], "+", "B"}], "\[Implies]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "13"}], "x"}], "-", "11"}]}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "(", 
         RowBox[{"A", "+", "B"}], ")"}], "-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "3"}], "A"}], "-", "B"}], ")"}]}], "\[Implies]", 
       "\[IndentingNewLine]", 
       RowBox[{
        StyleBox["{",
         StripOnInput->False,
         SpanMaxSize->DirectedInfinity[1]], 
        RowBox[{
         StyleBox[
          RowBox[{GridBox[{
             {
              RowBox[{
               RowBox[{"A", "+", "B"}], "=", 
               RowBox[{"-", "13"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", "3"}], "A"}], "-", "B"}], "=", "11"}]}
            }], "\[Implies]", "\[IndentingNewLine]", "A"}],
          StripOnInput->False,
          SpanMaxSize->DirectedInfinity[1]], 
         StyleBox["=",
          StripOnInput->False,
          SpanMaxSize->DirectedInfinity[1]], 
         RowBox[{
          StyleBox[
           RowBox[{
            RowBox[{
             RowBox[{"-", "13"}], "-", "B"}], "\[Implies]", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "3"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "13"}], "-", "B"}], ")"}]}], "-", "B"}]}],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox["=",
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          RowBox[{
           StyleBox[
            RowBox[{"11", "\[Implies]", "\[IndentingNewLine]", 
             RowBox[{"39", "+", 
              RowBox[{"3", "B"}], "-", "B"}]}],
            StripOnInput->False,
            SpanMaxSize->DirectedInfinity[1]], 
           StyleBox["=",
            StripOnInput->False,
            SpanMaxSize->DirectedInfinity[1]], 
           RowBox[{
            StyleBox[
             RowBox[{"11", "\[Implies]", 
              RowBox[{"2", "B"}]}],
             StripOnInput->False,
             SpanMaxSize->DirectedInfinity[1]], 
            StyleBox["=",
             StripOnInput->False,
             SpanMaxSize->DirectedInfinity[1]], 
            RowBox[{
             StyleBox[
              RowBox[{
               RowBox[{"-", "28"}], "\[Implies]", "B"}],
              StripOnInput->False,
              SpanMaxSize->DirectedInfinity[1]], 
             StyleBox["=",
              StripOnInput->False,
              SpanMaxSize->DirectedInfinity[1]], 
             RowBox[{
              StyleBox[
               RowBox[{
                RowBox[{"-", "14"}], "\[Implies]", "\[IndentingNewLine]", 
                "A"}],
               StripOnInput->False,
               SpanMaxSize->DirectedInfinity[1]], 
              StyleBox["=",
               StripOnInput->False,
               SpanMaxSize->DirectedInfinity[1]], 
              RowBox[{
               StyleBox[
                RowBox[{
                 RowBox[{"-", "13"}], "+", "14"}],
                StripOnInput->False,
                SpanMaxSize->DirectedInfinity[1]], 
               StyleBox["=",
                StripOnInput->False,
                SpanMaxSize->DirectedInfinity[1]], 
               StyleBox[
                RowBox[{
                 StyleBox["1",
                  StripOnInput->False,
                  SpanMaxSize->DirectedInfinity[1]], 
                 StyleBox[".",
                  FontSize->14]}]]}]}]}]}]}]}]}]}]}]}]}]}]}], 
  TraditionalForm]],
 FontSize->24,ExpressionUUID->"8910e127-f036-4ccd-9ff8-094247afe413"]], "Text",\
ExpressionUUID->"ee18b39e-796a-4af3-a8f5-482c35fb7211"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}], 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}]]}], "-", "x", "+", 
    RowBox[{"4", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      FractionBox["1", 
       RowBox[{"x", "+", "1"}]]}], "-", 
     FractionBox["14", 
      RowBox[{"x", "+", "3"}]], "-", "x", "+", 
     RowBox[{"4", 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{
        FractionBox["1", 
         RowBox[{"x", "+", "1"}]], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "-", 
      RowBox[{"14", 
       RowBox[{"\[Integral]", 
        RowBox[{
         FractionBox["1", 
          RowBox[{"x", "+", "3"}]], 
         RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{
        RowBox[{"-", "x"}], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
      RowBox[{"\[Integral]", 
       RowBox[{"4", 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ln", 
       RowBox[{"\[LeftBracketingBar]", 
        RowBox[{"x", "+", "1"}], "\[RightBracketingBar]"}]}], "-", 
      RowBox[{"14", "ln", 
       RowBox[{"\[LeftBracketingBar]", 
        RowBox[{"x", "+", "3"}], "\[RightBracketingBar]"}]}], "-", 
      FractionBox[
       SuperscriptBox["x", "2"], "2"], "+", 
      RowBox[{"4", "x"}], "+", 
      RowBox[{"C", 
       StyleBox[".",
        FontSize->14]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"092a9f52-d2ff-4604-b082-f755bb9211cc"]], "Text",\
ExpressionUUID->"b2761751-db20-4006-9f89-e3b2942eba32"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"FullSimplify", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"-", 
       SuperscriptBox["x", "3"]}], "+", "1"}], 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      RowBox[{"4", "x"}], "+", "3"}]], "]"}], ",", 
   RowBox[{
    RowBox[{"-", "x"}], "*", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        RowBox[{"4", "x"}], "+", "3"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x"}], "+", "4"}], ")"}]}], "+", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}], ")"}]}], "]"}], ",", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "x"}], "+", "4"}], ")"}], "*", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}], ")"}]}], "]"}], ",", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], "x"}], "-", "11"}], 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}]], "-", "x", "+", "4"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"-", "x"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{"4", ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"4", "x"}], "+", "3"}]], ",", "x"}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"9abe5634-bcd2-4a65-b6d1-dc7bd15883c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"1", "-", 
     SuperscriptBox["x", "3"]}], 
    RowBox[{"3", "+", 
     RowBox[{"4", " ", "x"}], "+", 
     SuperscriptBox["x", "2"]}]], ",", 
   RowBox[{"-", 
    SuperscriptBox["x", "3"]}], ",", 
   RowBox[{"1", "-", 
    SuperscriptBox["x", "3"]}], ",", 
   RowBox[{"12", "+", 
    RowBox[{"13", " ", "x"}], "-", 
    SuperscriptBox["x", "3"]}], ",", 
   FractionBox[
    RowBox[{"1", "-", 
     SuperscriptBox["x", "3"]}], 
    RowBox[{"3", "+", 
     RowBox[{"4", " ", "x"}], "+", 
     SuperscriptBox["x", "2"]}]], ",", 
   RowBox[{"-", 
    FractionBox[
     SuperscriptBox["x", "2"], "2"]}], ",", 
   RowBox[{"4", " ", "x"}], ",", 
   RowBox[{
    RowBox[{"4", " ", "x"}], "-", 
    FractionBox[
     SuperscriptBox["x", "2"], "2"], "+", 
    RowBox[{"Log", "[", 
     RowBox[{"1", "+", "x"}], "]"}], "-", 
    RowBox[{"14", " ", 
     RowBox[{"Log", "[", 
      RowBox[{"3", "+", "x"}], "]"}]}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"35f0b53b-50c0-413d-93f6-7b1a4bba842c"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderscriptBox[
     OverscriptBox["\[Integral]", "5"], "2"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"2", "+", 
       RowBox[{"2", "x"}], "+", 
       RowBox[{"3", 
        SuperscriptBox["x", "2"]}]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"b098a96e-24e7-4c1c-addc-9db202c1075c"],
 "."
}], "SubitemNumbered",ExpressionUUID->"5278fed7-7bc9-4ef0-b5b2-ccf41e934d68"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", "2"}], "+", 
    RowBox[{"2", "x"}], "+", 
    RowBox[{"3", 
     SuperscriptBox["x", "2"], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{"2", 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"2", "x", 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "+", 
     RowBox[{"\[Integral]", 
      RowBox[{"3", 
       SuperscriptBox["x", "2"], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "+", 
      FractionBox[
       RowBox[{"2", 
        SuperscriptBox["x", "2"]}], "2"], "+", 
      FractionBox[
       RowBox[{"3", 
        SuperscriptBox["x", "3"]}], "3"], "+", "C"}], "=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "x"}], "+", 
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["x", "3"], "+", 
       RowBox[{"C", 
        StyleBox[".",
         FontSize->14], 
        StyleBox["\[IndentingNewLine]",
         FontSize->14], 
        RowBox[{
         UnderoverscriptBox["\[Integral]", "2", "5"], "2"}]}], "+", 
       RowBox[{"2", "x"}], "+", 
       RowBox[{"3", 
        SuperscriptBox["x", "2"], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"2", "\[CenterDot]", "5"}], "+", 
        SuperscriptBox["5", "2"], "+", 
        SuperscriptBox["5", "3"], "-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "\[CenterDot]", "2"}], "+", 
          SuperscriptBox["2", "2"], "+", 
          SuperscriptBox["2", "3"]}], ")"}]}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"160", "-", "16"}], "=", 
        StyleBox[
         RowBox[{"144", 
          StyleBox[".",
           FontSize->14]}]]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"1d896623-4b5f-4a3b-af37-42c78590f871"]], "Text",\
ExpressionUUID->"fc7afff6-0b1e-4a66-ad3a-680ddb3d9871"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"2", "x"}], "+", 
      RowBox[{"3", 
       SuperscriptBox["x", "2"]}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"2", "x"}], "+", 
      RowBox[{"3", 
       SuperscriptBox["x", "2"]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "2", ",", "5"}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"ee2aa29e-400b-4fc7-8c32-22f760b51994"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"2", " ", "x"}], "+", 
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["x", "3"]}], ",", "144"}], "}"}]], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"6ae3da5f-1690-4018-b2e4-08b85b047858"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderscriptBox[
     OverscriptBox["\[Integral]", "9"], "1"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SqrtBox["x"], "-", 
       FractionBox["1", 
        SqrtBox["x"]]}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"edca483c-14f7-4eda-b692-32cdea5d947d"],
 "."
}], "SubitemNumbered",ExpressionUUID->"ff0ff674-96e6-43b1-ae33-24a2d7bec925"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Integral]", 
     SqrtBox["x"]}], "-", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["x"]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      RowBox[{
       SuperscriptBox["x", 
        FractionBox["1", "2"]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "-", 
     RowBox[{"\[Integral]", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         SqrtBox["x"], ")"}], 
        RowBox[{"-", "1"}]], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      FractionBox[
       SuperscriptBox["x", 
        FractionBox["3", "2"]], 
       FractionBox["3", "2"]], "+", "C", "-", 
      RowBox[{"\[Integral]", 
       RowBox[{
        SuperscriptBox["x", 
         RowBox[{"-", 
          FractionBox["1", "2"]}]], 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"2", 
         SuperscriptBox["x", 
          FractionBox["3", "2"]]}], "3"], "-", 
       FractionBox[
        SuperscriptBox["x", 
         FractionBox["1", "2"]], 
        FractionBox["1", "2"]], "+", "C"}], "=", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{"2", 
          SuperscriptBox["x", 
           FractionBox["3", "2"]]}], "3"], "-", 
        RowBox[{"2", 
         SuperscriptBox["x", 
          FractionBox["1", "2"]]}], "+", "C"}], "=", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"2", 
            SuperscriptBox["x", 
             FractionBox["3", "2"]]}], "-", 
           RowBox[{"6", 
            SuperscriptBox["x", 
             FractionBox["1", "2"]]}]}], "3"], "+", "C"}], "=", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          FractionBox[
           RowBox[{"2", 
            RowBox[{
             SuperscriptBox["x", 
              FractionBox["1", "2"]], "(", 
             RowBox[{
              SuperscriptBox["x", 
               RowBox[{
                FractionBox["3", "2"], "-", 
                FractionBox["1", "2"]}]], "-", 
              RowBox[{"3", 
               SuperscriptBox["x", 
                RowBox[{
                 FractionBox["1", "2"], "-", 
                 FractionBox["1", "2"]}]]}]}], ")"}]}], "3"], "+", "C"}], "=",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"2", 
             RowBox[{
              SuperscriptBox["x", 
               FractionBox["1", "2"]], "(", 
              RowBox[{"x", "-", "3"}], ")"}]}], "3"], "+", "C"}], "=", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"2", 
              SqrtBox["x"], 
              RowBox[{"(", 
               RowBox[{"x", "-", "3"}], ")"}]}], "3"], "+", 
            RowBox[{"C", 
             StyleBox[".",
              FontSize->14], 
             StyleBox["\[IndentingNewLine]",
              FontSize->14], 
             RowBox[{
              UnderoverscriptBox["\[Integral]", "1", "9"], 
              SqrtBox["x"]}]}], "-", 
            RowBox[{
             FractionBox["1", 
              SqrtBox["x"]], 
             RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             FractionBox[
              RowBox[{"2", 
               RowBox[{
                SqrtBox["9"], "\[CenterDot]", "6"}]}], "3"], "-", 
             FractionBox[
              RowBox[{"2", 
               RowBox[{
                SqrtBox["1"], "\[CenterDot]", 
                RowBox[{"(", 
                 RowBox[{"-", "2"}], ")"}]}]}], "3"]}], "=", 
            RowBox[{
             RowBox[{"12", "-", 
              FractionBox[
               RowBox[{"-", "4"}], "3"]}], "=", 
             RowBox[{
              FractionBox["40", "3"], 
              StyleBox[".",
               FontSize->14]}]}]}]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"9e8aba8f-ebba-40dd-a25c-f711141834ab"]], "Text",\
ExpressionUUID->"1212fad0-9e87-4309-a2e3-a806d3105a1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Simplify", "@", "2"}], 
     SuperscriptBox["x", 
      FractionBox["3", "2"]]}], "-", 
    RowBox[{"2", 
     SuperscriptBox["x", 
      FractionBox["1", "2"]]}]}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SqrtBox["x"], "-", 
      FractionBox["1", 
       SqrtBox["x"]]}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     SuperscriptBox["x", 
      FractionBox["1", "2"]], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     SuperscriptBox["x", 
      RowBox[{"-", 
       FractionBox["1", "2"]}]], ",", "x"}], "]"}], ",", 
   RowBox[{"Simplify", "@", 
    FractionBox[
     RowBox[{"2", 
      RowBox[{"x", "(", 
       RowBox[{
        SuperscriptBox["x", 
         FractionBox["1", "2"]], "-", 
        RowBox[{"3", 
         SuperscriptBox["x", 
          RowBox[{"-", 
           FractionBox["1", "2"]}]]}]}], ")"}]}], "3"]}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SqrtBox["x"], "-", 
      FractionBox["1", 
       SqrtBox["x"]]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "9"}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"24c523fe-8ec9-4057-911e-2469bf949433"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "2"}], " ", 
     SqrtBox["x"]}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", 
      RowBox[{"3", "/", "2"}]]}]}], ",", 
   RowBox[{
    FractionBox["2", "3"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "x"}], ")"}], " ", 
    SqrtBox["x"]}], ",", 
   FractionBox[
    RowBox[{"2", " ", 
     SuperscriptBox["x", 
      RowBox[{"3", "/", "2"}]]}], "3"], ",", 
   RowBox[{"2", " ", 
    SqrtBox["x"]}], ",", 
   RowBox[{
    FractionBox["2", "3"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "x"}], ")"}], " ", 
    SqrtBox["x"]}], ",", 
   FractionBox["40", "3"]}], "}"}]], "Output",
 CellLabel->
  "Out[130]=",ExpressionUUID->"efe51ee9-1756-4380-a68d-88cb5d30a54f"]
}, Open  ]],

Cell["\<\
Fa\[CCedilla]a um gr\[AAcute]fico e determine a \[AAcute]rea da \
regi\[ATilde]o entre a reta e a curva.\
\>", "ItemNumbered",ExpressionUUID->"afd24148-cb9b-4eb0-a9a4-3bc38d4b78fd"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    SuperscriptBox["x", "2"]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"fe63f602-9e0d-4983-8391-17c3521783a5"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"2", "-", 
     SuperscriptBox["x", "2"]}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"87e4ab12-ac3e-4d7c-9ba7-83af7f21460f"],
 "."
}], "Text",ExpressionUUID->"c93c8066-de81-4bf4-b770-664a633dcd3f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", 
     RowBox[{"2", "-", 
      SuperscriptBox["x", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5"}], ",", "5"}], "}"}]}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}]}], "]"}]], "Input",
 CellLabel->
  "In[144]:=",ExpressionUUID->"e2f1f888-19d5-45fc-ba92-8ed46293c0e1"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.9, 0.36, 0.054], AbsoluteThickness[1.6], Opacity[1.], 
      CapForm["Butt"], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$46512#1"]& ], 
    TagBox[
     {RGBColor[0.365248, 0.427802, 0.758297], AbsoluteThickness[1.6], Opacity[
      1.], CapForm["Butt"], LineBox[CompressedData["
1:eJw12Hk4Vd33AHBRiSQpeUtJlJAUiSRWIUmZSpEMUYbXUJIhEUJClEoqrogU
KVMqhJUpc+Z5JpIyDxnuvee73+f5/f46z2ff/dy77zlrrb322W5x9bQlKwsL
C+8yFpb/rlKwcYSiKGymGyb+d726IBK4sEhhon105s/fFKZ9kBadnqVwxKJv
uL6FQhkxLYshMl7cb12ekUqh/Dr/9ioy3rj3qu0zMwqPDExWPCfjapSV5BIy
8fTd6uT9ZPzG9aVUQT8GutX4O1jnM/FQ+uePXbxL2Ni4eqTAnIEZ3d8PZs7M
4tavVzfIb6GjkBpX0JTFJH60K16xtmsR6U+esuXLjuDFEOmJNt8F1N9saSZl
1IfzjzwCEebRR/+X0RRLA8Zzd2961jeHLGJs+v2b3iBNU9qpIWgW95XdiQvl
KgNfe/Mb4idmkGW0TWjXtjbwYHvr5jQ6hTTGyJFZ+QEw96nZ0Zw4idp925ID
lv+CJ3mDz2i2Eyj8O6qdRXcMcnrEuN4Jj6HrUeZvu5pJEOE5oqL/4jcO/YyX
79swAxkSgbb9A8M4L9ZUOKI3Bz0l6UJyckOY28jSHaI5D4OST2Tw0wA2B59K
dB5dgHVeSXJSy/pwodfCwcxjCQI+iZXx/O3FOVXT5jyfJVgce3N++k8vpvm3
cW0KWIJ+s9eeWa29aBij018StgQZR+MLVdJ68ZbCob0LCUtwekW0toFZL25Y
xqH3rWYJdm3aXs3i0YOuXSGZi0J0kJQbl0yY7sR1lXuWKrPpYCXl7Z3d1Yn5
cToWmE+HGNG19dWlnTj00nZVahEdePn3us1FdWLixpB1ftV0+Pv3SsFxtU6c
aPPkZ/bSoTB77OxIeAc+KeWbAnYGGCqNee2Va0cp2Nk/pcuARwe86lSF2lF5
pb3YlbMMqNzDvcOQsx3LZpLfD55ngLKgVLlPdxvqaPC7lFswQIRyWF8f0IbC
5VF/LzkzYOzr6BvnllbslDau/BHBAD+10drsGy0YE5Pznq+NAYUaf3RkL7Ug
jUNEbGUXA1i0fn9P0WrB1F7p5dO9DPA8+6sqXrgFNzSr9BUMM8DVarAstKoZ
u7uk98rOM8AmsOuruVAzXjdX22y3kQmnqqrTOMoakXZQcY+wLhOCa6v2+mc0
otqxa50vzjChrLEyhUlrRFbUGuU3YMKxrvJ309caMXdhYT9lwgTlsZLELoFG
lA7ZdjbOjgn7ePJj0682oMDOmKFDAUzg008JO89fj+Oijuofs5iQIXov5xhb
PR5Yt3ZX8Bcm6C5Y/5Aer0N/hlvfhXzy+y+2H+QsrUPlzjcDs0VMYA6H9+S4
1qFQhvfW5TVMGLrlIbWluRaf41rroB9MuKLz8FmeeA1amafrya+hIHFG88+T
ZTVYGxJm92YtBf3Plx+50vYd1XIUzDbwUnDuh9tPwaDvqC4w0vBjIwXgbirn
M1yNWbOFU2ZCFPDE725UeVOF+lxnV6IMBRlzJWvLdlTg5a+L/kJnKbj/Nq5Q
eaEc20I/FhsYUGBn6u3ysbocQ8O/6N47T8GObwc74lzLMUMrSeunCQURT5Jf
3yorw99XVnc4WVFwU/ah0n77UhR0GFFtdSXrGXaYSDpSil7fDTUab1Cwn6YZ
L8RHPv+X93nVTQr+sC3n4M7/hv9oWm/L8KLAtMG1cXjtN2TmPEXdAApUnIzt
XnwoxnuG67U7wykQFFUQ5AssxmatA/zRERQstfHV3TMuRnPPOEmjZxRkHq2R
c19RjDJ3TA+XR1Eguk6FVd+gCIuPmYzfjKOAM23Xc46lAkz2dYmXTKUgoWMw
9Jd/Pnr95lErL6Gg3XNjTPT+fMz0t6lgfKOAW/B4ml5/HmomRW3cW0aB68XE
+mzIw0fh4SyBFRSoD9ryBy9+wcjp2s3raygYHhuPlXDMRr+G6zb3WyjYEiaU
0S2Yje+F/U89aKVAV1qv6FF1Fsoxrs6FtFGQdT1jcFEiCy3126O8OigImneW
qBz8hIfuLUgq9lAgwbr4we5CJn7dbGGzaYjcn3iJkm2cmdi1bffbIeJHahea
G7I+4Pm0mvS0nxQsBuTOK278gFevJ/Mq/qKgcrW3ElddOq73fb9Z/A8FLO9T
tb96p6NE/+l7ncSy2r1mzlLpGFvdUBAySgEt7Khv5700TFK38RkYo6BVYtX9
86EpKFvQoWo7ScERh3/TCkbeo5qnyQDbFInH1Ip6cY33mFmYoxFJ7C4byr/I
+g7TJ9kt86Yp2KzM+zLyRhIKt/4Z6JylwNfnehFrcyLuGdPMMJ6j4Hdh46Dt
/kSMeOCv3kace/yphOLYa7zrHPy17C8FJnpbMjsuvcKeb72LPgskXqZnFVyK
41Ep9xz1g9gzoga5d8Zj2OryX8cWyfo7fCuPDr1Egaw4RyaxpJexXof6S9Tj
41xzbomCL0JyLc5vYtGryuHBW+LMyvoSnboXmKMhoa5Jp6CRJ6DO91E0Vqzx
u/mEePqsQtfHMzSskWwN7yKW6Y2ZEWh+jnk33DwuMyjQ23mGRefpM3ydUHA8
ntjRdiWXr+FT9JdctdhNnDpjLzLcHo47NIJ5tJgUfFcQ2itAe4yDnSXO3sRj
Xg2HtE0eYXQlIz+FeE1xgPptwYeouUFmvJ3YkNf5lQ0+wLFPFiuWUxQ8pbV/
+X40FAM/PFgmQdwserRBtjgY/+HMHjhFvCH9zUikeiDG5HQn2xOfUeRmXVZ+
B7eUsBgFET8qcd5kfdIPH4hvG4sjrtXp2Fdd7YPzPxVssokFM/3CrGI90YBF
r6yKOKpMF2US3PC902XuLuJ/uraOMZOccEHZ+RBpNGD3QJNChIkdKlr6nJoh
FuVyfCplbY7XBwPVloh9GsUaBYq0MA5DhUk/ApJru2xX7JGFb9P3h/5z86Rv
DM+8IfTdDgljEE/o7Jq66mQFU/8GCM0TezxWr7CTdYTFZM+IcWKml3tUzF4X
mD9+dWrgv++3fWffIHETfiuZyjYRs53rUWIX9Yam0BPGRcRFQkF3o3l84ZO8
tG0KsX+EsKP8fX8IUeQzjSBW58o1rFt9F84/n5X3IGb3PXvULigItujV/zUm
Lvs7Jr6CPQSaLJKjFYmDHQJ5Y/zvg/93H3F+4teTYbe23A4DifDTUePkeVlb
S1h9Yj4Cwz2/9z0l1hB2M/JTCodelgx9K2KxriJtXc8nYCblYipDPHLaRH5k
4SkoP50QKSDxUrHm7e7PB59DTH1ijx9xctncNn+3SPhrbXJbldheOWyV4CwN
AmO/uGaTeNRa6KSP7H8BhaqWFVeJpTLFJz87xcD0kdXLRYjnw/v+iM3HgtyJ
U+I+JN6zOT2aCl3i4fjDOEU+kh+xe/gaUoVfgbOZDrwl+RSgm1pLq3kFau9u
0xSJ9SMGKl3FX0NlgeulM/Pk+Ww/VSjRlQhunXEiBiRfW9SGkD84CbJjPKa/
k/zOt/bJWy7/FqL72raoEt97n5nVHZYMWn2inkIzJD4UtqY+UkuBk7WsDqmk
nnAZf37nPZkCLwPZOTiJp7303tq/SIVIfMi8OEHBxf7C0yKeaXA9SW6ObZz8
P7G/WoymdCiyL+QXJPWr/IOZWnpQJnSn94nED1JwuESyaFdvJpjoKxsW/aAg
rXnh6Au5j+DlIjTUM0D2q4XHcG/gIyTud+Hm7qfgMpQdslT6DLSYiw+Vuymg
KvZJb5rMBsYBuDjRRIFTJyP1wfEcSCiclmxupGBotEJq5YscGK/ecyargYIq
HkvJac0vYHdR5t21Ogoizz3fVf0qF1hdboVlVVFwoH+Z4G1DhGRjAeGnhWT9
OQaT+5IQlk4qW54vIPfj0fvi3gUE1dgnN//5SsHql+8OxGp9hWy3PoHQPAro
uoad1NhXUOofPaibRUFXWqo4ShdCUkJbp9J7sl/RjNbzGxWC4w8V1epkkk+B
KxhXfAtBKrDX4/xbUm8uXqgVbCiEh8ysSzZvyPPhYXfzci6C8dfday6+pCDG
0bRY6XMxcA/RKz+R/ZVmzJHypKcYTjq/O7v+MQXPNDKfjrKXgLd1WLr9QwrC
hDjtog1LoMZztofvPsm/2o/rGAslsPKSLL/KXQrM960xyz1cCq1b74wvc6dA
ZOLLwqHCcuDQcjq+zYjU62pV/5nRclha36c6QvqL5reV3CmbKsDovIV/Ouk/
gi07RLZfq4ALZrQ6WT0Sb+2LWuxCleBoOEbj1iDrL1GIa7hVBb1Mjr/cBygw
ivqsaa9QAz1bhLJVuEg9vwFNOy1r4Fx6t3wEB9m/z5Wa9YTVwKHi1MXBlRQU
8LQ4nx6ugWOWQaduLiP1UtVDh3ayFhzCN293nWOCR1aku+9iLax4kxma08OE
E/Ft1dqG9XAmutTZNZUJE3dSrEoc6sGoumu3+TsmPLPxoxT96mHVbNQJjSQm
DO/ZIy2eUg8Gu3myV8czITDLJ5xteQOU7G+1to4g/Wb1rgtZqQ3Q82FouZMn
E47PuwxvZ2+CtdcYhxuPkf5Ti5dt9mMLXOhZl1BVzYD75hyTC+UtMFcGuXwV
DGh1YelhdrXA1x0D6Re+McD2xVjOqpWtMCgTfLA7n8wfr3Dacq4V7JPOf8hL
JfMf+vWrzrWCE8UwHQoj85tnCh7JtYORjvH9btLPPzBr8dn3uRNoXle1bEvp
EPDnMAxVdYJ7tVVcUCEdvNzjGFH9neD4JFsjIY8OVx473GTn7oK0sGtBdR/o
oF3K5tx9uYv0fbs7GDF04N67zzqEtxskpUswwY0O95mBWsMOPbCOehwqs4MO
pdpb1+jy9kH3H5riEaclGN3O51UfOQAl5o63aMwFcHHebf5g4xCoCJi6u1yc
h5ZOntNWZcNAb9cuBOs5uOh++Cf7qd8gWCvI6n1hBop2ywcXrRiDCeUg8Wcj
kyDKkTv8SmMCZFXsPre2j8HWXLtjKwInwcYwZ7A3/BewLLImOfVPAdeGHJkp
uwH4q5dnWrJzBnTN5eMH/duhQ9ZMYKf/LIRtuURrCygDRwOedcKdc8CibbDs
pGgCbgr/Ybh86zzwRBcnrTSpw5QLsW+mbyxAMf2kL79AHxooeWuU5S2C7CcZ
VslLvzDd1EH4EH0JYr8fMa6amsB5TlW2bHJuClg9ORlUNoun6xTltj5jwveN
tE/rfRaRU3F1QW406fsv/PoR8WQRC161nzQmcWTbvo5dMHkR991wN49KYcL9
uzOiB5sXkXvb55BNJUy4/IKlKYqc0MvtZQb4psi5J3//iFD7Eh5ZJR7GfYoC
4dIVC9sPMnD+2vzmFJJXfwxy4kS0GZjaUZqgRfJwg4jmEfHLDBRMtfoSYkHO
ATZL546EMZB+9tUQJ8ljnrRXU9HDDPwcv02J/fV/fSzvwMZIJl5ZM176mtQd
SZubFQZpTBR1yz+tnk7Blba8BNo3JoZrmtjcySV5aNcsLzPNRKfJyMdspG4O
aWpXhJyiUOKCrWA86Yvr9cN0Ry0o7CtWSFIhdXjz8/cVeu4U6j5rzb9N+tjG
WvdI0dcUrmJNPLGd7ANqxWITEbkUop1b41eyr/BOZSisbqDQtUnd7CLZ11SM
/nHz+0Xh/70Pgf9/H/I/ogFz+w==
       "]]},
     Annotation[#, "Charting`Private`Tag$46512#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Automatic,
  FrameTicks->FrontEndValueCache[{{Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}}, {{Automatic, {{-4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}, {Automatic, {{-2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}}],
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.999999918367347, 1.999999918367347}, {-5, 5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[144]=",ExpressionUUID->"9e550ddf-5805-4b37-b764-d2e9a8ca9ba0"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["x", "2"], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "-", 
      SuperscriptBox["x", "2"]}], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"2", 
       SuperscriptBox["x", "2"]}], "-", "2"}]}], "=", 
    RowBox[{
     RowBox[{"0", "\[Implies]", "\[IndentingNewLine]", "x"}], "=", 
     RowBox[{
      FractionBox[
       RowBox[{"0", "\[PlusMinus]", 
        SqrtBox[
         RowBox[{"0", "-", 
          RowBox[{"4", "\[CenterDot]", "2", "\[CenterDot]", 
           RowBox[{"(", 
            RowBox[{"-", "2"}], ")"}]}]}]]}], "4"], "=", 
      RowBox[{
       StyleBox["{",
        StripOnInput->False,
        SpanMaxSize->DirectedInfinity[1]], 
       RowBox[{
        RowBox[{
         RowBox[{
          StyleBox[GridBox[{
             {"1"},
             {
              RowBox[{"-", "1"}]}
            }],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox[
           StyleBox[".",
            FontSize->14],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], 
          StyleBox[
           StyleBox["\[IndentingNewLine]",
            FontSize->14],
           StripOnInput->False,
           SpanMaxSize->DirectedInfinity[1]], "2"}], "-", 
         SuperscriptBox["x", "2"], "-", 
         SuperscriptBox["x", "2"]}], "=", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], 
           SuperscriptBox["x", "2"]}], "+", 
          RowBox[{"2", " ", 
           StyleBox[".",
            FontSize->14], "\[IndentingNewLine]", 
           RowBox[{"\[Integral]", 
            RowBox[{
             RowBox[{"-", "2"}], 
             SuperscriptBox["x", "2"]}]}]}], "+", 
          RowBox[{"2", 
           RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], 
            FractionBox[
             SuperscriptBox["x", "3"], "3"]}], "+", 
           RowBox[{"2", "x"}], "+", "C"}], "=", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], 
               SuperscriptBox["x", "3"]}], "+", 
              RowBox[{"6", "x"}]}], "3"], "+", 
            RowBox[{"C", 
             StyleBox[".",
              FontSize->14], 
             StyleBox["\[IndentingNewLine]",
              FontSize->14], 
             RowBox[{
              UnderoverscriptBox["\[Integral]", 
               RowBox[{"-", "1"}], "1"], 
              RowBox[{
               RowBox[{"-", "2"}], 
               SuperscriptBox["x", "2"]}]}]}], "+", 
            RowBox[{"2", 
             RowBox[{"\[DifferentialD]", "x"}]}]}], "=", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             FractionBox[
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], "\[CenterDot]", "1"}], "+", "6"}], "3"], 
             "-", 
             FractionBox[
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], "\[CenterDot]", 
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}]}], "-", "6"}], "3"]}], "=", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              FractionBox["4", "3"], "-", 
              FractionBox[
               RowBox[{"-", "4"}], "3"]}], "=", 
             RowBox[{
              FractionBox["8", "3"], 
              StyleBox[".",
               FontSize->14]}]}]}]}]}]}]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"8a8773a2-5bbb-4678-a9de-94aa07b94890"]], "Text",\
ExpressionUUID->"9d80d35c-b74e-4e0d-a1a5-9c706d764f73"],

Cell["\<\
Tirar as integrais das fun\[CCedilla]\[OTilde]es depois subtrair as integrais \
n\[ATilde]o funciona.\
\>", "Text",ExpressionUUID->"5b83971a-b738-452c-b981-59da27445af9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], 
       SuperscriptBox["x", "2"]}], "+", "2"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], 
       SuperscriptBox["x", "2"]}], "+", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], "*", 
       FractionBox[
        SuperscriptBox["#", "3"], "3"]}], "+", 
      RowBox[{"2", "#"}]}], "&"}], "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}]}], "}"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], "*", 
        SuperscriptBox["#", "3"]}], "+", 
       RowBox[{"6", "#"}]}], "3"], "&"}], "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}]}], "}"}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[141]:=",ExpressionUUID->"f0e464e5-a29c-4bfc-bff6-add0ec58b4cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"2", " ", "x"}], "-", 
    FractionBox[
     RowBox[{"2", " ", 
      SuperscriptBox["x", "3"]}], "3"]}], ",", 
   FractionBox["8", "3"], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["4", "3"], ",", 
     RowBox[{"-", 
      FractionBox["4", "3"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["4", "3"], ",", 
     RowBox[{"-", 
      FractionBox["4", "3"]}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[141]=",ExpressionUUID->"13c31ded-e695-445b-aba3-f6ac78684bfb"]
}, Open  ]],

Cell["\<\
Fa\[CCedilla]a um gr\[AAcute]fico e determine a \[AAcute]rea da \
regi\[ATilde]o delimitada pelas curvas.\
\>", "ItemNumbered",ExpressionUUID->"032627a8-b61a-48c0-9778-6a870c2bb7ea"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    SuperscriptBox["y", "2"]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"e7378355-8078-45c0-a490-1285fb9006d4"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{"y", "+", "6"}]}], TraditionalForm]],
  FontSize->24,ExpressionUUID->"8b7c0de1-616b-41b8-be6b-8637c4694df4"],
 "."
}], "Text",ExpressionUUID->"11d57ba4-4f13-43b6-85c0-3d434c1ab8af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", 
     RowBox[{"x", "+", "6"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "13"}], "}"}]}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"2267d77b-1717-4069-8139-cb19126f6493"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.9, 0.36, 0.054], AbsoluteThickness[1.6], Opacity[1.], 
      CapForm["Butt"], LineBox[CompressedData["
1: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
91PCxnqmQ08zBLH//8f/Ay5hmx4=
       "]]},
     Annotation[#, "Charting`Private`Tag$4066#1"]& ], 
    TagBox[
     {RGBColor[0.365248, 0.427802, 0.758297], AbsoluteThickness[1.6], Opacity[
      1.], CapForm["Butt"], LineBox[CompressedData["
1:eJwtlHswlXkAho9zcjkH5+PkEDk45xdDbElhU+33ZktRGizLKte22qhwduto
bMSyaTelorFRmXEpaVi3rHX5vsRQ41JRrtVECSnkkttm7cz+8c4zz8zz9ysN
DvM4wOVwOK5L+49raN3hxUWKfcIOiZcUYbMkcXaOYi+q9CpUlDn4s2Sd2cQU
xbrtbunSEHBgY+4aPPCOYls6iq/p63Bgrx3f3dRBsQ8+RJmuN+cA/eMP/yik
WNZQaHvQjQOPM8356wMotiDSxrMpkwNFa/zRQzVC9qx11KW0rUpob1cfvhek
yVpZToq/us6FhA3TsTfUYPvp5HeN/TyUhdYpU88F7K6UTXNjMmUEnls31hXH
ZzN/bKHMTqlg5lJUIkOrsWpH4xVgVZElfKGf9kqF9RuXDhwy4iPDZZ287awy
+31ZS5LVCQHijgRFWjgvY6MvXz/z7K46oni3FfL3XDZhwSsxSaSJoNOtq57d
UmJvxFj3WHgLkVr9Ji0jhMOGOhoc2p9K4e+X5hp3ZJ8ZUePUgqdCC0QLjp7X
55lP82GjISu0Ubw6MaSvf4bxnPI7oNqgjZf1RSZ2dtNM4vk2hVwuwhurVBvm
7gTTUOq73k20HNrReXZrlMaZnzO95KXMcljZjVrlTIwwDvrBvr8H6eCXbe8f
VUS+ZcK9++oHtcQQexYkf6fXx5yyHW7WqRajeLqealzVzaRm8mJK/HSR0/Mm
aSi+hSGPk0s61fXg525Y2rO/lKk8v/ZieIEeKgRRT2uPl9CWI17qHa4rYNun
ZBTr00qLqDG1urkVIGOVsw61XTSXSS8kGfpwzupq3uPTRx/eUNnF32WA7a4i
3lTZWzrPOTizZtoAFwI6TluXj9Af3xloDVxZiYY9Ek030Thd/M0OXso2Q7yX
iqOfXJ2go3Ym3CgdMMTxnyyDLuhO05LnLp1ZCRJ09Gp5HGycoe3s41P0bYwQ
eHLzW9Xd87SPUeusUpsR7lva/3Zf+TM9/jCpLzzWGGb8qsHsnRy4cNc6WIhM
IKkK3a6cqATVUV93pWATcOa4efI+Lk7X4HbGXyb45F7tX2+6DNGehd4RfCl6
NgSsNI1Xhn1zhxM/SIpwby1tWa8KesXb4tXKpdBPee2zTKIGFdONultVZSjY
m3lzIpKPEd3Boc3+MnhvidnZWC3At63GInmhDEX+R2UOC+q4452eKFyUYUbw
Na/CSxM1tY9wzIvA4/EmO0maEJ6T511VcwkEm9TvVV0TorbF0TrsJsG97O5d
+7KEsM6bFnXcIrCOPBmUXiCEhr9/Z24+gdC4/Jx+vRB1DV/sdyoieHDEpl/8
UQib9KbIhCoCqFkkC3dT0HIUZPPaCGYiZgwK3ClEG9b8GtpOUNjTkOPqTWFk
OuJw21MCo8KDleeCKTTmd63J6iRY8MoeEJykECPOq3B8QVCeZbxFNZfCh8Ed
rbFDBMc0Rxty8ynsuz9fNDRMYKao8XAqovDwWmGK+whBiovfDwlVFHI89Hyl
owTy8auXeW1LfdXAa3aSYPXeEKOszqX+ytUG82mCV3Ub8xxfUPgyYs/t5E8E
bmmdNbFDFHTM7oYFzhGocW85S0cpxHFCPBrnCZhQRTs7SWGsW2Jr/Q/BiadO
AYFzFPzLHuulfSb4/7/QdCFhbnGR4F9VCCGo
       "]]},
     Annotation[#, "Charting`Private`Tag$4066#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Automatic,
  FrameTicks->FrontEndValueCache[{{Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}}, {{Automatic, {{0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {7.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {10., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {12.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {7., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {8., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {8.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {9., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {9.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {10.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {11., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {11.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {12., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {13., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {13.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {14., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {14.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {15., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}, {Automatic, {{-4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}}],
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3.999999836734694, 3.999999836734694}, {0, 13}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"004f831f-15db-4dae-83fa-91d88540f1cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["x"]}], ",", 
     SqrtBox["x"], ",", 
     RowBox[{"6", "-", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}]}], "]"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"09397d27-5874-49f4-b13e-096e6a4d27cb"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.9, 0.36, 0.054], AbsoluteThickness[1.6], Opacity[1.], 
      CapForm["Butt"], LineBox[CompressedData["
1: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
/DfQBF/9
       "]]},
     Annotation[#, "Charting`Private`Tag$3705#1"]& ], 
    TagBox[
     {RGBColor[0.365248, 0.427802, 0.758297], AbsoluteThickness[1.6], Opacity[
      1.], CapForm["Butt"], LineBox[CompressedData["
1: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
kTinzS2230lgzZSZbHmZREHeWdt9HgT+DZ68KX0=
       "]]},
     Annotation[#, "Charting`Private`Tag$3705#2"]& ], 
    TagBox[
     {RGBColor[0.945109, 0.593901, 0.], AbsoluteThickness[1.6], Opacity[1.], 
      CapForm["Butt"], LineBox[CompressedData["
1:eJwVkGs0lHkcgI1LGNO8bpmEuXidJuOSNqt0e39Rm8U4leSccQpTLm3jkqWt
SBJrJJpKuTUrkt3OLF0Odu225r9MCc1UDDrRKcalJnabmMy4NNt+eM5znq8P
i5+yN87YyMiI+4X/Lc7mL1t3uGjb6UnuR4OBBrI+Zmgk8wgxkemgHVqkgeFR
2zkm8yQRZv167jc9DcSomGHGLCSY/qlLKTM0EGzNSJpjVBAd5y9bvJmgQd9C
YukHxm3CwnuQjuQ0MB8aZU8zWonS9JiQnCoa1HRXH3vP6CIkpO/rjDbQoPFO
4ZDA+yVhFrfrK8cDDpBAPK+YSlMRdi8eCmovrYDkcXdVU+M7Ym9H5SH3bnsg
s/LYrzd+INrm6H6PNXZQYt3DqYmZIYY3c5sH2XbAH9onNXnyiVjTxbE2hNrC
sYd5/BT2PFGnOMh2O24D91Ip4Su/XSKUqi3vWxusoSbzqNon0gii80pXPP0F
g9zqxT2zUyTIjjFptLKjglHfG3hwygSMvBjSwHwKrE6PP7GPYwYviyoKJP1k
GNOW7bf6axk4kxNvzwZYQvD4d6cvH7OAllVXc5NKzCFsTORBp5PhvlOKcmTE
DNQd/JzHDVbgsEV8ZsNeU/C2GXAJjF4Ovf+4jz64YQxkQhs7PEOFT4j8E04h
wa5p3pxrhDWMBZe6pks+Ey/aD5N4njZwY1YwXxa2QDQLZQeZWhvwfDWdl+2h
I+LNMt4oFLaQqPbIlslmiUNpmc2USjtI97PlyMs0xNoED0VorD0IH9WVVGin
iKe2nlYZ/itAeKS6PtJ3gvizMbfK08QBdtv37/KTvyYySZzdT1596bfRS5vw
XoI8fCoouYkGOUtBI0lj94nxelZpddZKgNYjFuNsqbR0jaNpa4QjQOHl7aKo
fqmoMr4zlrkKcpS+m6kmI1Je6QEFZXIVPKudSovfOCnV7bilr25zAsTmyA2z
01LVeMCJ9gJnuFBmNWLJ+Cit3brOSR7rAsJPMoFvgVbakJ9hk+BFhyaHgZ3X
m3XSgohDISZaOjjvL/ZarlyQfj1cc7tAzgBlakE93c8gLXevapCHMCGmXtDi
t5aEzqDi8pBWJiySNvC9x40R1yniVrcbC3yT9l3lXDFF25M7o2wKWWDa6pKy
020Zqnbmuz3RsiArTXjJZ9AcuXX8fC0syhVElGrepiRLJPJq5/S2uQK0WEiC
Fsgofsb0eRcHh3K53Q62hIL49z4yCy/iIHzYfc5tGxUJcsMXgy/hcNcyTOOx
k4oywpsGKVdwUHKfH1wfSkVCbUaJ6BoOzIFB/wAeFTX66xfKxDj8PjH2b/Rx
KtL/bRiol+AwZm6IqmqkIlEvpVjWiQMEr/e1ZWCo8mZS4o9dOCSWtNQ4rsbQ
zXRFYFAPDhd6/TGWF4ZaHETzPQocXvBAvXYzhoZ5dol9/TikHuXe4EZiiK1y
DBxV4XD9QgKl8CKGfJpO0evGcUDP1CdF1zC0KX9IHzeJw1v75MkyMYZC2eK7
79Q4+IjT2+slGEo7yqRrNDg8bjh7QtaJoawtZ/X3Z3D4oDGd6FFgKH/5qDJd
i4O9nzC8rx9D5XduFul0OMS0lXiPqjBUm2Oa8Mf8l1/GttffqTEk2RMXkLWI
w6/fXLXUaDDU5PrIZdtnHJ6dX/mDToehtpnVeoMBB52iasxgwNB/fZY77A==

       "]]},
     Annotation[#, "Charting`Private`Tag$3705#3"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Automatic,
  FrameTicks->FrontEndValueCache[{{Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}}, {{Automatic, {{-4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {7., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {7.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {8., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}, {Automatic, {{0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {8., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {10., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {7., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {7.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {8.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {9., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {9.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {10.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {11., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {11.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {12., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}}],
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10}, {-3.9999997959183666`, 5.9999997959183675`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"6b6ceb6b-30d0-4f00-bac5-946e01ed61e9"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SqrtBox["x"], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"6", "-", "x"}], "\[Implies]", "\[IndentingNewLine]", "x"}], "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"6", "-", "x"}], ")"}], "2"], "\[Implies]", 
      "\[IndentingNewLine]", "x"}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"36", "-", 
        RowBox[{"12", "x"}], "+", 
        SuperscriptBox["x", "2"]}], "\[Implies]", "\[IndentingNewLine]", 
       RowBox[{
        SuperscriptBox["x", "2"], "-", 
        RowBox[{"13", "x"}], "+", "36"}]}], "=", 
      RowBox[{
       RowBox[{"0", "\[Implies]", "\[IndentingNewLine]", "x"}], "=", 
       RowBox[{
        FractionBox[
         RowBox[{"13", "\[PlusMinus]", 
          SqrtBox[
           RowBox[{"169", "-", 
            RowBox[{"4", "\[CenterDot]", "36"}]}]]}], "2"], "=", 
        StyleBox[
         RowBox[{"{", 
          RowBox[{GridBox[{
             {
              StyleBox[
               RowBox[{
                FractionBox[
                 StyleBox[
                  StyleBox[
                   RowBox[{"13", "+", 
                    SqrtBox["25"]}],
                   StripOnInput->False,
                   SpanMaxSize->DirectedInfinity[1]],
                  StripOnInput->False,
                  SpanMaxSize->DirectedInfinity[1]], "2"], "=", "9"}],
               StripOnInput->False,
               SpanMaxSize->DirectedInfinity[1]]},
             {
              RowBox[{
               FractionBox[
                RowBox[{"13", "-", 
                 SqrtBox["25"]}], "2"], "=", "4"}]}
            }], 
           StyleBox[".",
            FontSize->14]}]}],
         StripOnInput->False,
         SpanMaxSize->DirectedInfinity[1]]}]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"4fa3c28e-3601-4920-9407-dd3f90e414ca"]], "Text",\
ExpressionUUID->"d4ec49a9-3806-4112-a179-2c71faf5af73"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["\[Integral]",
      StripOnInput->False,
      SpanMaxSize->DirectedInfinity[1]], 
     SqrtBox["x"]}], "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"6", "-", "x"}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Integral]", 
      SqrtBox["x"]}], "-", "6", "+", 
     RowBox[{"x", 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Integral]", 
       RowBox[{
        SuperscriptBox["x", 
         FractionBox["1", "2"]], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "-", 
      RowBox[{"\[Integral]", "6"}], "+", 
      RowBox[{"x", 
       RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       FractionBox[
        SuperscriptBox["x", 
         FractionBox["3", "2"]], 
        FractionBox["3", "2"]], "-", 
       RowBox[{"6", "x"}], "+", 
       FractionBox[
        SuperscriptBox["x", "2"], "2"], "+", "C"}], "=", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{"2", 
          SuperscriptBox["x", 
           FractionBox["3", "2"]]}], "3"], "-", 
        RowBox[{"6", "x"}], "+", 
        FractionBox[
         SuperscriptBox["x", "2"], "2"], "+", "C"}], "=", 
       "\[IndentingNewLine]", 
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"4", 
           SuperscriptBox["x", 
            FractionBox["3", "2"]]}], "-", 
          RowBox[{"36", "x"}], "+", 
          RowBox[{"3", 
           SuperscriptBox["x", "2"]}]}], "6"], "+", 
        RowBox[{"C", 
         StyleBox[".",
          FontSize->14]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"4bc7c890-fdd0-48ee-abe4-594df8e78e2f"]], "Text",\
ExpressionUUID->"941ed2cb-4cd6-4259-a176-2f73cc4fdd1d"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Integral]", "4", "9"], 
     SqrtBox["x"]}], "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"6", "-", "x"}], ")"}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"4", "\[CenterDot]", 
        SuperscriptBox["9", 
         FractionBox["3", "2"]]}], "-", 
       RowBox[{"36", "\[CenterDot]", "9"}], "+", 
       RowBox[{"3", "\[CenterDot]", 
        SuperscriptBox["9", "2"]}]}], "6"], "-", 
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        RowBox[{"4", "\[CenterDot]", 
         SuperscriptBox["4", 
          FractionBox["3", "2"]]}], "-", 
        RowBox[{"36", "\[CenterDot]", "4"}], "+", 
        RowBox[{"3", "\[CenterDot]", 
         SuperscriptBox["4", "2"]}]}], "6"], ")"}]}], "=", 
    "\[IndentingNewLine]", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"4", "\[CenterDot]", 
        SuperscriptBox["9", 
         FractionBox["2", "2"]], "\[CenterDot]", 
        SuperscriptBox["9", 
         FractionBox["1", "2"]]}], "-", "324", "+", "243", "-", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"4", "\[CenterDot]", 
          SuperscriptBox["4", 
           FractionBox["2", "2"]], "\[CenterDot]", 
          SuperscriptBox["4", 
           FractionBox["1", "2"]]}], "-", "144", "+", "48"}], ")"}]}], "6"], 
     "=", "\[IndentingNewLine]", 
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"36", "\[CenterDot]", "3"}], "-", "81", "-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"16", "\[CenterDot]", "2"}], "-", "96"}], ")"}]}], "6"], 
      "=", 
      RowBox[{
       FractionBox["91", "6"], 
       StyleBox[".",
        FontSize->14]}]}]}]}]}], TraditionalForm]],
 FontSize->24,ExpressionUUID->"8fbcc75a-3e72-41c7-bf46-3a5b15699236"]], "Text",\
ExpressionUUID->"62df2e2f-7209-49a8-b18a-fc2106cccf9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      SqrtBox["x"], "\[Equal]", 
      RowBox[{"6", "-", "x"}]}], ",", "x"}], "]"}], ",", 
   SuperscriptBox["13", "2"], ",", 
   RowBox[{"169", "-", 
    RowBox[{"(", 
     RowBox[{"4", "*", "36"}], ")"}]}], ",", 
   RowBox[{
    SuperscriptBox["9", "2"], "-", 
    RowBox[{"13", "*", "9"}], "+", "36"}], ",", 
   RowBox[{
    SuperscriptBox["4", "2"], "-", 
    RowBox[{"13", "*", "4"}], "+", "36"}], ",", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       SqrtBox["x"]}], "\[Equal]", 
      RowBox[{"6", "-", "x"}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     SqrtBox["x"], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SqrtBox["x"], "-", 
      RowBox[{"(", 
       RowBox[{"6", "-", "x"}], ")"}]}], ",", "x"}], "]"}], ",", 
   RowBox[{"Expand", "@", 
    FractionBox[
     RowBox[{
      RowBox[{"4", 
       SuperscriptBox["x", 
        FractionBox["3", "2"]]}], "-", 
      RowBox[{"36", "x"}], "+", 
      RowBox[{"3", 
       SuperscriptBox["x", "2"]}]}], "6"]}], ",", 
   FractionBox[
    RowBox[{
     RowBox[{"36", "*", "3"}], "-", "81", "-", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"16", "*", "2"}], "-", "96"}], ")"}]}], "6"], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SqrtBox["x"], "-", 
      RowBox[{"(", 
       RowBox[{"6", "-", "x"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "4", ",", "9"}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"53a28f31-02e0-4227-95d5-31dc773587a3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"x", "\[Rule]", "4"}], "}"}], "}"}], ",", "169", ",", "25", ",", 
   "0", ",", "0", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"x", "\[Rule]", "9"}], "}"}], "}"}], ",", 
   FractionBox[
    RowBox[{"2", " ", 
     SuperscriptBox["x", 
      RowBox[{"3", "/", "2"}]]}], "3"], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "6"}], " ", "x"}], "+", 
    FractionBox[
     RowBox[{"2", " ", 
      SuperscriptBox["x", 
       RowBox[{"3", "/", "2"}]]}], "3"], "+", 
    FractionBox[
     SuperscriptBox["x", "2"], "2"]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "6"}], " ", "x"}], "+", 
    FractionBox[
     RowBox[{"2", " ", 
      SuperscriptBox["x", 
       RowBox[{"3", "/", "2"}]]}], "3"], "+", 
    FractionBox[
     SuperscriptBox["x", "2"], "2"]}], ",", 
   FractionBox["91", "6"], ",", 
   FractionBox["91", "6"]}], "}"}]], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"f20a30af-ebc1-4dac-a14c-faf546f732ef"]
}, Open  ]],

Cell[TextData[{
 "Ou ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{
      SuperscriptBox["y", "2"], "\[Implies]", "y"}], "=", 
     SuperscriptBox["x", 
      FractionBox["1", "2"]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"d80b0693-24ec-49c1-bac9-03869dace23d"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "+", "6"}], "\[Implies]", "y"}], "=", 
     RowBox[{"6", "-", "x"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"49b0ec46-9a41-4c81-88aa-48ef56b43fee"],
 "."
}], "Text",ExpressionUUID->"e0c94c08-a349-45b3-9817-9d527f459583"],

Cell["Novo.", "Text",ExpressionUUID->"1d88fecc-005a-4194-a16a-cf595c5417a5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
0sj/A4Zw2JQ=
    "], {{0, 300}, {460, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{460, 300},
  PlotRange->{{0, 460}, {0, 300}}]], "Input",ExpressionUUID->"ea5cadf0-7da9-\
4a59-a985-af9111ee4b7e"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["y", "2"], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "+", "6"}], "\[Implies]", "\[IndentingNewLine]", 
     RowBox[{
      SuperscriptBox["y", "2"], "-", "y", "-", "6"}]}], "=", 
    RowBox[{
     RowBox[{"0", "\[Implies]", "\[IndentingNewLine]", "y"}], "=", 
     RowBox[{
      FractionBox[
       RowBox[{"1", "\[PlusMinus]", 
        SqrtBox[
         RowBox[{"1", "+", "24"}]]}], "2"], "=", 
      StyleBox[
       RowBox[{"{", GridBox[{
          {"3"},
          {
           RowBox[{"-", "2"}]}
         }]}],
       StripOnInput->False,
       SpanMaxSize->DirectedInfinity[1]]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"90c93853-610a-4c74-bae2-3dedc51ffaa3"]], "Text",\
ExpressionUUID->"a7807fcb-10ca-4c75-861e-2f242d72fe24"],

Cell[TextData[{
 "Em ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"-", "1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"03d972a5-adab-49a4-85b9-9b6b776a8129"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"-", "1"}], ")"}], "=", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"310b554f-86b5-4e48-86c6-50a0149e175d"],
 " e ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", 
     RowBox[{"-", "1"}], ")"}], "=", "5"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b01e2be7-a060-48aa-97ff-9bb85fddcff9"],
 ".\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "y", ")"}], ">", 
    RowBox[{"f", "(", "y", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b7d3c760-77b7-4ff2-a41d-13fd094ac831"],
 "."
}], "Text",ExpressionUUID->"4083f0e7-c239-4b5c-9407-640258d740ca"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     UnderscriptBox[
      OverscriptBox["\[Integral]", "3"], 
      RowBox[{"-", "2"}]], 
     RowBox[{"g", "(", "y", ")"}]}], "-", 
    RowBox[{
     RowBox[{"f", "(", "y", ")"}], 
     RowBox[{"\[DifferentialD]", "y"}]}]}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      UnderscriptBox[
       OverscriptBox["\[Integral]", "3"], 
       RowBox[{"-", "2"}]], "y"}], "+", "6", "-", 
     RowBox[{
      SuperscriptBox["y", "2"], 
      RowBox[{"\[DifferentialD]", "y"}]}]}], "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        FractionBox[
         SuperscriptBox["y", "3"], "3"]}], "+", 
       FractionBox[
        SuperscriptBox["y", "2"], "2"], "+", 
       RowBox[{"6", "y"}]}], 
      UnderscriptBox[
       OverscriptBox["|", "3"], 
       RowBox[{"-", "2"}]]}], "=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "9"}], "+", 
       FractionBox["9", "2"], "+", "18", "-", 
       RowBox[{"(", 
        RowBox[{
         FractionBox["8", "3"], "+", "2", "-", "12"}], ")"}]}], "=", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"-", "18"}], "+", "9", "+", "36"}], "2"], "-", 
        RowBox[{"(", 
         FractionBox[
          RowBox[{"8", "+", "6", "-", "36"}], "3"], ")"}]}], "=", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         FractionBox["27", "2"], "+", 
         FractionBox["22", "3"]}], "=", 
        RowBox[{
         FractionBox[
          RowBox[{"81", "+", "44"}], "6"], "=", 
         RowBox[{
          FractionBox["125", "6"], 
          StyleBox[".",
           FontSize->14]}]}]}]}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm",
 FontSize->24,ExpressionUUID->"4d8bba76-4a41-42a1-b2e1-8abce5c78691"]], "Text",\
ExpressionUUID->"d08a42a3-8620-43f1-a306-73e659d462da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Apply", ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"y", "+", "6", "-", 
      SuperscriptBox["y", "2"]}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "2"}], ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"y", "+", "6", "-", 
      SuperscriptBox["y", "2"]}], ",", "y"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox["#", "3"], "3"]}], "+", 
      FractionBox[
       SuperscriptBox["#", "2"], "2"], "+", 
      RowBox[{"6", "#"}]}], "&"}], "[", "3", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox["#", "3"], "3"]}], "+", 
      FractionBox[
       SuperscriptBox["#", "2"], "2"], "+", 
      RowBox[{"6", "#"}]}], "&"}], "[", 
    RowBox[{"-", "2"}], "]"}]}], "}"}]], "Input",
 CellLabel->"In[36]:=",ExpressionUUID->"399f1eec-5e19-4b29-96ae-6c305e970004"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Apply", ",", 
   FractionBox["125", "6"], ",", 
   RowBox[{
    RowBox[{"6", " ", "y"}], "+", 
    FractionBox[
     SuperscriptBox["y", "2"], "2"], "-", 
    FractionBox[
     SuperscriptBox["y", "3"], "3"]}], ",", 
   FractionBox["27", "2"], ",", 
   RowBox[{"-", 
    FractionBox["22", "3"]}]}], "}"}]], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"e799fa49-4892-4df6-8bac-fd42a2d0703a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", 
      FractionBox["1", "2"]], ",", 
     RowBox[{"6", "-", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "12"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "3"}], "}"}]}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}]}], "]"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"35dfc37b-dae0-4877-82c9-2b7064599f78"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.9, 0.36, 0.054], AbsoluteThickness[1.6], Opacity[1.], 
      CapForm["Butt"], LineBox[CompressedData["
1:eJwdjnk0FHgAx4dBSY+KddY0ydVEtpzTNr4/sejYjQYvrS6pHbWK3dlJB9tk
k8HKsrRSKqzK2SbXOMbmqNUQhRwZxtGUeyPlmrbdz3uf9/n3s8bv5O4jihQK
Zccn/2sM297AKZWB8fp9s0GWv8B+NEu464onnt8yvZFhkoanSSIDlvAMWpdd
75rIfQAz5jEjtmkkzvnwZMYNZeCyz3RXh/wKzq78DaySKnhFicwk3UkoNzb7
IpdeDdu/lLgftl7D55WpV6qcaqE2n3FAteUm1tantd+xfoThTUNZa5mZMLpg
bticVQ/fxpime8N38LLi8GUXlhjiAMtpVmo2rgo3M84KG+DtLqTn8O8hNiWq
3JM0QT01uuBt558oKhj0nX7VhLphXxemdQGyr69bEXCpGbaXPh6ve1UIkYJC
hV3JM+hUOhf37ihDVkiuz/xgC5rUtLeb/lEO45+YZXGcVkT6yF4GyitwKJE9
o/+6Fedmnfmhe6rgbD1EuiRtGEmUZS5Rq4ZvuJfrxfx2PN7iPpFbXA2qi5Zz
MK0DGf0lTA//GiivD845G90B341R4isVtXC5YJ/jdrATYrH5W6Ogx5++01eM
T3chh/o9C60NWFknmHo4KEG83YilF68RjafyN1fa9yDk+FHD4zpPUaLBsumJ
6kFaQG74E/MmnHbnMry1exHYfIvz/kQzmH1hbjEFvVC6FbVp1+RzPG2zFv/d
LYUV8a2Tz7WjQPXn9iPyfpjsTRYJdnZg//la6wjaAHS5bSVa1zswo3kx8QeH
Achvu2czHDrREs5aWRo6gHqNL+O8z3dBz9tJtGh2AH49FnvzlCToyC/wPDw0
CDfRx+m8CCmGGxZsEvNkuME6q+V9XwqnwikNBbEM02XTGxc+fVhPXy5yeyND
Rsnodzts+hAZSgkJXPsalPtdfbL+PnTUlEboJ71GaUZxI91xABxyt/jbH9+A
EXUyM37uFSzyefFhtGGoefV48YJGIG4TOT5hjGFP2Tl9j5QRuOj+fiDUcQyZ
a/R71teNIEW7OZy2ZwxkzJMjNRgFX3c3b8PFMXAv1Z/Z+WgU3edVVASSMUhK
C28Y0saxVdOb5Ro7Dh+NOq5scALhM4yFQ8ETMOdeq0xImES/1VHbkvv/gJ7Z
epUf/wESUhtCbZnEY2pufPrCAp6UQ69Z9g49/pEBFhEKRPU3Wh4r7z0e7BPo
pDspkbuG/uw53gyGW+/YsadUiBTcGDv9OWy7oD7fwFMlz4TL0rOj58F3dmr0
s1xKlMtdE6wWy9G7udL5Yak6ibzJ77f/5iM82rO181KWkVXbM2xXfUUhq2m9
yyPfLSdH8jZWRUxSCCXM7oCrvSbpZF8WbRUokEYOr0AzSYuYKNLYeiaK5OuE
GhI6+hk57dqsqV2mSKQvbOhiCx0SHcTZJnekkkO3Y1XMBLpkKO6gH6uJSqbi
liCgQY/IW5Jnwz2UCFOYeM9VzYA8rLWwsmpQIsdOLF5n5b+SnHqx14Hlrkzy
t6ROUjNXkSLbpbzSR8pEmmhQK1VcTV7GqlIDXVRIgtJ+7m4jOjHnhPU7CFWI
uqQwTbGGTgRvD55IXreIUEL5nszgNSTcMdl0+c1FpCiu4oExxZBQ/mcx+RdD
mDyO
       "]]},
     Annotation[#, "Charting`Private`Tag$4342#1"]& ], 
    TagBox[
     {RGBColor[0.365248, 0.427802, 0.758297], AbsoluteThickness[1.6], Opacity[
      1.], CapForm["Butt"], 
      LineBox[{{3., 3.}, {3.1830100719383023`, 2.8169899280616977`}, {
       3.5231376756933632`, 2.4768623243066368`}, {3.8407025690606673`, 
       2.1592974309393327`}, {4.15203128265246, 1.8479687173475403`}, {
       4.48977687769323, 1.51022312230677}, {4.804959762346243, 
       1.1950402376537568`}, {5.146559528448234, 0.8534404715517656}, {
       5.481923114774714, 0.5180768852252857}, {5.794723990713437, 
       0.2052760092865631}, {6., 0.}}]},
     Annotation[#, "Charting`Private`Tag$4342#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Automatic,
  FrameTicks->FrontEndValueCache[{{Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}}, {{Automatic, {{0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0.1, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.3, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.7, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.1, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.3, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.7, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.1, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.2, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.3, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.4, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.6, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.7, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.8, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2.9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}, {Automatic, {{-2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {2.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {7.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {10., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.01, 0.}, {
         AbsoluteThickness[0.1]}}, {-5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {-0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {0.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {1.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {3.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {4.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {5.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {6.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {7., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {8., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {8.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {9., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {9.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {10.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {11., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {11.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {12., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}, {12.5, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
         AbsoluteThickness[0.1]}}}}}],
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3.9999996734693877`, 11.999999673469388`}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[8]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzVXHuwVWUV33LPuYCPtHwkRorPHmq+Kh+EJJr4SM0MLRP1QlwvAglI2KQF
lGhihCloIoQPejBkf+jMtSmbZrDEnFuKjjbkOGKm9+arg3IhMdr91vp9Z699
9tn7nvN9B3Vi5h72t8/ev+/b61vfWr+11rfPWR2zuiZN65g1eWLHiLEzO6Z3
TZ545YhTr5iJU207RNEOXVEU9e0d4TjGkf7Jv8n442HxUad8tj22vBP/5nX3
RhOkXertntep/5Y/Fl8qZ4bwCrlEoZMbjlKUSfJZlrO4Qb6V66KvOWw9h8OL
5WNoHAPdncrecWQKza7SLx1ab/dyDiEHLXtHGq3aUfW7iYomt+j56JI6tOwd
A42tQ6UWO7HJV5d6jS4rhwmUXLeTdlSPli+57GxOrBmXXHgxz7hTgjAoc89R
hboS7Zye+Tohpc6P5/V1z9WW+7Ryx0XujqyU2nLlLWdjdDcOfyV3Z3a+2nLn
Xc+24TZKMSpl2u9v0P5Apr2btv+7dQtO/eeV5+u+z7bD8J/+WwWnfv37f0S7
t4jX6PqsPAZ5z8v2ly7kilNv3HvdOyTdlfc+i1OvvLblPZNuc+vEV7qH5D4t
dXXjiunRR4Lun31tD081vH87SacUp6xLOa61Vtl7xlXblaVdcjgx8/2u2sZc
j5+2BvMenZv5/rDcMeyW28tLF+3ievmGtrE+gYq1Gs31QHlx4rDXF33FUG68
9cnLZj+8deu2AVDkJO9+YcrBr80/Qw5naRv3TZj5h5vueCqa464rDdD38zOO
qrm7Z92reII1j/RF8zyeYMM3R708+xhDWbHqGaBUNr7lhfLcNSf3dQ43lBlz
Hr3mhr/IoQ/Ks9ePw7TI4ZUc2wtvYiy/6t4QfdcDZf3iaUDZ1l9xKLgfKM88
t9EL5am7rwXK1g3rHMp1Nz+BmZXDYhSb2Sd/eSvu3rx2dTRT2/2b38YYlq5c
r/JoNLPrHvgF7n7zvoXubswp7l7b83L0PY8n+POfHgbKxpVXORT0DhSMxAul
p6enb8pBUHKHAiFAFHLoifLq3DGvXD0ymqFtrDOM5f7f/D26tnmUElCwZns7
9oQZnJ6aW+iJLw6EC+G8/eJ64kBZobJyWIyTzK7cv6XnftyPzytis0lYOyqV
BvMr92+r9OF+uMUrUjOMFRzN93sO/I+Fh+khDmwHLIjYH38cGBPM9Ndjs0Sw
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\
\>"],ExpressionUUID->"e8063841-ac8a-492c-8202-69c2a4476cbf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Plot", "[", 
      RowBox[{
       SuperscriptBox["y", "2"], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "0", ",", "10"}], "}"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], ",", 
     RowBox[{"Plot", "[", 
      RowBox[{
       SqrtBox["x"], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"Spacer", "[", "10", "]"}]}], "]"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"26b63e04-1155-4bfd-bfc2-5ed7c05ca274"],

Cell[BoxData[
 TemplateBox[{TemplateBox[{10}, "Spacer1"],GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
          "]]}, Annotation[#, "Charting`Private`Tag$22412#1"]& ]}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 200, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 10}, {0., 99.99999591836738}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],
   GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
kTinzS2230lgzZSZbHmZREHeWdt9HgT+DZ68KX0=
          "]]}, Annotation[#, "Charting`Private`Tag$22459#1"]& ]}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 200, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0, 10}, {0., 3.16227762790024}},
      PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}]},
  "RowWithSeparator"]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"59bd1e8b-c24f-457d-884d-0d8406c6a6dd"]
}, Open  ]],

Cell["\<\
F\[OAcute]rum. Pesquise e poste uma situa\[CCedilla]\[ATilde]o-problema da \
sua \[AAcute]rea de forma\[CCedilla]\[ATilde]o afetada pelo c\[AAcute]lculo \
integral e diferencial. Escreva aqui um coment\[AAcute]rio de ao menos oito \
linhas da import\[AHat]ncia dessa aplica\[CCedilla]\[ATilde]o para a \
atividade humana.\
\>", "ItemNumbered",ExpressionUUID->"e5c5b3b9-6c65-4e52-bd03-28fde65b86f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"8", "x"}], ",", 
     SuperscriptBox["x", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"InfiniteLine", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"400", "/", "10"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", 
           RowBox[{"400", "/", "10"}]}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"InfiniteLine", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"333", "/", "10"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", 
           RowBox[{"333", "/", "10"}]}], "}"}]}], "}"}], "]"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"087cea18-e03f-4c24-98c0-ac01f3857677"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtymtMk2cchvEywC2lLlY2FJH2LQ+hWkEhxsUTPDfgATmN8ogmmE2pcnAi
DkITBTwxGRID1o0oYEiDTBdiQF3qEjwwh0xEoEbxDMsMtTEwTXRdlSKKmvf/
4crvy6Uz7UjP/kShUKR86KONe0xTorYcipG9GNM1ICWvl7Zy2Xo+ea3jB0na
RbbwxivVWl+pimzn+dHm7a+19WQPH3iTV/tC20I+5J8ODuufa9vJEd50w1r4
74dP1sPbzlQN5s9/RCqRy2/VPytycFl/FDjnOmxtI1w2EErdAf0/i19wWQk1
03oNTZtcXJbBNLj2D+++V1w2DIV/HTDt0I9zWQPOfa8SM9e85bIRaCrdNhq5
XkFGotw6Yfz/mRcZBcXAY1wq8SYXIqw4Z+dagy+5CE/cx9b5XZ5CfoVE53e7
fyr8jFyM1CeWeRqNklyK0aumfddb/chlmK++Fxy/cSoZDSV3Zw25PidjsPp5
5uuQjGkk8KBzi1dmuJqMxfmDXd9KbjUZixxf82O7fToZh81FpedVDf5kPBbk
zrMnZ31BrsDN6eF+5iVfkitxsa38eLh3ALkKpV6GtL6/A8hVUA6VJBTYZpCr
4Tylq7WWzSQTUDsn0Kc9I5BcA0tDTneWNItMRGbtN3bV01lkIsZWnPRYO4LI
JDiccTs7K2eTyTgRHRXUnxVMpqC1wqzOjdCQqajM2Jzk7daQqVg01NRS2a8l
v0bd3OOt/UkSmYa9V6rrktolMg0pQRknb4TqSCNiC7o3qKt0pBHW2abQPreO
NCL06q9HUzeEkOmwRHQabneEkOnIcfnc6jEwUsB07j+p6jAjBfLLxUTiEUYK
mIXtvupnRgocdJtrLEcZKdC2xPPmWCMjBTx/Tt47dZqRApbbququbkYKNDRv
z/uxh5ECzcX2+IReRgr8HmAZ77UzUmAo0z9v4C4jBfSOwPhhByMFIm0lml+c
jBRYWjHoyX7KSIFkfePZkVFGChRtkzQvXzJSoGz5fs9vLkYKVEwdvlPsZqRA
3ZnmQ2NjjBQ4sc8n98I4IwVOG7PjyiYYKWALuRYc846RAh2uMM/kJCMF3gP9
+TFB
       "]]},
     Annotation[#, "Charting`Private`Tag$12397#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$12397#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Epilog->{
    TagBox[
     ConicHullRegionBox[{{0, 40}, {10, 40}}], "InfiniteLine"], 
    TagBox[
     ConicHullRegionBox[
      NCache[{{0, 
         Rational[333, 10]}, {10, 
         Rational[333, 10]}}, {{0, 33.3}, {10, 33.3}}]], "InfiniteLine"]},
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10}, {0., 99.99999591836738}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"dd5c8376-d8f6-46e7-b8c7-287ccada7888"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"8", "x"}], ",", "x"}], "]"}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", "x"}], "]"}]}], "}"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"5d800651-9896-42ac-a0f3-20d676ec5b62"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"4", " ", 
    SuperscriptBox["x", "2"]}], ",", 
   FractionBox[
    SuperscriptBox["x", "3"], "3"]}], "}"}]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"fdcab9b7-3ea5-4165-b178-ead53c381944"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"4", 
       SuperscriptBox["#", "2"]}], "&"}], "[", 
     RowBox[{"{", 
      RowBox[{"0", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{
     RowBox[{
      FractionBox[
       SuperscriptBox["#", "3"], "3"], "&"}], "[", 
     RowBox[{"{", 
      RowBox[{"0", ",", "10"}], "}"}], "]"}]}], "}"}]}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"ab17613b-f2d8-4cac-bd36-4f8deaca3e93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "400.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "333.3333333333333`"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"d4004971-6c77-4b8f-9947-a8b3105ff0e6"]
}, Open  ]],

Cell[TextData[{
 "Ou seja, a linear tem definida maior entre ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{"0", ",", "8"}], "]"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"c5287c35-d5b0-4379-ac20-124502cfa5a2"],
 ". (Ou seja, maior tempo m\[EAcute]dio de execu\[CCedilla]\[ATilde]o.)"
}], "Text",ExpressionUUID->"1cf48493-19da-4a1d-8569-21514b0a6d30"],

Cell["\<\
Podemos ajustar os limites de integra\[CCedilla]\[ATilde]o de acordo com os \
volumes de entrada esperados.\
\>", "Text",ExpressionUUID->"9490e382-7d0d-4e38-85e7-2627e7062016"],

Cell[TextData[{
 "Mas ajustar ambos os limites \[EAcute] um ",
 StyleBox["Manipulate", "Input"],
 ", quando queremos ver o desempenho dos algoritmos em \
fun\[CCedilla]\[ATilde]o dos limites de m\[IAcute]nimo e m\[AAcute]ximo de \
dados esperados."
}], "Text",ExpressionUUID->"ff9fc069-c920-40d1-a92f-ccbef3eede7d"],

Cell[TextData[{
 "Para ver simplesmente qual algoritmo se sobressai em geral (independente \
dos limites), podemos verificar sua integral definida em fun\[CCedilla]\
\[ATilde]o do volume de entrada (e assumindo limite inferior ",
 StyleBox["0",
  FontSize->24],
 "). Ou seja, a m\[EAcute]dia de tempo do algoritmo em \
fun\[CCedilla]\[ATilde]o do volume de entrada."
}], "Text",ExpressionUUID->"e2e8379c-47b9-4ef3-9188-fe3ef1c4412b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"4", 
        SuperscriptBox["#", "2"]}], "&"}], "[", "x", "]"}], ",", 
     RowBox[{
      RowBox[{
       FractionBox[
        SuperscriptBox["#", "3"], "3"], "&"}], "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"c839da7b-74d4-4ad9-b2d2-52964c2a10fd"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwV0Gk8FPoCh/EhW5Yio+TIGWZUVIPswv+XtWwhpiHqxJElCqljj5ISyRKl
rKdkaSFyU9pGSovCcCypLEPqakFZkjH33BfP53n/VfU54OonTKFQCv7t/1c7
w79UqMIx97mVXGfvUmN2W0Lj95CAIiK0VkW3vGM/4UTeuLw2oIpIrYhoVu1I
J9kGw14y6bfJbunVLRWsEvJUO8xfLOAhcZ+WznrPvUFiFQT1guLHhDv4bE8t
tZ7kZlmbz59uJtRVG85nsDikamna49nol0TBwtvTK6+ZPEvjbpnybyWf+yNm
7nFfk/Ek6dHIynZi/+uOoUdiB4l7XKUxU9xBllhu2FNI7SGSwtuDD537h5ja
Umc30N+RXEzf+H66m3w6ZrhwjDVI6EfyJsKSeklwo4rhco9hUn3fVG88uo8w
+h9eccwbJc9Njt357N9PdGu1NK9xv5KrpvLx+lUDxEZfUPjJb4JM9P1ZFFE5
SKQTLJu2JX4n8UoSQ5PFPDI2NDSQTZ0lTXc8Fm3MHybCv8x6wtLmiKTHVUbY
uRGiKzwdpEbnk3PnnPy/nR4lP/ab34xjCeG9QfFJZspHYthbypNrEwaja6Ii
JOkTEW1o8F3qIYJqas7nsegxsnVk0sEmTxwvMvvCPvp/I391pj++xF2Ck+dz
n2frjJNM/i0djq8s1gcQT92qcVLdErV2xE8O4eKZMeGVE8RMJUXSPlEeC9Z6
D8aLv5Py9AfF6VRFlCi8c8pQ+UH0KHvXXHJYCauR4/1a+T9I8vVht+A0JaQm
dVMOnJsiiQ3+l5Xpq6D4ONryy+kZ4uPaeCqapYqGLHpnmtQssZwLD9whp4Zd
Pi1/rk+ZJeI4c3FJmxouC6kk70v6SYxLJeekPBjQAefZp+hfxKZLutgibw3s
7os7ffAXEAHXPKOIy4SOwGdq+biAqFMHO/QHtJBG2/2abkoBd92FCo0obUT4
3D3k1kRB3+Rh4WVZOrD6ENpU1ykEmTMspSX9uhj68m5P5NQijAiuD9WOGKEr
PbUuw1gEjrriQ/UZxnihZby4Ik4Eg6NGR4TMTVATdra6V1QUWZ3q2d5Fm5A4
ZScwWS6GpffUVTfHmYPGv53PN5DA48H3/33jagFqod+4QowEBpO2eUTftYAE
kbdiPpRATsC13E10S3xL2D+2y3YxHk5oxtNnLfFARN3k0Q5JMKQ2UVKqrOEt
ndV9NFIaTM+ytkq3rXglY7BYxFsWF/XY7Yx7zuDaLzv/OlYW9VZP7gXxndGT
8nV1Xr4sVI2WLDCJC4ZFy6yYb2XR/kz36MYmF8zzVySwd8qhMvNVhnqnKzS/
/py+5rEMJpxNzQ1S7jj5+v6wO4uK0XPCeeW9HkiXvnCQdpiKLXKfyR1NT5y1
Oyw8lkPFZMhN0y2xnih6yqQl/EMFvb3VcJC2E/95ULSz0k0BAvOdeoIDXhi5
kchdcF2OgvprNmPqu2FxxvpR2TZFVMut+rg50gcJdrcquPsVobZg29JQ5oMH
ovRs/mlFxKcz/cO7fWASS9m7vUUR3y4wOTmGvtANbJASbFmJep850bo5XzAs
dXawLJTw4fojrnuaH8RmlL+K6CujeqNEFO1dAKxqUru13JShn1+mp0MNxNGQ
uUeeB5VxqUK4LN4+EAu87uzqm8owrh6rar0biJm2LGMv5io4BKe42uUH4WOl
xPHaNSpYUvz9TUlQMPy05mR0ZGigxGyeD1YKhUPfiVJFFRpY+/4eDTQNhd4J
BTOKFg0tXzJTT+0KhUi/dnCrMw2SFcp8g0uh+Dvd/0XIWRq6ZgeSTZlh6P/S
mVz5myru8hn6c3bh8LhWJaBrqqE8/8I8KYqAo4bfxHJbBn7XMjWcqonCXOqh
hncsBuoGrMeF+qJQ/vX48ct7Geibkn26YVE0RG5dWbkxmYEWu7Hmoe3RuGv+
cbPjEwasiqoZjdPRWO22L+uYpToKJ+MsWBaxoBwJ0x0nqzFnQV/aOR6Pms64
Q8+N1oJm7TCd5X4Um5ZpVokcWY891+t3448U+P/KKihla+PSmYLdBrUZOPB0
VLfKcSP25lz0sRw/i1OeYur8YD3s6iu33i1/Ab7NMXt1AgxwW7fEi7mnCBzx
lS77PIwgnE7pUTrxN3TkEnI/RZigl3Wv/kp/Kf74brbeKdgUC4u6vGfMK1BS
+ER55rQ5jHZS15Suv47adJM+riugNJ8b7lpWjYi7Zs4FDpsxzpRYY3arBg9f
lE6m7LRA85HGFcKydQi0Nb4fyLbET3urKp7vbeSX69TtC7LCvNikUrv0XWR+
v58Y+pc1fEt1J4Rf3cOHykOHA8JtQK8U9WiPe4gmm6zzR4/aom44XrjamgOh
bW+GziRsAcdixP1tYyMom/8jVBy1FXPPem17bJtwcsWMI/eEHVbFpJhMLzxB
qKdv48wxe6TFyLhxy5sxmKj3J8lxgHQxU2z0xHNQs/PepJQ44vhglcvPAy9x
RVYzqvmiE+LlQ72kbV+BE/679Zqr23C0vzVRa0crCmnFymZuzpAy62rQr2zD
/dg5SkCbM94frjkbdLUdqvbi8/QdLlhppr9U/CUXt1o1Uns7XTCawOzx7u9A
2tMFbZq3K2Rzbkdckf8H2Qc/Bf3x1hU3vZ2cbm3qQqyCylI1j+0QUVM8UOLX
jQoN0RcRA9vBcTLW8LnZA7EfQis5u9wQyTg+LP+tF2XaN+MLR92gAH9ddec+
aPhUOvFD3BHhFbX4eu1b9G29U+M+5o5D/tu9bMTfg3spegM5yMJvsUZv1iX0
Y7bWxVRtkoUu+xGjFREDENSH1yXv3wGH8HV+u9cOwl7bxjp2agdKN3u9NRsf
RLO3VuC+g2zw8nT3cW4MYZlvQEPBITY0YjJGlGuGsCugRKbtLzbMmLTrkXVD
mA6Xr9GLZePF4h66zr0hME7OzPGT2IjIragqfT6EhJqHaRm5bCwT60TB8BBM
xJ2r6+6wccTcZutTJR6SpVOEPzawsc2DH7hOhYd2uUY3pQdsfLIe7c5Q5SFA
We9nfCMbSWe3X/Ray8M5HUWLLS/ZcBRPfzSjz8OPnQMdb96yoWl5KsnUhQfs
Wblapp+N+9H7I6+48ZC61zWSDLLxW9LxO7JsHtTCmpQvj7BhLu1A/7CLB5fk
cr+Qr2wsnzTJORvMQ37q4O2icTYk6+smKaE8fMxQkuROstGyzbcg5CAPCRfT
bhjMsFH7g/XGNpqHluInlMCfbPQKFQTXxfGw4sqC68Vf/3oMKDjQE3nwuWpY
+orPxolMTmRmEg83qkNnBIJ/PajFk4ITPPwPab6FyA==
       "]]},
     Annotation[#, "Charting`Private`Tag$3175#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$3175#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 100}, {0., 223188.61404776465`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[2]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"],ExpressionUUID->"bcbf17c7-8c2e-4bbc-a207-b48c8c597aa3"]
}, Open  ]],

Cell["\<\
Notar que ao integrar adicionamos um grau \[AGrave]s duas curvas. A linha \
virou uma par\[AAcute]bola e a par\[AAcute]bola, uma c\[UAcute]bica.\
\>", "Text",ExpressionUUID->"649c9d9c-02f7-448c-8416-4e047c659d4a"],

Cell[TextData[{
 "Deste plot conclu\[IAcute]mos que...\nO primeiro plot \[EAcute] a \
performance dos algoritmos em intervalos de tempo pontuais. Portanto, s\
\[OAcute] fornece um resultado conclusivo sobre a performance comparativa dos \
algoritmos para cargas de dados espec\[IAcute]ficas. (Verificamos qual \
algoritmo tem uma ordenada mais baixa em uma determinada abscissa.)\nO \
segundo plot tem a m\[EAcute]dia da performance dos algoritmos conforme varia \
o intervalo. A m\[EAcute]dia indica que ",
 StyleBox["em qualquer subintervalo de um intervalo",
  FontWeight->"Bold"],
 ", ou em ",
 StyleBox["todos os subintervalos do intervalo",
  FontWeight->"Bold"],
 ", o algoritmo tem uma determinada performance m\[EAcute]dia. Portanto, \
quando temos incerteza quanto ao limite inferior de entradas, mas podemos \
estimar um limite superior, podemos usar um gr\[AAcute]fico da m\[EAcute]dia \
\[Times] o limite superior para comparar a performance dos algoritmos: o \
algoritmo com ordenada inferior em uma determinada abscissa tem desempenho m\
\[EAcute]dio melhor para qualquer faixa naquele intervalo."
}], "Text",ExpressionUUID->"513794ce-9db4-43a4-9fbe-f0b2bc982719"],

Cell[TextData[{
 "O resultado estranho (\[OpenCurlyDoubleQuote]quadr\[AAcute]tico melhor que \
linear?\[CloseCurlyDoubleQuote]) \[EAcute] porque comparei dois algoritmos \
fict\[IAcute]cios, um em ",
 Cell[BoxData[
  FormBox[
   RowBox[{"8", "x"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"ab7cfdfb-7450-4388-9ca7-aa2bc5960809"],
 " que sim, performa melhor em at\[EAcute] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[TildeEqual]", "8"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"487e3034-8b5d-4ae6-aff1-21f7aebf4848"],
 " (em rela\[CCedilla]\[ATilde]o a um quadr\[AAcute]tico apenas em ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FontSize->24,ExpressionUUID->"775851e6-eebe-461f-8a9b-85d6f6a6ea84"],
 "). Toda curva quadr\[AAcute]tica \[EAcute] menor que uma linear (alinhadas) \
em um certo intervalo de ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"b36d8f86-3443-4c87-83c4-b4c3a42e2aab"],
 " at\[EAcute] um ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"c5853ae0-6a4d-49fa-945e-02f5a42941eb"],
 " que varia com a diferen\[CCedilla]a dos coeficientes entre a linear e a \
quadr\[AAcute]tica (mas este intervalo geralmente \[EAcute] pequeno e pode \
ser inaplic\[AAcute]vel \[LongDash] por exemplo, no caso trivial de ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"043c84ea-a73c-4eb6-91d5-645b3ea30fcb"],
 " e ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"501d4ec0-6382-4e68-9951-9a4fc42ce8ed"],
 ", ele ocorre entre ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"c0256f10-b755-447f-8d98-120f2e583f49"],
 " e ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"d95e260c-bb23-48aa-9618-4178d8146d6e"],
 " apenas).\nDando o \[OpenCurlyDoubleQuote]zoom out\[CloseCurlyDoubleQuote] \
no gr\[AAcute]fico verificamos que rapidamente qualquer quadr\[AAcute]tica \
tende a superar qualquer linear ao longo de ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"d525eab9-5c7a-4a8b-8eed-e7b32122af2b"],
 ". Eu peguei ",
 Cell[BoxData[
  FormBox[
   RowBox[{"8", "x"}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"129c069d-dac5-4222-be60-7cf0e2cb7da3"],
 " justamente para ser interessante e ter este intervalo um pouco maior."
}], "Text",ExpressionUUID->"3cb627c9-a4c4-458b-98ad-34c7a65cc4cc"],

Cell["Nota-se tamb\[EAcute]m que:", "Text",ExpressionUUID->"20260a07-6be8-4d58-b3c2-d714f73f24c7"],

Cell[CellGroupData[{

Cell["\<\
A integra\[CCedilla]\[ATilde]o adiciona um grau \[AGrave] curva, \
transformando a \[OpenCurlyDoubleQuote]reta\[CloseCurlyDoubleQuote] em \
\[OpenCurlyDoubleQuote]par\[AAcute]bola\[CloseCurlyDoubleQuote] e a \
\[OpenCurlyDoubleQuote]par\[AAcute]bola\[CloseCurlyDoubleQuote] em \
\[OpenCurlyDoubleQuote]c\[UAcute]bica\[CloseCurlyDoubleQuote].\
\>", "Item",ExpressionUUID->"fb01afe7-a97e-449b-ab02-d33a55c3c302"],

Cell[TextData[{
 "Qualquer curva quadr\[AAcute]tica alinhada a uma curva linear tem um \
intervalo de ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],
  FontSize->24,ExpressionUUID->"88354cbc-901a-496a-904f-b54852a2996c"],
 " a um ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]],
  FontSize->24,ExpressionUUID->"2d7f21be-554b-46c7-a761-a9f5a800b3b4"],
 " em que a ordenada da quadr\[AAcute]tica \[EAcute] menor que a ordenada da \
linear (embora deva parecer que uma curva quadr\[AAcute]tica \[EAcute] sempre \
de ordenada maior que uma linear). Por\[EAcute]m, qualquer curva quadr\
\[AAcute]tica rapidamente ir\[AAcute] superar a curva linear em ordenada ao \
longo de ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],
  FontSize->24,ExpressionUUID->"fa7f8327-2dd1-47cc-883b-716362a943c5"],
 ", de forma que este intervalo pode ser considerado pequeno."
}], "Item",ExpressionUUID->"1d5a4a34-0b7b-48f1-a28f-a18c44a28d39"],

Cell[TextData[{
 "Refraseando... Nota-se que a curva quadr\[AAcute]tica (que \[EAcute] \
interceptada pela linha em seu ponto m\[EAcute]dio) tem ordenada menor \
\[AGrave] linha em um intervalo de ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"21ed1f34-b31f-481b-9298-23dcfb485ac2"],
 " a um ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->24,ExpressionUUID->"cd564bc1-38b4-4a19-a37e-bf710c49af2b"],
 ", o que \[EAcute] contra-intuitivo, j\[AAcute] que o grau da curva quadr\
\[AAcute]tica \[EAcute] maior. \[CapitalEAcute] poss\[IAcute]vel conjecturar \
que toda curva quadr\[AAcute]tica e linha de tal forma \
\[OpenCurlyDoubleQuote]alinhados\[CloseCurlyDoubleQuote] t\[EHat]m este \
intervalo, mesmo que infinitesimal; ou mais geralmente, todas as curvas sim\
\[EAcute]tricas alinhadas em seus pontos m\[EAcute]dios t\[EHat]m diferen\
\[CCedilla]as de ordenada na abscissa infinitesimal, o que suscita a quest\
\[ATilde]o \[OpenCurlyDoubleQuote]quais t\[EHat]m maiores e menores ordenadas\
\[CloseCurlyDoubleQuote] neste ponto."
}], "Item",ExpressionUUID->"971df4f7-bcd5-4c55-ad58-6768b6459716"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Row", "@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Evaluate", "@", 
       RowBox[{"Table", "[", 
        RowBox[{
         SuperscriptBox["x", "n"], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "0", ",", "5"}], "}"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}], ",", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Evaluate", "@", 
       RowBox[{"Table", "[", 
        RowBox[{
         SuperscriptBox["x", "n"], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", 
           RowBox[{"-", "5"}], ",", "0"}], "}"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}]}], "}"}]}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"a82746a8-f1b3-4d50-9be5-a2a3c4aae524"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ7ZX64uKBl6F2DGDwwX6BqH9bl2SLPYzfyLFZvVNy
CpwfEblw/YePS+B87v+NMe5y6+F81cB3Lw53b4Hzy89Z2s/4shPOF98ieI+R
cT+cv+2R85nzNofg/ENZc6Uj3xyB87+q2fKvzT0O5zP9XC0grXoKzjf7n7At
eN0ZOP9Mi8m5Y1rn4Xz5Ca9/rnx3Ac5//f3+vasGl+D8Ja92n+Lruwzn88ku
f//kyRU4vydza9oClWtw/jeH1U8y6q/D+SVGR7aIHb4B599fd6T7ouItOP93
1pXZmlW34XxtR/Z/abvvwPnuixTTN4rfQ4SXbLzSw5j7cL7Om1Du674P4Hxh
/g8cR34h+Cz7Z69XnvMQzs822X2T0/sRnL/aM2nBvm8I/tfXUgLPpj2G87cG
uzNPcXkC59d7tM7f8gzBV7zrdWNx61M438q8ZYqk0TM4P0bu/E/Gywj+11O9
jwoan8P5M1jiSoJUXiDcf2/rIqYjCD5rbWOIZeFLOJ9hZdz6R0Kv4PyiWet7
hQ4h+Hu1OzgE817D+YJeRTpNfG/g/Du6Fy5X7kHwN8yzV3kS9xbOj11vJij7
D8FvaF3YeGfVOzh/7QvZ2Xw+7+F8pRYRD/ZlCP50ee6v//8j+ACgshGH
          "]]}, Annotation[#, "Charting`Private`Tag$5658#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxFxW0w03EcAPCNdZRrjMr9adxE5SlOUlKpuMhDneHk8nRCWk/InXR1WrdJ
nua6nZTnh5R2jGyuMnHsdDnPo1GzMUtj83RndnRZ9cL39+JzH0r8XWqiHg6H
C/7n/wGJypGu+fAz2xN8LFJkmLv39kcrS8paMV84cED8vhwLgyMStB3PsQR4
yuWpTwGWDlftvZydizFgumHroWcYG74SWc1dWa2DjXT0KD8rLmwXsqTsyePB
GYOe3iVrH2FzHkmKx3fCbXKf/qFT3XA3rdwyUi2ENQdPGzfe/gLrbXBMLO36
YA9dXFtoUz/cz3Af7HUYgq2LVBsNS8OwSiuTjruOwnUL7X3EQhFMJL9ZVijG
4Pwb/KQq22/w+lmOIjlLDKe7CXn7eiZgWZMwb4TyHf5NGyu1f/ADdjxnsJXU
LoH9aijXW8ylcAY51mYmSgY7qcONxMHTsJnxiqFwE03oLOUeKJuBb7q3T+4M
lMOci/FVn9fRGpWFyVzxLMwP9dNn+yrgLH9mJW8OTZkKmKhl/oRPHmewMbc5
OMpqaAMvQmv6CuQp9F9wCSEmnWqrhM2k/Bo9IXrHI3qYZ+o8jGuI4cpNF+C0
V9wC0250h2OOIemOCiYFpDk9IaphifOwKFOAbq7wtlXELMLRXA8SeQv9mFlN
l7xbghuV5FJi0DKcU86Mk15CJ1AX7ZpC0PsFgubgCHQu62pvfjw62ePl6q5M
tA1jj79BPXrrxMPd4rfoycXZ0XoOuiiiNfpCC1rnQL3HFKAlI6wKfRH6Q7b2
mmgczfaKta+dQAe+PsI7L0V/uj/wlT6PLnY+xgpRo1PlZWGUZfThoFuyrjU0
AT9WV6RFT/O9aHGbaAGt1sX1D/qFtZFGp0P/BaO4ekM=
          "]]}, Annotation[#, "Charting`Private`Tag$5658#2"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
l0zPzRHYjtWjv/N/9SW6zA==
          "]]}, Annotation[#, "Charting`Private`Tag$5658#3"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
YESq5qN/uWi+zYtrayQ6TQQG/+//A141k/U=
          "]]}, Annotation[#, "Charting`Private`Tag$5658#4"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
/+v/ACCxYQU=
          "]]}, Annotation[#, "Charting`Private`Tag$5658#5"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
X6l4xrd5aW2NCq5o6Y//x/8Bjzj0Ag==
          "]]}, Annotation[#, "Charting`Private`Tag$5658#6"]& ]}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 300, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0, 1}, {0., 1.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],
   GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
          "]], 
         LineBox[CompressedData["
1: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
ckCzKYHAg/8BYqSxiA==
          "]]}, Annotation[#, "Charting`Private`Tag$5716#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
xBELEtjM3qo9VNWL1252xZz4RIL/AdG/Gh4=
          "]], 
         LineBox[CompressedData["
1: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
          "]]}, Annotation[#, "Charting`Private`Tag$5716#2"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
icLyxj14UE2bapX1Ba5r0fQSw/fifwEXRJoR
          "]], 
         LineBox[CompressedData["
1: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
riye
          "]]}, Annotation[#, "Charting`Private`Tag$5716#3"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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

          "]], 
         LineBox[CompressedData["
1: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
          "]]}, Annotation[#, "Charting`Private`Tag$5716#4"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
y/YrHhLlPh71v2GB/wNTymUK
          "]], 
         LineBox[CompressedData["
1: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
F5M=
          "]]}, Annotation[#, "Charting`Private`Tag$5716#5"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQrWcv9ur///f7GcDgg31Q+9nVxvEIfvn5ltz0fe/g
/CtXuF8dTHwL58seyBcxl3kD52/NPsLKf/cVnJ/QY/jhZtNLOP/HpOqO/fYv
4PzFfPckZzx8BufP8TIsutz5FM5vykms0PR8AudXM68qL3r7CM5PbDivcm3F
Qzh/6t6nM+ZkPYDzd93X4FmjdA/OVxZwcAqZdxvO36TVkfXo8Q04//7RjQpm
Ztfg/Kc6U432b7sM5wvWrTTTY7wI5+uYvddZ+vkMnN/s8vbCzorjcL5oyLoJ
keKHEPZ9O8p/QmUXnL/09tPely3r4PzYQJktt5OnwPk7uaqvHiqdbA/jmz5i
lGuMWA/nK3/Y/dPq0E4433PxzbN+EYfgfFdfIeavW4/D+f3x1xsMtp+B84/7
yfIGCF2E898qitZdmnUZzi8t0U7sF7sG51+/IxCUduIGnJ9QafOc3ec2nH9Y
27zrMOs9OF+Nc8+LJR4P4HzZPdmurB0P4XyGX0wrix49gvO/B+6NO6r6BM6/
bRIvrdryFM4vCBcQVLrzDM6XnPIkgkX2BZy/LnrB8s8VL+H8cNt6jxN7X8H5
G+Nylaz+vIbzf3A5M+8MfQvnB120NpOd8Q7Od+DQnMDn8x7Oh+YXOB8AsoAY
Yg==
          "]]}, 
        Annotation[#, 
         "Charting`Private`Tag$5716#6"]& ], {}}, {{}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 300, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1, 1}, {-48.82404111333125, 75.69302268190401}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}]},
  "RowDefault"]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"00e57fa1-9369-4924-b9a2-15515e08b8b7"]
}, Open  ]],

Cell["S\[ATilde]o apenas as pot\[EHat]ncias fracion\[AAcute]rias slash ra\
\[IAcute]zes.", "Text",ExpressionUUID->"63636f36-a1b9-4df8-8f18-13b06353cf2c"]
},
WindowSize->{675, 692},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, 32000},
PrintingOptions->{"Magnification"->1.,
"PageSize"->{571.2, 817.44},
"PaperOrientation"->"Portrait",
"PaperSize"->{595.1999999999999, 841.92},
"PrintingMargins"->14.173228499999999`},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 439, 10, 122, "Text",ExpressionUUID->"ba9657a1-46c4-4c7c-936b-1f442968abe2"],
Cell[1000, 32, 799, 25, 49, "ItemNumbered",ExpressionUUID->"c947992e-5b51-42ac-9e23-1284b6e23c6c"],
Cell[1802, 59, 3484, 102, 365, "Text",ExpressionUUID->"702f76f4-d5ac-4f55-8ddb-582e9054190f"],
Cell[5289, 163, 796, 26, 92, "Text",ExpressionUUID->"5d04507a-650e-4e47-8c4a-ae9dcdc7822f"],
Cell[CellGroupData[{
Cell[6110, 193, 748, 25, 50, "Input",ExpressionUUID->"b624652e-314d-4cf8-b9f0-ae3acd9a5a72"],
Cell[6861, 220, 412, 13, 50, "Output",ExpressionUUID->"f50faa5d-ab6b-40f6-a838-24bef14b601c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7310, 238, 118, 0, 31, "ItemNumbered",ExpressionUUID->"6152c1b5-d8c4-4739-9872-709355530649"],
Cell[7431, 240, 701, 21, 44, "SubitemNumbered",ExpressionUUID->"d06a3251-4cf5-4dab-8131-6e075c4e1b23"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8169, 266, 467, 15, 53, "Input",ExpressionUUID->"b41dbf56-39f8-464c-b81f-707d6c4ce5bb"],
Cell[8639, 283, 474, 16, 51, "Output",ExpressionUUID->"3e4eabe7-d794-45c6-99d6-a8004508ed98"]
}, Open  ]],
Cell[9128, 302, 847, 28, 51, "Text",ExpressionUUID->"2293720a-f4e3-467d-9c34-fd23917e81c7"],
Cell[9978, 332, 876, 29, 53, "Text",ExpressionUUID->"aacd1572-d0ab-45cf-abfe-2790b3c17243"],
Cell[10857, 363, 5068, 142, 354, "Text",ExpressionUUID->"c222e2af-7639-4ee3-909f-f680abd047b8"],
Cell[15928, 507, 2055, 70, 99, "Text",ExpressionUUID->"8c6b065d-2c31-45d3-ac4f-04de93386f09"],
Cell[17986, 579, 1657, 48, 237, "Text",ExpressionUUID->"96d37d8d-471b-4450-8874-25195c2c5644"],
Cell[CellGroupData[{
Cell[19668, 631, 406, 13, 42, "WolframAlphaLong",ExpressionUUID->"68bbab7d-642e-40fd-bec4-d82147cd4d72"],
Cell[20077, 646, 426926, 7916, 2951, "Print",ExpressionUUID->"3b94bf33-d5a2-47f5-b900-1bcb74900039"]
}, Open  ]],
Cell[447018, 8565, 1391, 46, 56, "Text",ExpressionUUID->"b18733c3-8740-434d-9dfe-16e48650e4d8"],
Cell[448412, 8613, 456, 13, 44, "SubitemNumbered",ExpressionUUID->"c6f746c9-d4ef-4fde-8c69-943a444fd79d"],
Cell[448871, 8628, 551, 18, 51, "Text",ExpressionUUID->"0e2230d3-55a5-467d-8330-4b27a7f66eb4"],
Cell[449425, 8648, 528, 16, 51, "Text",ExpressionUUID->"11035450-1985-4099-8e0c-0127d66eee81"],
Cell[449956, 8666, 2036, 70, 133, "Text",ExpressionUUID->"9a491549-c409-455d-a7d0-76faae6a53a7"],
Cell[451995, 8738, 1985, 61, 163, "Text",ExpressionUUID->"232f2eb2-30b6-47f3-acea-d54f71671ff3"],
Cell[453983, 8801, 817, 23, 41, "Text",ExpressionUUID->"1e58e1b1-0d82-4451-9b3f-2f3ff00c65fd"],
Cell[454803, 8826, 585, 14, 46, "Text",ExpressionUUID->"152ab94d-ec99-41be-a5ac-23ca864b439f"],
Cell[455391, 8842, 442, 12, 73, "Text",ExpressionUUID->"2c4adf54-1456-40b2-9805-1e065974431f"],
Cell[455836, 8856, 1986, 60, 262, "Text",ExpressionUUID->"e4bb1c93-95b7-4bbd-9433-9bf92b3918c2"],
Cell[CellGroupData[{
Cell[457847, 8920, 720, 23, 42, "Input",ExpressionUUID->"5b60e978-c786-4a88-999c-8932d9c745f4"],
Cell[458570, 8945, 528, 17, 48, "Output",ExpressionUUID->"4a8e705f-8fd9-44c7-98a4-94df68203593"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459135, 8967, 143, 1, 42, "WolframAlphaLong",ExpressionUUID->"4b393681-e82e-49db-81b2-e1dac6329db6"],
Cell[459281, 8970, 17887, 361, 467, "Print",ExpressionUUID->"9ea55f68-e4ca-48f9-97b8-e0d790cde287"]
}, Open  ]],
Cell[477183, 9334, 662, 21, 51, "SubitemNumbered",ExpressionUUID->"4fe30b17-d295-4784-84eb-ef9426846ee8"],
Cell[477848, 9357, 1791, 57, 255, "Text",ExpressionUUID->"6498a802-7011-49ac-9da2-4080cde41c78"],
Cell[479642, 9416, 484, 15, 57, "SubitemNumbered",ExpressionUUID->"2f5586da-f412-479c-833d-871040f48063"],
Cell[480129, 9433, 2040, 61, 334, "Text",ExpressionUUID->"12ee0428-3a39-48c8-b517-7bd647fd47da"],
Cell[CellGroupData[{
Cell[482194, 9498, 343, 10, 42, "WolframAlphaLong",ExpressionUUID->"a9ed221c-ca90-4e11-88db-7fe9086473fd"],
Cell[482540, 9510, 107919, 2061, 921, "Print",ExpressionUUID->"7ad1327b-d985-4332-adc0-0bddfe2fb675"]
}, Open  ]],
Cell[590474, 11574, 481, 14, 46, "SubitemNumbered",ExpressionUUID->"5d0a10ea-870f-43f2-8345-1b62196bb28e"],
Cell[590958, 11590, 1101, 35, 87, "Text",ExpressionUUID->"0887d663-99d2-4d06-b6fd-e68487ebb8fb"],
Cell[592062, 11627, 1239, 38, 53, "Text",ExpressionUUID->"e8333cc7-71ee-4842-bb2e-d271de325a2e"],
Cell[593304, 11667, 551, 15, 46, "Text",ExpressionUUID->"94e751f7-165b-48fc-bfe8-92baf6ebac9b"],
Cell[CellGroupData[{
Cell[593880, 11686, 256, 6, 44, "Input",ExpressionUUID->"ea20b09c-9d03-4798-a290-6619c0c42d51"],
Cell[594139, 11694, 223, 6, 48, "Output",ExpressionUUID->"0875b676-7795-449b-8bce-c209f0594059"]
}, Open  ]],
Cell[CellGroupData[{
Cell[594399, 11705, 149, 1, 42, "WolframAlphaLong",ExpressionUUID->"69b9f31a-fd60-454d-a53d-7f3dfe9d1eb1"],
Cell[594551, 11708, 122589, 2350, 1435, "Print",ExpressionUUID->"7684dbce-54c6-4a60-a1f7-ba5fc0e2d529"]
}, Open  ]],
Cell[CellGroupData[{
Cell[717177, 14063, 100, 0, 31, "ItemNumbered",ExpressionUUID->"95e34129-4a89-49a7-90aa-802286cebc82"],
Cell[717280, 14065, 507, 15, 42, "SubitemNumbered",ExpressionUUID->"47aa9785-5318-4711-beb3-d69da05fe754"]
}, Open  ]],
Cell[717802, 14083, 2257, 68, 218, "Text",ExpressionUUID->"c5888815-9886-4453-ae17-9778430b5d0a"],
Cell[CellGroupData[{
Cell[720084, 14155, 373, 11, 44, "Input",ExpressionUUID->"6e17b4e1-c17f-43b4-85de-dbc76bfed323"],
Cell[720460, 14168, 291, 8, 32, "Output",ExpressionUUID->"df4a7c56-2f4b-45cc-851d-0d5ddc31abf7"]
}, Open  ]],
Cell[720766, 14179, 478, 14, 45, "SubitemNumbered",ExpressionUUID->"5689158e-d0af-484c-b135-9e811571df4c"],
Cell[721247, 14195, 1960, 58, 233, "Text",ExpressionUUID->"26b34f26-eaa0-4d1d-ab43-fe4b81602bc5"],
Cell[CellGroupData[{
Cell[723232, 14257, 229, 6, 44, "Input",ExpressionUUID->"326ae6cb-9fa9-437f-bb51-2f366ef0fe5e"],
Cell[723464, 14265, 135, 2, 32, "Output",ExpressionUUID->"970a4a9d-6c20-404e-979b-33860b6814c5"]
}, Open  ]],
Cell[723614, 14270, 633, 20, 51, "Text",ExpressionUUID->"5e31ed44-25c9-49b7-868d-459850a1363a"],
Cell[CellGroupData[{
Cell[724272, 14294, 346, 10, 46, "Input",ExpressionUUID->"1320fccd-02e7-410f-a8ad-9910b7833674"],
Cell[724621, 14306, 254, 7, 51, "Output",ExpressionUUID->"94abe28e-b2b4-4245-9ce5-5d0c6a0602c7"]
}, Open  ]],
Cell[724890, 14316, 413, 12, 64, "SubitemNumbered",ExpressionUUID->"ae318266-bcf0-431c-addb-b9e0520a620f"],
Cell[725306, 14330, 720, 23, 71, "Text",ExpressionUUID->"e6ebf761-470c-4756-825d-a74b447e1ca6"],
Cell[726029, 14355, 240, 4, 34, "Text",ExpressionUUID->"2a813ab6-89ca-4204-a432-3c5b88646eb4"],
Cell[726272, 14361, 101, 0, 34, "Text",ExpressionUUID->"628d27cf-bbf5-4b78-bcbf-9a1a262ee12d"],
Cell[726376, 14363, 3415, 109, 296, "Text",ExpressionUUID->"a1cbe1c7-dac0-4c24-ae60-a1cd102da65c"],
Cell[CellGroupData[{
Cell[729816, 14476, 838, 28, 76, "Input",ExpressionUUID->"5f8e8f29-2bb8-4f87-919f-1c9022180b61"],
Cell[730657, 14506, 765, 24, 37, "Output",ExpressionUUID->"9a373959-42b2-443e-b5f8-bd0bb9823b32"]
}, Open  ]],
Cell[CellGroupData[{
Cell[731459, 14535, 395, 12, 42, "WolframAlphaLong",ExpressionUUID->"d321fc46-6d75-4989-b4c3-9f21ae46909c"],
Cell[731857, 14549, 136997, 2677, 1821, "Print",ExpressionUUID->"e8eddbc6-80d7-4907-9398-c16c91840d77"]
}, Open  ]],
Cell[868869, 17229, 336, 8, 42, "SubitemNumbered",ExpressionUUID->"cc131665-69b9-4696-b6e5-b03c60b85081"],
Cell[869208, 17239, 1615, 56, 112, "Text",ExpressionUUID->"efcbdf10-bafb-46b4-a94f-ef85a1986e96"],
Cell[870826, 17297, 3467, 105, 379, "Text",ExpressionUUID->"2cfad53a-a9cf-44e6-bf8f-36405c82c194"],
Cell[874296, 17404, 198, 3, 34, "Text",ExpressionUUID->"3218ade7-e20e-4cd1-81c2-73554452d399"],
Cell[874497, 17409, 6036, 182, 597, "Text",ExpressionUUID->"0f2b9233-d852-4920-84d9-5600c9218b2c"],
Cell[880536, 17593, 1531, 49, 102, "Text",ExpressionUUID->"62c975f7-5b19-43d6-9a03-b41b285232fa"],
Cell[882070, 17644, 1343, 42, 39, "Text",ExpressionUUID->"b2f9d0e6-68ee-48d1-9b36-b0c011f02667"],
Cell[CellGroupData[{
Cell[883438, 17690, 783, 24, 74, "Input",ExpressionUUID->"3df803a0-032f-4fd7-9739-0d2fb74c356b"],
Cell[884224, 17716, 674, 22, 49, "Output",ExpressionUUID->"f426d69f-bfc2-4e30-b64f-9b1d4087ab2b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[884935, 17743, 144, 1, 42, "WolframAlphaLong",ExpressionUUID->"131b2c6b-1ffe-4770-8f2d-61dd118cc1a1"],
Cell[885082, 17746, 136913, 2621, 1764, "Print",ExpressionUUID->"3a33ba37-cc5e-4546-8bb6-84ae6e796660"]
}, Open  ]],
Cell[1022010, 20370, 473, 14, 46, "SubitemNumbered",ExpressionUUID->"4e436a9a-0d2d-4343-8196-0cdb31979495"],
Cell[CellGroupData[{
Cell[1022508, 20388, 321, 10, 32, "Input",ExpressionUUID->"3bdf4a63-1f32-413c-9c45-e70d0af4a122"],
Cell[1022832, 20400, 280, 8, 52, "Output",ExpressionUUID->"58724239-3969-4147-8a6f-7155a6738e38"]
}, Open  ]],
Cell[1023127, 20411, 99, 0, 34, "Text",ExpressionUUID->"2e9531ca-1d3c-4eaa-8c71-4623d80d97c7"],
Cell[CellGroupData[{
Cell[1023251, 20415, 301, 8, 32, "Input",ExpressionUUID->"59b831d2-f584-447f-91b9-faf74e75ba73"],
Cell[1023555, 20425, 348, 10, 32, "Output",ExpressionUUID->"b8fb1b2e-a3b2-48e9-80ea-aa04606e117b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1023940, 20440, 339, 10, 32, "Input",ExpressionUUID->"7a516cee-27c8-4dcf-bd9c-e383ff40e221"],
Cell[1024282, 20452, 215, 6, 48, "Output",ExpressionUUID->"fa5a0745-7049-49b1-9195-bbfdda787484"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1024534, 20463, 277, 8, 28, "Input",ExpressionUUID->"d8f7909c-68a6-4a13-8a11-7a0a583a9649"],
Cell[1024814, 20473, 288, 9, 46, "Output",ExpressionUUID->"3fbe9c95-0f33-4470-942e-e36efc967113"]
}, Open  ]],
Cell[1025117, 20485, 2356, 73, 178, "Text",ExpressionUUID->"646de3a8-0f3a-4bff-b062-53de89da9841"],
Cell[1027476, 20560, 2465, 80, 263, "Text",ExpressionUUID->"9155a537-8b04-4d6f-93b2-818b5110c5e0"],
Cell[1029944, 20642, 3954, 118, 332, "Text",ExpressionUUID->"bf49d9c4-b263-4ffd-b849-2e7833d0ea7e"],
Cell[CellGroupData[{
Cell[1033923, 20764, 917, 29, 85, "Input",ExpressionUUID->"623643a7-aa18-4e49-af50-0cd89bc4701b"],
Cell[1034843, 20795, 1029, 34, 90, "Output",ExpressionUUID->"f7f75a7e-489b-4a56-b0d7-7480314c1459"]
}, Open  ]],
Cell[1035887, 20832, 703, 19, 68, "Text",ExpressionUUID->"cff2b43f-c70f-414b-b33b-7df48028619b"],
Cell[1036593, 20853, 145, 1, 34, "Text",ExpressionUUID->"7728d98e-4eee-476c-a66d-71aacf43f9e8"],
Cell[1036741, 20856, 2601, 81, 213, "Text",ExpressionUUID->"76c44c0c-a181-46d8-8c02-3e0bd5935e0c"],
Cell[1039345, 20939, 354, 9, 68, "Text",ExpressionUUID->"32cb433a-5ae7-4b8f-9e35-b6a39d9a157d"],
Cell[1039702, 20950, 2021, 64, 200, "Text",ExpressionUUID->"5a42c6db-e233-4788-85e6-7e3c8d4c3777"],
Cell[CellGroupData[{
Cell[1041748, 21018, 345, 10, 42, "WolframAlphaLong",ExpressionUUID->"5733e629-96d7-475d-a41e-b32027084e0e"],
Cell[1042096, 21030, 72191, 1456, 1071, "Print",ExpressionUUID->"9378bc9c-baab-493c-86f0-9baba2fd225c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1114324, 22491, 3749, 87, 314, "Input",ExpressionUUID->"4f2a5e47-2777-4892-a432-ef784e3f64f6"],
Cell[1118076, 22580, 277, 5, 46, "Output",ExpressionUUID->"b69b456e-8d2a-44d6-8e62-84aa0cfa1bd2"]
}, Open  ]],
Cell[1118368, 22588, 500, 15, 61, "SubitemNumbered",ExpressionUUID->"60729844-93bd-43c1-bbb3-6de130f96267"],
Cell[1118871, 22605, 1182, 38, 57, "Text",ExpressionUUID->"369ba62b-6a6d-439f-b603-0d1cfe689cbb"],
Cell[1120056, 22645, 1334, 48, 183, "Text",ExpressionUUID->"7bd8ef53-5ddf-48d3-b91f-3ff569aaf5c1"],
Cell[1121393, 22695, 1092, 37, 93, "Text",ExpressionUUID->"367143d3-8a6f-4060-8022-298e6fbde2cb"],
Cell[1122488, 22734, 656, 14, 102, "Text",ExpressionUUID->"23a37fc1-bfcd-4f0b-ae89-10a6206537d4"],
Cell[1123147, 22750, 5125, 157, 403, "Text",ExpressionUUID->"ee18b39e-796a-4af3-a8f5-482c35fb7211"],
Cell[1128275, 22909, 1889, 57, 142, "Text",ExpressionUUID->"b2761751-db20-4006-9f89-e3b2942eba32"],
Cell[CellGroupData[{
Cell[1130189, 22970, 1790, 60, 131, "Input",ExpressionUUID->"9abe5634-bcd2-4a65-b6d1-dc7bd15883c0"],
Cell[1131982, 23032, 1078, 36, 97, "Output",ExpressionUUID->"35f0b53b-50c0-413d-93f6-7b1a4bba842c"]
}, Open  ]],
Cell[1133075, 23071, 495, 15, 75, "SubitemNumbered",ExpressionUUID->"5278fed7-7bc9-4ef0-b5b2-ccf41e934d68"],
Cell[1133573, 23088, 2138, 64, 337, "Text",ExpressionUUID->"fc7afff6-0b1e-4a66-ad3a-680ddb3d9871"],
Cell[CellGroupData[{
Cell[1135736, 23156, 560, 18, 31, "Input",ExpressionUUID->"ee2aa29e-400b-4fc7-8c32-22f760b51994"],
Cell[1136299, 23176, 269, 8, 35, "Output",ExpressionUUID->"6ae3da5f-1690-4018-b2e4-08b85b047858"]
}, Open  ]],
Cell[1136583, 23187, 470, 15, 75, "SubitemNumbered",ExpressionUUID->"ff0ff674-96e6-43b1-ae33-24a2d7bec925"],
Cell[1137056, 23204, 4336, 134, 621, "Text",ExpressionUUID->"1212fad0-9e87-4309-a2e3-a806d3105a1c"],
Cell[CellGroupData[{
Cell[1141417, 23342, 1306, 46, 116, "Input",ExpressionUUID->"24c523fe-8ec9-4057-911e-2469bf949433"],
Cell[1142726, 23390, 810, 30, 51, "Output",ExpressionUUID->"efe51ee9-1756-4380-a68d-88cb5d30a54f"]
}, Open  ]],
Cell[1143551, 23423, 191, 3, 31, "ItemNumbered",ExpressionUUID->"afd24148-cb9b-4eb0-a9a4-3bc38d4b78fd"],
Cell[1143745, 23428, 463, 14, 46, "Text",ExpressionUUID->"c93c8066-de81-4bf4-b770-664a633dcd3f"],
Cell[CellGroupData[{
Cell[1144233, 23446, 559, 17, 31, "Input",ExpressionUUID->"e2f1f888-19d5-45fc-ba92-8ed46293c0e1"],
Cell[1144795, 23465, 21087, 410, 247, "Output",ExpressionUUID->"9e550ddf-5805-4b37-b764-d2e9a8ca9ba0"]
}, Open  ]],
Cell[1165897, 23878, 3801, 114, 502, "Text",ExpressionUUID->"9d80d35c-b74e-4e0d-a1a5-9c706d764f73"],
Cell[1169701, 23994, 180, 3, 34, "Text",ExpressionUUID->"5b83971a-b738-452c-b981-59da27445af9"],
Cell[CellGroupData[{
Cell[1169906, 24001, 1139, 41, 87, "Input",ExpressionUUID->"f0e464e5-a29c-4bfc-bff6-add0ec58b4cc"],
Cell[1171048, 24044, 562, 20, 51, "Output",ExpressionUUID->"13c31ded-e695-445b-aba3-f6ac78684bfb"]
}, Open  ]],
Cell[1171625, 24067, 192, 3, 31, "ItemNumbered",ExpressionUUID->"032627a8-b61a-48c0-9778-6a870c2bb7ea"],
Cell[1171820, 24072, 436, 13, 46, "Text",ExpressionUUID->"11d57ba4-4f13-43b6-85c0-3d434c1ab8af"],
Cell[CellGroupData[{
Cell[1172281, 24089, 505, 14, 31, "Input",ExpressionUUID->"2267d77b-1717-4069-8139-cb19126f6493"],
Cell[1172789, 24105, 16479, 334, 248, "Output",ExpressionUUID->"004f831f-15db-4dae-83fa-91d88540f1cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1189305, 24444, 420, 12, 37, "Input",ExpressionUUID->"09397d27-5874-49f4-b13e-096e6a4d27cb"],
Cell[1189728, 24458, 16610, 342, 247, "Output",ExpressionUUID->"6b6ceb6b-30d0-4f00-bac5-946e01ed61e9"]
}, Open  ]],
Cell[1206353, 24803, 1951, 57, 265, "Text",ExpressionUUID->"d4ec49a9-3806-4112-a179-2c71faf5af73"],
Cell[1208307, 24862, 1985, 63, 298, "Text",ExpressionUUID->"941ed2cb-4cd6-4259-a176-2f73cc4fdd1d"],
Cell[1210295, 24927, 1993, 60, 254, "Text",ExpressionUUID->"62df2e2f-7209-49a8-b18a-fc2106cccf9b"],
Cell[CellGroupData[{
Cell[1212313, 24991, 1676, 56, 143, "Input",ExpressionUUID->"53a28f31-02e0-4227-95d5-31dc773587a3"],
Cell[1213992, 25049, 1028, 34, 81, "Output",ExpressionUUID->"f20a30af-ebc1-4dac-a14c-faf546f732ef"]
}, Open  ]],
Cell[1215035, 25086, 712, 23, 48, "Text",ExpressionUUID->"e0c94c08-a349-45b3-9817-9d527f459583"],
Cell[1215750, 25111, 76, 0, 34, "Text",ExpressionUUID->"1d88fecc-005a-4194-a16a-cf595c5417a5"],
Cell[1215829, 25113, 22456, 373, 313, "Input",ExpressionUUID->"ea5cadf0-7da9-4a59-a985-af9111ee4b7e"],
Cell[1238288, 25488, 857, 26, 151, "Text",ExpressionUUID->"a7807fcb-10ca-4c75-861e-2f242d72fe24"],
Cell[1239148, 25516, 1012, 33, 80, "Text",ExpressionUUID->"4083f0e7-c239-4b5c-9407-640258d740ca"],
Cell[1240163, 25551, 1982, 63, 372, "Text",ExpressionUUID->"d08a42a3-8620-43f1-a306-73e659d462da"],
Cell[CellGroupData[{
Cell[1242170, 25618, 1021, 33, 77, "Input",ExpressionUUID->"399f1eec-5e19-4b29-96ae-6c305e970004"],
Cell[1243194, 25653, 435, 13, 51, "Output",ExpressionUUID->"e799fa49-4892-4df6-8bac-fd42a2d0703a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1243666, 25671, 530, 15, 42, "Input",ExpressionUUID->"35dfc37b-dae0-4877-82c9-2b7064599f78"],
Cell[1244199, 25688, 18985, 383, 249, 13125, 287, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"e8063841-ac8a-492c-8202-69c2a4476cbf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1263221, 26076, 654, 18, 65, "Input",ExpressionUUID->"26b63e04-1155-4bfd-bfc2-5ed7c05ca274"],
Cell[1263878, 26096, 10460, 197, 144, "Output",ExpressionUUID->"59bd1e8b-c24f-457d-884d-0d8406c6a6dd"]
}, Open  ]],
Cell[1274353, 26296, 408, 6, 71, "ItemNumbered",ExpressionUUID->"e5c5b3b9-6c65-4e52-bd03-28fde65b86f0"],
Cell[CellGroupData[{
Cell[1274786, 26306, 1005, 32, 71, "Input",ExpressionUUID->"087cea18-e03f-4c24-98c0-ac01f3857677"],
Cell[1275794, 26340, 6696, 136, 237, "Output",ExpressionUUID->"dd5c8376-d8f6-46e7-b8c7-287ccada7888"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1282527, 26481, 322, 9, 32, "Input",ExpressionUUID->"5d800651-9896-42ac-a0f3-20d676ec5b62"],
Cell[1282852, 26492, 249, 7, 52, "Output",ExpressionUUID->"fdcab9b7-3ea5-4165-b178-ead53c381944"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1283138, 26504, 490, 16, 48, "Input",ExpressionUUID->"ab17613b-f2d8-4cac-bd36-4f8deaca3e93"],
Cell[1283631, 26522, 275, 7, 32, "Output",ExpressionUUID->"d4004971-6c77-4b8f-9947-a8b3105ff0e6"]
}, Open  ]],
Cell[1283921, 26532, 406, 9, 46, "Text",ExpressionUUID->"1cf48493-19da-4a1d-8569-21514b0a6d30"],
Cell[1284330, 26543, 186, 3, 34, "Text",ExpressionUUID->"9490e382-7d0d-4e38-85e7-2627e7062016"],
Cell[1284519, 26548, 315, 6, 56, "Text",ExpressionUUID->"ff9fc069-c920-40d1-a92f-ccbef3eede7d"],
Cell[1284837, 26556, 433, 8, 90, "Text",ExpressionUUID->"e2e8379c-47b9-4ef3-9188-fe3ef1c4412b"],
Cell[CellGroupData[{
Cell[1285295, 26568, 483, 15, 48, "Input",ExpressionUUID->"c839da7b-74d4-4ad9-b2d2-52964c2a10fd"],
Cell[1285781, 26585, 14948, 266, 223, 9938, 184, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"bcbf17c7-8c2e-4bbc-a207-b48c8c597aa3"]
}, Open  ]],
Cell[1300744, 26854, 223, 3, 56, "Text",ExpressionUUID->"649c9d9c-02f7-448c-8416-4e047c659d4a"],
Cell[1300970, 26859, 1179, 19, 232, "Text",ExpressionUUID->"513794ce-9db4-43a4-9fbe-f0b2bc982719"],
Cell[1302152, 26880, 2853, 68, 236, "Text",ExpressionUUID->"3cb627c9-a4c4-458b-98ad-34c7a65cc4cc"],
Cell[1305008, 26950, 98, 0, 34, "Text",ExpressionUUID->"20260a07-6be8-4d58-b3c2-d714f73f24c7"],
Cell[CellGroupData[{
Cell[1305131, 26954, 420, 6, 51, "Item",ExpressionUUID->"fb01afe7-a97e-449b-ab02-d33a55c3c302"],
Cell[1305554, 26962, 952, 20, 135, "Item",ExpressionUUID->"1d5a4a34-0b7b-48f1-a28f-a18c44a28d39"],
Cell[1306509, 26984, 1240, 23, 143, "Item",ExpressionUUID->"971df4f7-bcd5-4c55-ad58-6768b6459716"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1307786, 27012, 986, 28, 48, "Input",ExpressionUUID->"a82746a8-f1b3-4d50-9be5-a2a3c4aae524"],
Cell[1308775, 27042, 75941, 1315, 204, "Output",ExpressionUUID->"00e57fa1-9369-4924-b9a2-15515e08b8b7"]
}, Open  ]],
Cell[1384731, 28360, 153, 1, 34, "Text",ExpressionUUID->"63636f36-a1b9-4df8-8f18-13b06353cf2c"]
}
]
*)

